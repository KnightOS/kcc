//
// Register Declarations for Microchip 12F1822 Processor
//
//
// This header file was automatically generated by:
//
//	inc2h.pl V4850
//
//	Copyright (c) 2002, Kevin L. Pauba, All Rights Reserved
//
//	SDCC is licensed under the GNU Public license (GPL) v2.  Note that
//	this license covers the code to the compiler and other executables,
//	but explicitly does not cover any code or objects generated by sdcc.
//	We have not yet decided on a license for the run time libraries, but
//	it will not put any requirements on code linked against it. See:
// 
//	http://www.gnu.org/copyleft/gpl/html
//
//	See http://sdcc.sourceforge.net/ for the latest information on sdcc.
//
// 
#ifndef P12F1822_H
#define P12F1822_H

//
// Register addresses.
//
#define INDF0_ADDR	0x0000
#define INDF1_ADDR	0x0001
#define PCL_ADDR	0x0002
#define STATUS_ADDR	0x0003
#define FSR0_ADDR	0x0004
#define FSR0L_ADDR	0x0004
#define FSR0H_ADDR	0x0005
#define FSR1_ADDR	0x0006
#define FSR1L_ADDR	0x0006
#define FSR1H_ADDR	0x0007
#define BSR_ADDR	0x0008
#define WREG_ADDR	0x0009
#define PCLATH_ADDR	0x000A
#define INTCON_ADDR	0x000B
#define PORTA_ADDR	0x000C
#define PIR1_ADDR	0x0011
#define PIR2_ADDR	0x0012
#define TMR0_ADDR	0x0015
#define TMR1_ADDR	0x0016
#define TMR1L_ADDR	0x0016
#define TMR1H_ADDR	0x0017
#define T1CON_ADDR	0x0018
#define T1GCON_ADDR	0x0019
#define TMR2_ADDR	0x001A
#define PR2_ADDR	0x001B
#define T2CON_ADDR	0x001C
#define CPSCON0_ADDR	0x001E
#define CPSCON1_ADDR	0x001F
#define TRISA_ADDR	0x008C
#define PIE1_ADDR	0x0091
#define PIE2_ADDR	0x0092
#define OPTION_REG_ADDR	0x0095
#define PCON_ADDR	0x0096
#define WDTCON_ADDR	0x0097
#define OSCTUNE_ADDR	0x0098
#define OSCCON_ADDR	0x0099
#define OSCSTAT_ADDR	0x009A
#define ADRES_ADDR	0x009B
#define ADRESL_ADDR	0x009B
#define ADRESH_ADDR	0x009C
#define ADCON0_ADDR	0x009D
#define ADCON1_ADDR	0x009E
#define LATA_ADDR	0x010C
#define CM1CON0_ADDR	0x0111
#define CM1CON1_ADDR	0x0112
#define CMOUT_ADDR	0x0115
#define BORCON_ADDR	0x0116
#define FVRCON_ADDR	0x0117
#define DACCON0_ADDR	0x0118
#define DACCON1_ADDR	0x0119
#define SRCON0_ADDR	0x011A
#define SRCON1_ADDR	0x011B
#define APFCON_ADDR	0x011D
#define APFCON0_ADDR	0x011D
#define ANSELA_ADDR	0x018C
#define EEADR_ADDR	0x0191
#define EEADRL_ADDR	0x0191
#define EEADRH_ADDR	0x0192
#define EEDAT_ADDR	0x0193
#define EEDATL_ADDR	0x0193
#define EEDATH_ADDR	0x0194
#define EECON1_ADDR	0x0195
#define EECON2_ADDR	0x0196
#define RCREG_ADDR	0x0199
#define TXREG_ADDR	0x019A
#define SPBRG_ADDR	0x019B
#define SPBRGL_ADDR	0x019B
#define SPBRGH_ADDR	0x019C
#define RCSTA_ADDR	0x019D
#define TXSTA_ADDR	0x019E
#define BAUDCON_ADDR	0x019F
#define WPUA_ADDR	0x020C
#define SSP1BUF_ADDR	0x0211
#define SSPBUF_ADDR	0x0211
#define SSP1ADD_ADDR	0x0212
#define SSPADD_ADDR	0x0212
#define SSP1MSK_ADDR	0x0213
#define SSPMSK_ADDR	0x0213
#define SSP1STAT_ADDR	0x0214
#define SSPSTAT_ADDR	0x0214
#define SSP1CON1_ADDR	0x0215
#define SSPCON_ADDR	0x0215
#define SSPCON1_ADDR	0x0215
#define SSP1CON2_ADDR	0x0216
#define SSPCON2_ADDR	0x0216
#define SSP1CON3_ADDR	0x0217
#define SSPCON3_ADDR	0x0217
#define CCPR1L_ADDR	0x0291
#define CCPR1H_ADDR	0x0292
#define CCP1CON_ADDR	0x0293
#define PWM1CON_ADDR	0x0294
#define CCP1AS_ADDR	0x0295
#define ECCP1AS_ADDR	0x0295
#define PSTR1CON_ADDR	0x0296
#define IOCAP_ADDR	0x0391
#define IOCAN_ADDR	0x0392
#define IOCAF_ADDR	0x0393
#define CLKRCON_ADDR	0x039A
#define MDCON_ADDR	0x039C
#define MDSRC_ADDR	0x039D
#define MDCARL_ADDR	0x039E
#define MDCARH_ADDR	0x039F
#define STATUS_SHAD_ADDR	0x0FE4
#define WREG_SHAD_ADDR	0x0FE5
#define BSR_SHAD_ADDR	0x0FE6
#define PCLATH_SHAD_ADDR	0x0FE7
#define FSR0L_SHAD_ADDR	0x0FE8
#define FSR0H_SHAD_ADDR	0x0FE9
#define FSR1L_SHAD_ADDR	0x0FEA
#define FSR1H_SHAD_ADDR	0x0FEB
#define STKPTR_ADDR	0x0FED
#define TOSL_ADDR	0x0FEE
#define TOSH_ADDR	0x0FEF

//
// Memory organization.
//



//         LIST

//==========================================================================
//  MPASM PIC12F1822 processor include
// 
//  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
//==========================================================================

//         NOLIST

//==========================================================================
//  This header file defines configurations, registers, and other useful
//  bits of information for the PIC12F1822 microcontroller.  These names
//  are taken to match the data sheets as closely as possible.
//
//  Note that the processor must be selected before this file is included.
//  The processor may be selected the following ways:
//
//       1. Command line switch:
//               C:\MPASM MYFILE.ASM /PIC12F1822
//       2. LIST directive in the source file
//               LIST   P=PIC12F1822
//       3. Processor Type entry in the MPASM full-screen interface
//       4. Setting the processor in the MPLAB Project Dialog
//==========================================================================

//==========================================================================
//
//       Verify Processor
//
//==========================================================================
//        IFNDEF __12F1822
//            MESSG "Processor-header file mismatch.  Verify selected processor."
//         ENDIF



//==========================================================================
//
//       Register Definitions
//
//==========================================================================

#define W                    0x0000
#define F                    0x0001

//----- Register Files -----------------------------------------------------

//-----Bank0------------------
extern __sfr  __at (INDF0_ADDR)                   INDF0;
extern __sfr  __at (INDF1_ADDR)                   INDF1;
extern __sfr  __at (PCL_ADDR)                     PCL;
extern __sfr  __at (STATUS_ADDR)                  STATUS;
extern __sfr  __at (FSR0_ADDR)                    FSR0;
extern __sfr  __at (FSR0L_ADDR)                   FSR0L;
extern __sfr  __at (FSR0H_ADDR)                   FSR0H;
extern __sfr  __at (FSR1_ADDR)                    FSR1;
extern __sfr  __at (FSR1L_ADDR)                   FSR1L;
extern __sfr  __at (FSR1H_ADDR)                   FSR1H;
extern __sfr  __at (BSR_ADDR)                     BSR;
extern __sfr  __at (WREG_ADDR)                    WREG;
extern __sfr  __at (PCLATH_ADDR)                  PCLATH;
extern __sfr  __at (INTCON_ADDR)                  INTCON;
extern __sfr  __at (PORTA_ADDR)                   PORTA;
extern __sfr  __at (PIR1_ADDR)                    PIR1;
extern __sfr  __at (PIR2_ADDR)                    PIR2;
extern __sfr  __at (TMR0_ADDR)                    TMR0;
extern __sfr  __at (TMR1_ADDR)                    TMR1;
extern __sfr  __at (TMR1L_ADDR)                   TMR1L;
extern __sfr  __at (TMR1H_ADDR)                   TMR1H;
extern __sfr  __at (T1CON_ADDR)                   T1CON;
extern __sfr  __at (T1GCON_ADDR)                  T1GCON;
extern __sfr  __at (TMR2_ADDR)                    TMR2;
extern __sfr  __at (PR2_ADDR)                     PR2;
extern __sfr  __at (T2CON_ADDR)                   T2CON;
extern __sfr  __at (CPSCON0_ADDR)                 CPSCON0;
extern __sfr  __at (CPSCON1_ADDR)                 CPSCON1;

//-----Bank1------------------
extern __sfr  __at (TRISA_ADDR)                   TRISA;
extern __sfr  __at (PIE1_ADDR)                    PIE1;
extern __sfr  __at (PIE2_ADDR)                    PIE2;
extern __sfr  __at (OPTION_REG_ADDR)              OPTION_REG;
extern __sfr  __at (PCON_ADDR)                    PCON;
extern __sfr  __at (WDTCON_ADDR)                  WDTCON;
extern __sfr  __at (OSCTUNE_ADDR)                 OSCTUNE;
extern __sfr  __at (OSCCON_ADDR)                  OSCCON;
extern __sfr  __at (OSCSTAT_ADDR)                 OSCSTAT;
extern __sfr  __at (ADRES_ADDR)                   ADRES;
extern __sfr  __at (ADRESL_ADDR)                  ADRESL;
extern __sfr  __at (ADRESH_ADDR)                  ADRESH;
extern __sfr  __at (ADCON0_ADDR)                  ADCON0;
extern __sfr  __at (ADCON1_ADDR)                  ADCON1;

//-----Bank2------------------
extern __sfr  __at (LATA_ADDR)                    LATA;
extern __sfr  __at (CM1CON0_ADDR)                 CM1CON0;
extern __sfr  __at (CM1CON1_ADDR)                 CM1CON1;
extern __sfr  __at (CMOUT_ADDR)                   CMOUT;
extern __sfr  __at (BORCON_ADDR)                  BORCON;
extern __sfr  __at (FVRCON_ADDR)                  FVRCON;
extern __sfr  __at (DACCON0_ADDR)                 DACCON0;
extern __sfr  __at (DACCON1_ADDR)                 DACCON1;
extern __sfr  __at (SRCON0_ADDR)                  SRCON0;
extern __sfr  __at (SRCON1_ADDR)                  SRCON1;
extern __sfr  __at (APFCON_ADDR)                  APFCON;
extern __sfr  __at (APFCON0_ADDR)                 APFCON0;

//-----Bank3------------------
extern __sfr  __at (ANSELA_ADDR)                  ANSELA;
extern __sfr  __at (EEADR_ADDR)                   EEADR;
extern __sfr  __at (EEADRL_ADDR)                  EEADRL;
extern __sfr  __at (EEADRH_ADDR)                  EEADRH;
extern __sfr  __at (EEDAT_ADDR)                   EEDAT;
extern __sfr  __at (EEDATL_ADDR)                  EEDATL;
extern __sfr  __at (EEDATH_ADDR)                  EEDATH;
extern __sfr  __at (EECON1_ADDR)                  EECON1;
extern __sfr  __at (EECON2_ADDR)                  EECON2;
extern __sfr  __at (RCREG_ADDR)                   RCREG;
extern __sfr  __at (TXREG_ADDR)                   TXREG;
extern __sfr  __at (SPBRG_ADDR)                   SPBRG;
extern __sfr  __at (SPBRGL_ADDR)                  SPBRGL;
extern __sfr  __at (SPBRGH_ADDR)                  SPBRGH;
extern __sfr  __at (RCSTA_ADDR)                   RCSTA;
extern __sfr  __at (TXSTA_ADDR)                   TXSTA;
extern __sfr  __at (BAUDCON_ADDR)                 BAUDCON;

//-----Bank4------------------
extern __sfr  __at (WPUA_ADDR)                    WPUA;
extern __sfr  __at (SSP1BUF_ADDR)                 SSP1BUF;
extern __sfr  __at (SSPBUF_ADDR)                  SSPBUF;
extern __sfr  __at (SSP1ADD_ADDR)                 SSP1ADD;
extern __sfr  __at (SSPADD_ADDR)                  SSPADD;
extern __sfr  __at (SSP1MSK_ADDR)                 SSP1MSK;
extern __sfr  __at (SSPMSK_ADDR)                  SSPMSK;
extern __sfr  __at (SSP1STAT_ADDR)                SSP1STAT;
extern __sfr  __at (SSPSTAT_ADDR)                 SSPSTAT;
extern __sfr  __at (SSP1CON1_ADDR)                SSP1CON1;
extern __sfr  __at (SSPCON_ADDR)                  SSPCON;
extern __sfr  __at (SSPCON1_ADDR)                 SSPCON1;
extern __sfr  __at (SSP1CON2_ADDR)                SSP1CON2;
extern __sfr  __at (SSPCON2_ADDR)                 SSPCON2;
extern __sfr  __at (SSP1CON3_ADDR)                SSP1CON3;
extern __sfr  __at (SSPCON3_ADDR)                 SSPCON3;

//-----Bank5------------------
extern __sfr  __at (CCPR1L_ADDR)                  CCPR1L;
extern __sfr  __at (CCPR1H_ADDR)                  CCPR1H;
extern __sfr  __at (CCP1CON_ADDR)                 CCP1CON;
extern __sfr  __at (PWM1CON_ADDR)                 PWM1CON;
extern __sfr  __at (CCP1AS_ADDR)                  CCP1AS;
extern __sfr  __at (ECCP1AS_ADDR)                 ECCP1AS;
extern __sfr  __at (PSTR1CON_ADDR)                PSTR1CON;

//-----Bank7------------------
extern __sfr  __at (IOCAP_ADDR)                   IOCAP;
extern __sfr  __at (IOCAN_ADDR)                   IOCAN;
extern __sfr  __at (IOCAF_ADDR)                   IOCAF;
extern __sfr  __at (CLKRCON_ADDR)                 CLKRCON;
extern __sfr  __at (MDCON_ADDR)                   MDCON;
extern __sfr  __at (MDSRC_ADDR)                   MDSRC;
extern __sfr  __at (MDCARL_ADDR)                  MDCARL;
extern __sfr  __at (MDCARH_ADDR)                  MDCARH;

//-----Bank31------------------
extern __sfr  __at (STATUS_SHAD_ADDR)             STATUS_SHAD;
extern __sfr  __at (WREG_SHAD_ADDR)               WREG_SHAD;
extern __sfr  __at (BSR_SHAD_ADDR)                BSR_SHAD;
extern __sfr  __at (PCLATH_SHAD_ADDR)             PCLATH_SHAD;
extern __sfr  __at (FSR0L_SHAD_ADDR)              FSR0L_SHAD;
extern __sfr  __at (FSR0H_SHAD_ADDR)              FSR0H_SHAD;
extern __sfr  __at (FSR1L_SHAD_ADDR)              FSR1L_SHAD;
extern __sfr  __at (FSR1H_SHAD_ADDR)              FSR1H_SHAD;
extern __sfr  __at (STKPTR_ADDR)                  STKPTR;
extern __sfr  __at (TOSL_ADDR)                    TOSL;
extern __sfr  __at (TOSH_ADDR)                    TOSH;

//----- STATUS Bits -----------------------------------------------------


//----- BSR Bits -----------------------------------------------------



//----- INTCON Bits -----------------------------------------------------



//----- PORTA Bits -----------------------------------------------------











//----- PIR1 Bits -----------------------------------------------------


//----- PIR2 Bits -----------------------------------------------------


//----- T1CON Bits -----------------------------------------------------



//----- T1GCON Bits -----------------------------------------------------



//----- T2CON Bits -----------------------------------------------------



//----- CPSCON0 Bits -----------------------------------------------------



//----- CPSCON1 Bits -----------------------------------------------------



//----- TRISA Bits -----------------------------------------------------


//----- PIE1 Bits -----------------------------------------------------


//----- PIE2 Bits -----------------------------------------------------


//----- OPTION_REG Bits -----------------------------------------------------



//----- PCON Bits -----------------------------------------------------


//----- WDTCON Bits -----------------------------------------------------



//----- OSCTUNE Bits -----------------------------------------------------



//----- OSCCON Bits -----------------------------------------------------



//----- OSCSTAT Bits -----------------------------------------------------


//----- ADCON0 Bits -----------------------------------------------------





//----- ADCON1 Bits -----------------------------------------------------



//----- LATA Bits -----------------------------------------------------


//----- CM1CON0 Bits -----------------------------------------------------


//----- CM1CON1 Bits -----------------------------------------------------



//----- CMOUT Bits -----------------------------------------------------


//----- BORCON Bits -----------------------------------------------------


//----- FVRCON Bits -----------------------------------------------------



//----- DACCON0 Bits -----------------------------------------------------



//----- DACCON1 Bits -----------------------------------------------------



//----- SRCON0 Bits -----------------------------------------------------



//----- SRCON1 Bits -----------------------------------------------------


//----- APFCON Bits -----------------------------------------------------



//----- APFCON0 Bits -----------------------------------------------------



//----- ANSELA Bits -----------------------------------------------------



//----- EECON1 Bits -----------------------------------------------------


//----- RCSTA Bits -----------------------------------------------------


//----- TXSTA Bits -----------------------------------------------------


//----- BAUDCON Bits -----------------------------------------------------


//----- WPUA Bits -----------------------------------------------------



//----- SSP1STAT Bits -----------------------------------------------------


//----- SSPSTAT Bits -----------------------------------------------------


//----- SSP1CON1 Bits -----------------------------------------------------



//----- SSPCON Bits -----------------------------------------------------



//----- SSPCON1 Bits -----------------------------------------------------



//----- SSP1CON2 Bits -----------------------------------------------------


//----- SSPCON2 Bits -----------------------------------------------------


//----- SSP1CON3 Bits -----------------------------------------------------


//----- SSPCON3 Bits -----------------------------------------------------


//----- CCP1CON Bits -----------------------------------------------------



//----- PWM1CON Bits -----------------------------------------------------



//----- CCP1AS Bits -----------------------------------------------------



//----- ECCP1AS Bits -----------------------------------------------------



//----- PSTR1CON Bits -----------------------------------------------------


//----- IOCAP Bits -----------------------------------------------------



//----- IOCAN Bits -----------------------------------------------------



//----- IOCAF Bits -----------------------------------------------------



//----- CLKRCON Bits -----------------------------------------------------



//----- MDCON Bits -----------------------------------------------------


//----- MDSRC Bits -----------------------------------------------------



//----- MDCARL Bits -----------------------------------------------------



//----- MDCARH Bits -----------------------------------------------------



//----- STATUS_SHAD Bits -----------------------------------------------------



//==========================================================================
//
//       RAM Definitions
//
//==========================================================================
//        __MAXRAM  H'0FFF'
//        __BADRAM  H'000D'-H'0010'
//        __BADRAM  H'0013'-H'0014'
//        __BADRAM  H'001D'
//        __BADRAM  H'008D'-H'0090'
//        __BADRAM  H'0093'-H'0094'
//        __BADRAM  H'009F'
//        __BADRAM  H'00C0'-H'00EF'
//        __BADRAM  H'010D'-H'0110'
//        __BADRAM  H'0113'-H'0114'
//        __BADRAM  H'011C'
//        __BADRAM  H'011E'-H'011F'
//        __BADRAM  H'0120'-H'016F'
//        __BADRAM  H'018D'-H'0190'
//        __BADRAM  H'0197'-H'0198'
//        __BADRAM  H'01A0'-H'01EF'
//        __BADRAM  H'020D'-H'0210'
//        __BADRAM  H'0218'-H'021F'
//        __BADRAM  H'0220'-H'026F'
//        __BADRAM  H'028C'-H'0290'
//        __BADRAM  H'0297'-H'029F'
//        __BADRAM  H'02A0'-H'02EF'
//        __BADRAM  H'030C'-H'031F'
//        __BADRAM  H'0320'-H'036F'
//        __BADRAM  H'038C'-H'0390'
//        __BADRAM  H'0394'-H'0399'
//        __BADRAM  H'039B'
//        __BADRAM  H'03A0'-H'03EF'
//        __BADRAM  H'040C'-H'041F'
//        __BADRAM  H'0420'-H'046F'
//        __BADRAM  H'048C'-H'049F'
//        __BADRAM  H'04A0'-H'04EF'
//        __BADRAM  H'050C'-H'051F'
//        __BADRAM  H'0520'-H'056F'
//        __BADRAM  H'058C'-H'059F'
//        __BADRAM  H'05A0'-H'05EF'
//        __BADRAM  H'060C'-H'061F'
//        __BADRAM  H'0620'-H'066F'
//        __BADRAM  H'068C'-H'069F'
//        __BADRAM  H'06A0'-H'06EF'
//        __BADRAM  H'070C'-H'071F'
//        __BADRAM  H'0720'-H'076F'
//        __BADRAM  H'078C'-H'079F'
//        __BADRAM  H'07A0'-H'07EF'
//        __BADRAM  H'080C'-H'081F'
//        __BADRAM  H'0820'-H'086F'
//        __BADRAM  H'088C'-H'089F'
//        __BADRAM  H'08A0'-H'08EF'
//        __BADRAM  H'090C'-H'091F'
//        __BADRAM  H'0920'-H'096F'
//        __BADRAM  H'098C'-H'099F'
//        __BADRAM  H'09A0'-H'09EF'
//        __BADRAM  H'0A0C'-H'0A1F'
//        __BADRAM  H'0A20'-H'0A6F'
//        __BADRAM  H'0A8C'-H'0A9F'
//        __BADRAM  H'0AA0'-H'0AEF'
//        __BADRAM  H'0B0C'-H'0B1F'
//        __BADRAM  H'0B20'-H'0B6F'
//        __BADRAM  H'0B8C'-H'0B9F'
//        __BADRAM  H'0BA0'-H'0BEF'
//        __BADRAM  H'0C0C'-H'0C1F'
//        __BADRAM  H'0C20'-H'0C6F'
//        __BADRAM  H'0C8C'-H'0C9F'
//        __BADRAM  H'0CA0'-H'0CEF'
//        __BADRAM  H'0D0C'-H'0D1F'
//        __BADRAM  H'0D20'-H'0D6F'
//        __BADRAM  H'0D8C'-H'0D9F'
//        __BADRAM  H'0DA0'-H'0DEF'
//        __BADRAM  H'0E0C'-H'0E1F'
//        __BADRAM  H'0E20'-H'0E6F'
//        __BADRAM  H'0E8C'-H'0E9F'
//        __BADRAM  H'0EA0'-H'0EEF'
//        __BADRAM  H'0F0C'-H'0F1F'
//        __BADRAM  H'0F20'-H'0F6F'
//        __BADRAM  H'0F8C'-H'0FE3'
//        __BADRAM  H'0FEC'

//==========================================================================
//
//       Configuration Bits
//
//   NAME            Address
//   CONFIG1           8007h
//   CONFIG2           8008h
//
//==========================================================================

// The following is an assignment of address values for all of the
// configuration registers for the purpose of table reads
#define _CONFIG1             0x8007
#define _CONFIG2             0x8008

//----- CONFIG1 Options --------------------------------------------------
#define _FOSC_LP             0xFFF8    // LP Oscillator, Low-power crystal connected between OSC1 and OSC2 pins
#define _FOSC_XT             0xFFF9    // XT Oscillator, Crystal/resonator connected between OSC1 and OSC2 pins
#define _FOSC_HS             0xFFFA    // HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2 pins
#define _FOSC_EXTRC          0xFFFB    // EXTRC oscillator: External RC circuit connected to CLKIN pin
#define _FOSC_INTOSC         0xFFFC    // INTOSC oscillator: I/O function on CLKIN pin
#define _FOSC_ECL            0xFFFD    // ECL, External Clock, Low Power Mode (0-0.5 MHz): device clock supplied to CLKIN pin
#define _FOSC_ECM            0xFFFE    // ECM, External Clock, Medium Power Mode (0.5-4 MHz): device clock supplied to CLKIN pin
#define _FOSC_ECH            0xFFFF    // ECH, External Clock, High Power Mode (4-32 MHz): device clock supplied to CLKIN pin

#define _WDTE_OFF            0xFFE7    // WDT disabled
#define _WDTE_SWDTEN         0xFFEF    // WDT controlled by the SWDTEN bit in the WDTCON register
#define _WDTE_NSLEEP         0xFFF7    // WDT enabled while running and disabled in Sleep
#define _WDTE_ON             0xFFFF    // WDT enabled

#define _PWRTE_ON            0xFFDF    // PWRT enabled
#define _PWRTE_OFF           0xFFFF    // PWRT disabled

#define _MCLRE_OFF           0xFFBF    // MCLR/VPP pin function is digital input
#define _MCLRE_ON            0xFFFF    // MCLR/VPP pin function is MCLR

#define _CP_ON               0xFF7F    // Program memory code protection is enabled
#define _CP_OFF              0xFFFF    // Program memory code protection is disabled

#define _CPD_ON              0xFEFF    // Data memory code protection is enabled
#define _CPD_OFF             0xFFFF    // Data memory code protection is disabled

#define _BOREN_OFF           0xF9FF    // Brown-out Reset disabled
#define _BOREN_SBODEN        0xFBFF    // Brown-out Reset controlled by the SBOREN bit in the BORCON register
#define _BOREN_NSLEEP        0xFDFF    // Brown-out Reset enabled while running and disabled in Sleep
#define _BOREN_ON            0xFFFF    // Brown-out Reset enabled

#define _CLKOUTEN_ON         0xF7FF    // CLKOUT function is enabled on the CLKOUT pin
#define _CLKOUTEN_OFF        0xFFFF    // CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin

#define _IESO_OFF            0xEFFF    // Internal/External Switchover mode is disabled
#define _IESO_ON             0xFFFF    // Internal/External Switchover mode is enabled

#define _FCMEN_OFF           0xDFFF    // Fail-Safe Clock Monitor is disabled
#define _FCMEN_ON            0xFFFF    // Fail-Safe Clock Monitor is enabled

//----- CONFIG2 Options --------------------------------------------------
#define _WRT_ALL             0xFFFC    // 000h to 7FFh write protected, no addresses may be modified by EECON control
#define _WRT_HALF            0xFFFD    // 000h to 3FFh write protected, 400h to 7FFh may be modified by EECON control
#define _WRT_BOOT            0xFFFE    // 000h to 1FFh write protected, 200h to 7FFh may be modified by EECON control
#define _WRT_OFF             0xFFFF    // Write protection off

#define _PLLEN_OFF           0xFEFF    // 4x PLL disabled
#define _PLLEN_ON            0xFFFF    // 4x PLL enabled

#define _STVREN_OFF          0xFDFF    // Stack Overflow or Underflow will not cause a Reset
#define _STVREN_ON           0xFFFF    // Stack Overflow or Underflow will cause a Reset

#define _BORV_25             0xFBFF    // Brown-out Reset Voltage (VBOR) set to 2.5 V
#define _BORV_19             0xFFFF    // Brown-out Reset Voltage (VBOR) set to 1.9 V

#define _LVP_OFF             0xDFFF    // High-voltage on MCLR/VPP must be used for programming
#define _LVP_ON              0xFFFF    // Low-voltage programming enabled

//----- DEVID Equates --------------------------------------------------
#define _DEVID1              0x8006

//----- IDLOC Equates --------------------------------------------------
#define _IDLOC0              0x8000
#define _IDLOC1              0x8001
#define _IDLOC2              0x8002
#define _IDLOC3              0x8003

//         LIST

// ----- ADCON0 bits --------------------
typedef union {
  struct {
    unsigned char ADON:1;
    unsigned char GO_NOT_DONE:1;
    unsigned char CHS0:1;
    unsigned char CHS1:1;
    unsigned char CHS2:1;
    unsigned char CHS3:1;
    unsigned char CHS4:1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char ADGO:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char GO:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char NOT_DONE:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __ADCON0_bits_t;
extern volatile __ADCON0_bits_t __at(ADCON0_ADDR) ADCON0_bits;

#ifndef NO_BIT_DEFINES
#define ADON                 ADCON0_bits.ADON
#define GO_NOT_DONE          ADCON0_bits.GO_NOT_DONE
#define ADGO                 ADCON0_bits.ADGO
#define GO                   ADCON0_bits.GO
#define NOT_DONE             ADCON0_bits.NOT_DONE
#define CHS0                 ADCON0_bits.CHS0
#define CHS1                 ADCON0_bits.CHS1
#define CHS2                 ADCON0_bits.CHS2
#define CHS3                 ADCON0_bits.CHS3
#define CHS4                 ADCON0_bits.CHS4
#endif /* NO_BIT_DEFINES */

// ----- ADCON1 bits --------------------
typedef union {
  struct {
    unsigned char ADPREF0:1;
    unsigned char ADPREF1:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char ADCS0:1;
    unsigned char ADCS1:1;
    unsigned char ADCS2:1;
    unsigned char ADFM:1;
  };
} __ADCON1_bits_t;
extern volatile __ADCON1_bits_t __at(ADCON1_ADDR) ADCON1_bits;

#ifndef NO_BIT_DEFINES
#define ADPREF0              ADCON1_bits.ADPREF0
#define ADPREF1              ADCON1_bits.ADPREF1
#define ADCS0                ADCON1_bits.ADCS0
#define ADCS1                ADCON1_bits.ADCS1
#define ADCS2                ADCON1_bits.ADCS2
#define ADFM                 ADCON1_bits.ADFM
#endif /* NO_BIT_DEFINES */

// ----- ANSELA bits --------------------
typedef union {
  struct {
    unsigned char ANSA0:1;
    unsigned char ANSA1:1;
    unsigned char ANSA2:1;
    unsigned char :1;
    unsigned char ANSA4:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __ANSELA_bits_t;
extern volatile __ANSELA_bits_t __at(ANSELA_ADDR) ANSELA_bits;

#ifndef NO_BIT_DEFINES
#define ANSA0                ANSELA_bits.ANSA0
#define ANSA1                ANSELA_bits.ANSA1
#define ANSA2                ANSELA_bits.ANSA2
#define ANSA4                ANSELA_bits.ANSA4
#endif /* NO_BIT_DEFINES */

// ----- APFCON bits --------------------
typedef union {
  struct {
    unsigned char CCP1SEL:1;
    unsigned char P1BSEL:1;
    unsigned char TXCKSEL:1;
    unsigned char T1GSEL:1;
    unsigned char :1;
    unsigned char SSSEL:1;
    unsigned char SDOSEL:1;
    unsigned char RXDTSEL:1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char SS1SEL:1;
    unsigned char SDO1SEL:1;
    unsigned char :1;
  };
} __APFCON_bits_t;
extern volatile __APFCON_bits_t __at(APFCON_ADDR) APFCON_bits;

// ----- APFCON0 bits --------------------
typedef union {
  struct {
    unsigned char CCP1SEL:1;
    unsigned char P1BSEL:1;
    unsigned char TXCKSEL:1;
    unsigned char T1GSEL:1;
    unsigned char :1;
    unsigned char SSSEL:1;
    unsigned char SDOSEL:1;
    unsigned char RXDTSEL:1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char SS1SEL:1;
    unsigned char SDO1SEL:1;
    unsigned char :1;
  };
} __APFCON0_bits_t;
extern volatile __APFCON0_bits_t __at(APFCON0_ADDR) APFCON0_bits;

#ifndef NO_BIT_DEFINES
#define CCP1SEL              APFCON0_bits.CCP1SEL
#define P1BSEL               APFCON0_bits.P1BSEL
#define TXCKSEL              APFCON0_bits.TXCKSEL
#define T1GSEL               APFCON0_bits.T1GSEL
#define SSSEL                APFCON0_bits.SSSEL
#define SS1SEL               APFCON0_bits.SS1SEL
#define SDOSEL               APFCON0_bits.SDOSEL
#define SDO1SEL              APFCON0_bits.SDO1SEL
#define RXDTSEL              APFCON0_bits.RXDTSEL
#endif /* NO_BIT_DEFINES */

// ----- BAUDCON bits --------------------
typedef union {
  struct {
    unsigned char ABDEN:1;
    unsigned char WUE:1;
    unsigned char :1;
    unsigned char BRG16:1;
    unsigned char SCKP:1;
    unsigned char :1;
    unsigned char RCIDL:1;
    unsigned char ABDOVF:1;
  };
} __BAUDCON_bits_t;
extern volatile __BAUDCON_bits_t __at(BAUDCON_ADDR) BAUDCON_bits;

#ifndef NO_BIT_DEFINES
#define ABDEN                BAUDCON_bits.ABDEN
#define WUE                  BAUDCON_bits.WUE
#define BRG16                BAUDCON_bits.BRG16
#define SCKP                 BAUDCON_bits.SCKP
#define RCIDL                BAUDCON_bits.RCIDL
#define ABDOVF               BAUDCON_bits.ABDOVF
#endif /* NO_BIT_DEFINES */

// ----- BORCON bits --------------------
typedef union {
  struct {
    unsigned char BORRDY:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char SBOREN:1;
  };
} __BORCON_bits_t;
extern volatile __BORCON_bits_t __at(BORCON_ADDR) BORCON_bits;

#ifndef NO_BIT_DEFINES
#define BORRDY               BORCON_bits.BORRDY
#define SBOREN               BORCON_bits.SBOREN
#endif /* NO_BIT_DEFINES */

// ----- BSR bits --------------------
typedef union {
  struct {
    unsigned char BSR0:1;
    unsigned char BSR1:1;
    unsigned char BSR2:1;
    unsigned char BSR3:1;
    unsigned char BSR4:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __BSR_bits_t;
extern volatile __BSR_bits_t __at(BSR_ADDR) BSR_bits;

#ifndef NO_BIT_DEFINES
#define BSR0                 BSR_bits.BSR0
#define BSR1                 BSR_bits.BSR1
#define BSR2                 BSR_bits.BSR2
#define BSR3                 BSR_bits.BSR3
#define BSR4                 BSR_bits.BSR4
#endif /* NO_BIT_DEFINES */

// ----- CCP1AS bits --------------------
typedef union {
  struct {
    unsigned char PSS1BD0:1;
    unsigned char PSS1BD1:1;
    unsigned char PSS1AC0:1;
    unsigned char PSS1AC1:1;
    unsigned char CCP1AS0:1;
    unsigned char CCP1AS1:1;
    unsigned char CCP1AS2:1;
    unsigned char CCP1ASE:1;
  };
} __CCP1AS_bits_t;
extern volatile __CCP1AS_bits_t __at(CCP1AS_ADDR) CCP1AS_bits;

// ----- CCP1CON bits --------------------
typedef union {
  struct {
    unsigned char CCP1M0:1;
    unsigned char CCP1M1:1;
    unsigned char CCP1M2:1;
    unsigned char CCP1M3:1;
    unsigned char DC1B0:1;
    unsigned char DC1B1:1;
    unsigned char P1M0:1;
    unsigned char P1M1:1;
  };
} __CCP1CON_bits_t;
extern volatile __CCP1CON_bits_t __at(CCP1CON_ADDR) CCP1CON_bits;

#ifndef NO_BIT_DEFINES
#define CCP1M0               CCP1CON_bits.CCP1M0
#define CCP1M1               CCP1CON_bits.CCP1M1
#define CCP1M2               CCP1CON_bits.CCP1M2
#define CCP1M3               CCP1CON_bits.CCP1M3
#define DC1B0                CCP1CON_bits.DC1B0
#define DC1B1                CCP1CON_bits.DC1B1
#define P1M0                 CCP1CON_bits.P1M0
#define P1M1                 CCP1CON_bits.P1M1
#endif /* NO_BIT_DEFINES */

// ----- CLKRCON bits --------------------
typedef union {
  struct {
    unsigned char CLKRDIV0:1;
    unsigned char CLKRDIV1:1;
    unsigned char CLKRDIV2:1;
    unsigned char CLKRDC0:1;
    unsigned char CLKRDC1:1;
    unsigned char CLKRSLR:1;
    unsigned char CLKROE:1;
    unsigned char CLKREN:1;
  };
} __CLKRCON_bits_t;
extern volatile __CLKRCON_bits_t __at(CLKRCON_ADDR) CLKRCON_bits;

#ifndef NO_BIT_DEFINES
#define CLKRDIV0             CLKRCON_bits.CLKRDIV0
#define CLKRDIV1             CLKRCON_bits.CLKRDIV1
#define CLKRDIV2             CLKRCON_bits.CLKRDIV2
#define CLKRDC0              CLKRCON_bits.CLKRDC0
#define CLKRDC1              CLKRCON_bits.CLKRDC1
#define CLKRSLR              CLKRCON_bits.CLKRSLR
#define CLKROE               CLKRCON_bits.CLKROE
#define CLKREN               CLKRCON_bits.CLKREN
#endif /* NO_BIT_DEFINES */

// ----- CM1CON0 bits --------------------
typedef union {
  struct {
    unsigned char C1SYNC:1;
    unsigned char C1HYS:1;
    unsigned char C1SP:1;
    unsigned char :1;
    unsigned char C1POL:1;
    unsigned char C1OE:1;
    unsigned char C1OUT_CM1CON0:1;
    unsigned char C1ON:1;
  };
} __CM1CON0_bits_t;
extern volatile __CM1CON0_bits_t __at(CM1CON0_ADDR) CM1CON0_bits;

#ifndef NO_BIT_DEFINES
#define C1SYNC               CM1CON0_bits.C1SYNC
#define C1HYS                CM1CON0_bits.C1HYS
#define C1SP                 CM1CON0_bits.C1SP
#define C1POL                CM1CON0_bits.C1POL
#define C1OE                 CM1CON0_bits.C1OE
#define C1OUT_CM1CON0        CM1CON0_bits.C1OUT_CM1CON0
#define C1ON                 CM1CON0_bits.C1ON
#endif /* NO_BIT_DEFINES */

// ----- CM1CON1 bits --------------------
typedef union {
  struct {
    unsigned char C1NCH0:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char C1PCH0:1;
    unsigned char C1PCH1:1;
    unsigned char C1INTN:1;
    unsigned char C1INTP:1;
  };
} __CM1CON1_bits_t;
extern volatile __CM1CON1_bits_t __at(CM1CON1_ADDR) CM1CON1_bits;

#ifndef NO_BIT_DEFINES
#define C1NCH0               CM1CON1_bits.C1NCH0
#define C1PCH0               CM1CON1_bits.C1PCH0
#define C1PCH1               CM1CON1_bits.C1PCH1
#define C1INTN               CM1CON1_bits.C1INTN
#define C1INTP               CM1CON1_bits.C1INTP
#endif /* NO_BIT_DEFINES */

// ----- CMOUT bits --------------------
typedef union {
  struct {
    unsigned char MC1OUT:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __CMOUT_bits_t;
extern volatile __CMOUT_bits_t __at(CMOUT_ADDR) CMOUT_bits;

#ifndef NO_BIT_DEFINES
#define MC1OUT               CMOUT_bits.MC1OUT
#endif /* NO_BIT_DEFINES */

// ----- CPSCON0 bits --------------------
typedef union {
  struct {
    unsigned char T0XCS:1;
    unsigned char CPSOUT:1;
    unsigned char CPSRNG0:1;
    unsigned char CPSRNG1:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char CPSRM:1;
    unsigned char CPSON:1;
  };
} __CPSCON0_bits_t;
extern volatile __CPSCON0_bits_t __at(CPSCON0_ADDR) CPSCON0_bits;

#ifndef NO_BIT_DEFINES
#define T0XCS                CPSCON0_bits.T0XCS
#define CPSOUT               CPSCON0_bits.CPSOUT
#define CPSRNG0              CPSCON0_bits.CPSRNG0
#define CPSRNG1              CPSCON0_bits.CPSRNG1
#define CPSRM                CPSCON0_bits.CPSRM
#define CPSON                CPSCON0_bits.CPSON
#endif /* NO_BIT_DEFINES */

// ----- CPSCON1 bits --------------------
typedef union {
  struct {
    unsigned char CPSCH0:1;
    unsigned char CPSCH1:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __CPSCON1_bits_t;
extern volatile __CPSCON1_bits_t __at(CPSCON1_ADDR) CPSCON1_bits;

#ifndef NO_BIT_DEFINES
#define CPSCH0               CPSCON1_bits.CPSCH0
#define CPSCH1               CPSCON1_bits.CPSCH1
#endif /* NO_BIT_DEFINES */

// ----- DACCON0 bits --------------------
typedef union {
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char DACPSS0:1;
    unsigned char DACPSS1:1;
    unsigned char :1;
    unsigned char DACOE:1;
    unsigned char DACLPS:1;
    unsigned char DACEN:1;
  };
} __DACCON0_bits_t;
extern volatile __DACCON0_bits_t __at(DACCON0_ADDR) DACCON0_bits;

#ifndef NO_BIT_DEFINES
#define DACPSS0              DACCON0_bits.DACPSS0
#define DACPSS1              DACCON0_bits.DACPSS1
#define DACOE                DACCON0_bits.DACOE
#define DACLPS               DACCON0_bits.DACLPS
#define DACEN                DACCON0_bits.DACEN
#endif /* NO_BIT_DEFINES */

// ----- DACCON1 bits --------------------
typedef union {
  struct {
    unsigned char DACR0:1;
    unsigned char DACR1:1;
    unsigned char DACR2:1;
    unsigned char DACR3:1;
    unsigned char DACR4:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __DACCON1_bits_t;
extern volatile __DACCON1_bits_t __at(DACCON1_ADDR) DACCON1_bits;

#ifndef NO_BIT_DEFINES
#define DACR0                DACCON1_bits.DACR0
#define DACR1                DACCON1_bits.DACR1
#define DACR2                DACCON1_bits.DACR2
#define DACR3                DACCON1_bits.DACR3
#define DACR4                DACCON1_bits.DACR4
#endif /* NO_BIT_DEFINES */

// ----- ECCP1AS bits --------------------
typedef union {
  struct {
    unsigned char PSS1BD0:1;
    unsigned char PSS1BD1:1;
    unsigned char PSS1AC0:1;
    unsigned char PSS1AC1:1;
    unsigned char CCP1AS0:1;
    unsigned char CCP1AS1:1;
    unsigned char CCP1AS2:1;
    unsigned char CCP1ASE:1;
  };
} __ECCP1AS_bits_t;
extern volatile __ECCP1AS_bits_t __at(ECCP1AS_ADDR) ECCP1AS_bits;

#ifndef NO_BIT_DEFINES
#define PSS1BD0              ECCP1AS_bits.PSS1BD0
#define PSS1BD1              ECCP1AS_bits.PSS1BD1
#define PSS1AC0              ECCP1AS_bits.PSS1AC0
#define PSS1AC1              ECCP1AS_bits.PSS1AC1
#define CCP1AS0              ECCP1AS_bits.CCP1AS0
#define CCP1AS1              ECCP1AS_bits.CCP1AS1
#define CCP1AS2              ECCP1AS_bits.CCP1AS2
#define CCP1ASE              ECCP1AS_bits.CCP1ASE
#endif /* NO_BIT_DEFINES */


// ----- EECON1 bits --------------------
typedef union {
  struct {
    unsigned char RD:1;
    unsigned char WR:1;
    unsigned char WREN:1;
    unsigned char WRERR:1;
    unsigned char FREE:1;
    unsigned char LWLO:1;
    unsigned char CFGS:1;
    unsigned char EEPGD:1;
  };
} __EECON1_bits_t;
extern volatile __EECON1_bits_t __at(EECON1_ADDR) EECON1_bits;

#ifndef NO_BIT_DEFINES
#define RD                   EECON1_bits.RD
#define WR                   EECON1_bits.WR
#define WREN                 EECON1_bits.WREN
#define WRERR                EECON1_bits.WRERR
#define FREE                 EECON1_bits.FREE
#define LWLO                 EECON1_bits.LWLO
#define CFGS                 EECON1_bits.CFGS
#define EEPGD                EECON1_bits.EEPGD
#endif /* NO_BIT_DEFINES */

// ----- FVRCON bits --------------------
typedef union {
  struct {
    unsigned char ADFVR0:1;
    unsigned char ADFVR1:1;
    unsigned char CDAFVR0:1;
    unsigned char CDAFVR1:1;
    unsigned char TSRNG:1;
    unsigned char TSEN:1;
    unsigned char FVRRDY:1;
    unsigned char FVREN:1;
  };
} __FVRCON_bits_t;
extern volatile __FVRCON_bits_t __at(FVRCON_ADDR) FVRCON_bits;

#ifndef NO_BIT_DEFINES
#define ADFVR0               FVRCON_bits.ADFVR0
#define ADFVR1               FVRCON_bits.ADFVR1
#define CDAFVR0              FVRCON_bits.CDAFVR0
#define CDAFVR1              FVRCON_bits.CDAFVR1
#define TSRNG                FVRCON_bits.TSRNG
#define TSEN                 FVRCON_bits.TSEN
#define FVRRDY               FVRCON_bits.FVRRDY
#define FVREN                FVRCON_bits.FVREN
#endif /* NO_BIT_DEFINES */

// ----- INTCON bits --------------------
typedef union {
  struct {
    unsigned char IOCIF:1;
    unsigned char INTF:1;
    unsigned char TMR0IF:1;
    unsigned char IOCIE:1;
    unsigned char INTE:1;
    unsigned char TMR0IE:1;
    unsigned char PEIE:1;
    unsigned char GIE:1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char T0IF:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char T0IE:1;
    unsigned char :1;
    unsigned char :1;
  };
} __INTCON_bits_t;
extern volatile __INTCON_bits_t __at(INTCON_ADDR) INTCON_bits;

#ifndef NO_BIT_DEFINES
#define IOCIF                INTCON_bits.IOCIF
#define INTF                 INTCON_bits.INTF
#define TMR0IF               INTCON_bits.TMR0IF
#define T0IF                 INTCON_bits.T0IF
#define IOCIE                INTCON_bits.IOCIE
#define INTE                 INTCON_bits.INTE
#define TMR0IE               INTCON_bits.TMR0IE
#define T0IE                 INTCON_bits.T0IE
#define PEIE                 INTCON_bits.PEIE
#define GIE                  INTCON_bits.GIE
#endif /* NO_BIT_DEFINES */

// ----- IOCAF bits --------------------
typedef union {
  struct {
    unsigned char IOCAF0:1;
    unsigned char IOCAF1:1;
    unsigned char IOCAF2:1;
    unsigned char IOCAF3:1;
    unsigned char IOCAF4:1;
    unsigned char IOCAF5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __IOCAF_bits_t;
extern volatile __IOCAF_bits_t __at(IOCAF_ADDR) IOCAF_bits;

#ifndef NO_BIT_DEFINES
#define IOCAF0               IOCAF_bits.IOCAF0
#define IOCAF1               IOCAF_bits.IOCAF1
#define IOCAF2               IOCAF_bits.IOCAF2
#define IOCAF3               IOCAF_bits.IOCAF3
#define IOCAF4               IOCAF_bits.IOCAF4
#define IOCAF5               IOCAF_bits.IOCAF5
#endif /* NO_BIT_DEFINES */

// ----- IOCAN bits --------------------
typedef union {
  struct {
    unsigned char IOCAN0:1;
    unsigned char IOCAN1:1;
    unsigned char IOCAN2:1;
    unsigned char IOCAN3:1;
    unsigned char IOCAN4:1;
    unsigned char IOCAN5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __IOCAN_bits_t;
extern volatile __IOCAN_bits_t __at(IOCAN_ADDR) IOCAN_bits;

#ifndef NO_BIT_DEFINES
#define IOCAN0               IOCAN_bits.IOCAN0
#define IOCAN1               IOCAN_bits.IOCAN1
#define IOCAN2               IOCAN_bits.IOCAN2
#define IOCAN3               IOCAN_bits.IOCAN3
#define IOCAN4               IOCAN_bits.IOCAN4
#define IOCAN5               IOCAN_bits.IOCAN5
#endif /* NO_BIT_DEFINES */

// ----- IOCAP bits --------------------
typedef union {
  struct {
    unsigned char IOCAP0:1;
    unsigned char IOCAP1:1;
    unsigned char IOCAP2:1;
    unsigned char IOCAP3:1;
    unsigned char IOCAP4:1;
    unsigned char IOCAP5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __IOCAP_bits_t;
extern volatile __IOCAP_bits_t __at(IOCAP_ADDR) IOCAP_bits;

#ifndef NO_BIT_DEFINES
#define IOCAP0               IOCAP_bits.IOCAP0
#define IOCAP1               IOCAP_bits.IOCAP1
#define IOCAP2               IOCAP_bits.IOCAP2
#define IOCAP3               IOCAP_bits.IOCAP3
#define IOCAP4               IOCAP_bits.IOCAP4
#define IOCAP5               IOCAP_bits.IOCAP5
#endif /* NO_BIT_DEFINES */

// ----- LATA bits --------------------
typedef union {
  struct {
    unsigned char LATA0:1;
    unsigned char LATA1:1;
    unsigned char LATA2:1;
    unsigned char :1;
    unsigned char LATA4:1;
    unsigned char LATA5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __LATA_bits_t;
extern volatile __LATA_bits_t __at(LATA_ADDR) LATA_bits;

#ifndef NO_BIT_DEFINES
#define LATA0                LATA_bits.LATA0
#define LATA1                LATA_bits.LATA1
#define LATA2                LATA_bits.LATA2
#define LATA4                LATA_bits.LATA4
#define LATA5                LATA_bits.LATA5
#endif /* NO_BIT_DEFINES */

// ----- MDCARH bits --------------------
typedef union {
  struct {
    unsigned char MDCH0:1;
    unsigned char MDCH1:1;
    unsigned char MDCH2:1;
    unsigned char MDCH3:1;
    unsigned char :1;
    unsigned char MDCHSYNC:1;
    unsigned char MDCHPOL:1;
    unsigned char MDCHODIS:1;
  };
} __MDCARH_bits_t;
extern volatile __MDCARH_bits_t __at(MDCARH_ADDR) MDCARH_bits;

#ifndef NO_BIT_DEFINES
#define MDCH0                MDCARH_bits.MDCH0
#define MDCH1                MDCARH_bits.MDCH1
#define MDCH2                MDCARH_bits.MDCH2
#define MDCH3                MDCARH_bits.MDCH3
#define MDCHSYNC             MDCARH_bits.MDCHSYNC
#define MDCHPOL              MDCARH_bits.MDCHPOL
#define MDCHODIS             MDCARH_bits.MDCHODIS
#endif /* NO_BIT_DEFINES */

// ----- MDCARL bits --------------------
typedef union {
  struct {
    unsigned char MDCL0:1;
    unsigned char MDCL1:1;
    unsigned char MDCL2:1;
    unsigned char MDCL3:1;
    unsigned char :1;
    unsigned char MDCLSYNC:1;
    unsigned char MDCLPOL:1;
    unsigned char MDCLODIS:1;
  };
} __MDCARL_bits_t;
extern volatile __MDCARL_bits_t __at(MDCARL_ADDR) MDCARL_bits;

#ifndef NO_BIT_DEFINES
#define MDCL0                MDCARL_bits.MDCL0
#define MDCL1                MDCARL_bits.MDCL1
#define MDCL2                MDCARL_bits.MDCL2
#define MDCL3                MDCARL_bits.MDCL3
#define MDCLSYNC             MDCARL_bits.MDCLSYNC
#define MDCLPOL              MDCARL_bits.MDCLPOL
#define MDCLODIS             MDCARL_bits.MDCLODIS
#endif /* NO_BIT_DEFINES */

// ----- MDCON bits --------------------
typedef union {
  struct {
    unsigned char MDBIT:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char MDOUT_MDCON:1;
    unsigned char MDOPOL:1;
    unsigned char MDSLR:1;
    unsigned char MDOE:1;
    unsigned char MDEN:1;
  };
} __MDCON_bits_t;
extern volatile __MDCON_bits_t __at(MDCON_ADDR) MDCON_bits;

#ifndef NO_BIT_DEFINES
#define MDBIT                MDCON_bits.MDBIT
#define MDOUT_MDCON          MDCON_bits.MDOUT_MDCON
#define MDOPOL               MDCON_bits.MDOPOL
#define MDSLR                MDCON_bits.MDSLR
#define MDOE                 MDCON_bits.MDOE
#define MDEN                 MDCON_bits.MDEN
#endif /* NO_BIT_DEFINES */

// ----- MDSRC bits --------------------
typedef union {
  struct {
    unsigned char MDMS0:1;
    unsigned char MDMS1:1;
    unsigned char MDMS2:1;
    unsigned char MDMS3:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char MDMSODIS:1;
  };
} __MDSRC_bits_t;
extern volatile __MDSRC_bits_t __at(MDSRC_ADDR) MDSRC_bits;

#ifndef NO_BIT_DEFINES
#define MDMS0                MDSRC_bits.MDMS0
#define MDMS1                MDSRC_bits.MDMS1
#define MDMS2                MDSRC_bits.MDMS2
#define MDMS3                MDSRC_bits.MDMS3
#define MDMSODIS             MDSRC_bits.MDMSODIS
#endif /* NO_BIT_DEFINES */

// ----- OPTION_REG bits --------------------
typedef union {
  struct {
    unsigned char PS0:1;
    unsigned char PS1:1;
    unsigned char PS2:1;
    unsigned char PSA:1;
    unsigned char TMR0SE:1;
    unsigned char TMR0CS:1;
    unsigned char INTEDG:1;
    unsigned char NOT_WPUEN:1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char T0SE:1;
    unsigned char T0CS:1;
    unsigned char :1;
    unsigned char :1;
  };
} __OPTION_REG_bits_t;
extern volatile __OPTION_REG_bits_t __at(OPTION_REG_ADDR) OPTION_REG_bits;

#ifndef NO_BIT_DEFINES
#define PS0                  OPTION_REG_bits.PS0
#define PS1                  OPTION_REG_bits.PS1
#define PS2                  OPTION_REG_bits.PS2
#define PSA                  OPTION_REG_bits.PSA
#define TMR0SE               OPTION_REG_bits.TMR0SE
#define T0SE                 OPTION_REG_bits.T0SE
#define TMR0CS               OPTION_REG_bits.TMR0CS
#define T0CS                 OPTION_REG_bits.T0CS
#define INTEDG               OPTION_REG_bits.INTEDG
#define NOT_WPUEN            OPTION_REG_bits.NOT_WPUEN
#endif /* NO_BIT_DEFINES */

// ----- OSCCON bits --------------------
typedef union {
  struct {
    unsigned char SCS0:1;
    unsigned char SCS1:1;
    unsigned char :1;
    unsigned char IRCF0:1;
    unsigned char IRCF1:1;
    unsigned char IRCF2:1;
    unsigned char IRCF3:1;
    unsigned char SPLLEN:1;
  };
} __OSCCON_bits_t;
extern volatile __OSCCON_bits_t __at(OSCCON_ADDR) OSCCON_bits;

#ifndef NO_BIT_DEFINES
#define SCS0                 OSCCON_bits.SCS0
#define SCS1                 OSCCON_bits.SCS1
#define IRCF0                OSCCON_bits.IRCF0
#define IRCF1                OSCCON_bits.IRCF1
#define IRCF2                OSCCON_bits.IRCF2
#define IRCF3                OSCCON_bits.IRCF3
#define SPLLEN               OSCCON_bits.SPLLEN
#endif /* NO_BIT_DEFINES */

// ----- OSCSTAT bits --------------------
typedef union {
  struct {
    unsigned char HFIOFS:1;
    unsigned char LFIOFR:1;
    unsigned char MFIOFR:1;
    unsigned char HFIOFL:1;
    unsigned char HFIOFR:1;
    unsigned char OSTS:1;
    unsigned char PLLR:1;
    unsigned char T1OSCR:1;
  };
} __OSCSTAT_bits_t;
extern volatile __OSCSTAT_bits_t __at(OSCSTAT_ADDR) OSCSTAT_bits;

#ifndef NO_BIT_DEFINES
#define HFIOFS               OSCSTAT_bits.HFIOFS
#define LFIOFR               OSCSTAT_bits.LFIOFR
#define MFIOFR               OSCSTAT_bits.MFIOFR
#define HFIOFL               OSCSTAT_bits.HFIOFL
#define HFIOFR               OSCSTAT_bits.HFIOFR
#define OSTS                 OSCSTAT_bits.OSTS
#define PLLR                 OSCSTAT_bits.PLLR
#define T1OSCR               OSCSTAT_bits.T1OSCR
#endif /* NO_BIT_DEFINES */

// ----- OSCTUNE bits --------------------
typedef union {
  struct {
    unsigned char TUN0:1;
    unsigned char TUN1:1;
    unsigned char TUN2:1;
    unsigned char TUN3:1;
    unsigned char TUN4:1;
    unsigned char TUN5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __OSCTUNE_bits_t;
extern volatile __OSCTUNE_bits_t __at(OSCTUNE_ADDR) OSCTUNE_bits;

#ifndef NO_BIT_DEFINES
#define TUN0                 OSCTUNE_bits.TUN0
#define TUN1                 OSCTUNE_bits.TUN1
#define TUN2                 OSCTUNE_bits.TUN2
#define TUN3                 OSCTUNE_bits.TUN3
#define TUN4                 OSCTUNE_bits.TUN4
#define TUN5                 OSCTUNE_bits.TUN5
#endif /* NO_BIT_DEFINES */

// ----- PCON bits --------------------
typedef union {
  struct {
    unsigned char NOT_BOR:1;
    unsigned char NOT_POR:1;
    unsigned char NOT_RI:1;
    unsigned char NOT_RMCLR:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char STKUNF:1;
    unsigned char STKOVF:1;
  };
} __PCON_bits_t;
extern volatile __PCON_bits_t __at(PCON_ADDR) PCON_bits;

#ifndef NO_BIT_DEFINES
#define NOT_BOR              PCON_bits.NOT_BOR
#define NOT_POR              PCON_bits.NOT_POR
#define NOT_RI               PCON_bits.NOT_RI
#define NOT_RMCLR            PCON_bits.NOT_RMCLR
#define STKUNF               PCON_bits.STKUNF
#define STKOVF               PCON_bits.STKOVF
#endif /* NO_BIT_DEFINES */

// ----- PIE1 bits --------------------
typedef union {
  struct {
    unsigned char TMR1IE:1;
    unsigned char TMR2IE:1;
    unsigned char CCP1IE:1;
    unsigned char SSP1IE:1;
    unsigned char TXIE:1;
    unsigned char RCIE:1;
    unsigned char ADIE:1;
    unsigned char TMR1GIE:1;
  };
} __PIE1_bits_t;
extern volatile __PIE1_bits_t __at(PIE1_ADDR) PIE1_bits;

#ifndef NO_BIT_DEFINES
#define TMR1IE               PIE1_bits.TMR1IE
#define TMR2IE               PIE1_bits.TMR2IE
#define CCP1IE               PIE1_bits.CCP1IE
#define SSP1IE               PIE1_bits.SSP1IE
#define TXIE                 PIE1_bits.TXIE
#define RCIE                 PIE1_bits.RCIE
#define ADIE                 PIE1_bits.ADIE
#define TMR1GIE              PIE1_bits.TMR1GIE
#endif /* NO_BIT_DEFINES */

// ----- PIE2 bits --------------------
typedef union {
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char BCL1IE:1;
    unsigned char EEIE:1;
    unsigned char C1IE:1;
    unsigned char :1;
    unsigned char OSFIE:1;
  };
} __PIE2_bits_t;
extern volatile __PIE2_bits_t __at(PIE2_ADDR) PIE2_bits;

#ifndef NO_BIT_DEFINES
#define BCL1IE               PIE2_bits.BCL1IE
#define EEIE                 PIE2_bits.EEIE
#define C1IE                 PIE2_bits.C1IE
#define OSFIE                PIE2_bits.OSFIE
#endif /* NO_BIT_DEFINES */

// ----- PIR1 bits --------------------
typedef union {
  struct {
    unsigned char TMR1IF:1;
    unsigned char TMR2IF:1;
    unsigned char CCP1IF:1;
    unsigned char SSP1IF:1;
    unsigned char TXIF:1;
    unsigned char RCIF:1;
    unsigned char ADIF:1;
    unsigned char TMR1GIF:1;
  };
} __PIR1_bits_t;
extern volatile __PIR1_bits_t __at(PIR1_ADDR) PIR1_bits;

#ifndef NO_BIT_DEFINES
#define TMR1IF               PIR1_bits.TMR1IF
#define TMR2IF               PIR1_bits.TMR2IF
#define CCP1IF               PIR1_bits.CCP1IF
#define SSP1IF               PIR1_bits.SSP1IF
#define TXIF                 PIR1_bits.TXIF
#define RCIF                 PIR1_bits.RCIF
#define ADIF                 PIR1_bits.ADIF
#define TMR1GIF              PIR1_bits.TMR1GIF
#endif /* NO_BIT_DEFINES */

// ----- PIR2 bits --------------------
typedef union {
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char BCL1IF:1;
    unsigned char EEIF:1;
    unsigned char C1IF:1;
    unsigned char :1;
    unsigned char OSFIF:1;
  };
} __PIR2_bits_t;
extern volatile __PIR2_bits_t __at(PIR2_ADDR) PIR2_bits;

#ifndef NO_BIT_DEFINES
#define BCL1IF               PIR2_bits.BCL1IF
#define EEIF                 PIR2_bits.EEIF
#define C1IF                 PIR2_bits.C1IF
#define OSFIF                PIR2_bits.OSFIF
#endif /* NO_BIT_DEFINES */

// ----- PORTA bits --------------------
typedef union {
  struct {
    unsigned char RA0:1;
    unsigned char RA1:1;
    unsigned char RA2:1;
    unsigned char RA3:1;
    unsigned char RA4:1;
    unsigned char RA5:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char AN0:1;
    unsigned char AN1:1;
    unsigned char AN2:1;
    unsigned char NOT_MCLR:1;
    unsigned char AN3:1;
    unsigned char SRNQ:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char CPS0:1;
    unsigned char CPS1:1;
    unsigned char CPS2:1;
    unsigned char :1;
    unsigned char CPS3:1;
    unsigned char T1CKI:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char C1INP:1;
    unsigned char C1IN0N:1;
    unsigned char C1OUT_PORTA:1;
    unsigned char :1;
    unsigned char C1IN1N:1;
    unsigned char T1OSI:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char DACOUT:1;
    unsigned char SRI:1;
    unsigned char SRQ:1;
    unsigned char :1;
    unsigned char T1OSO:1;
    unsigned char OSC1:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char MDOUT_PORTA:1;
    unsigned char SCK:1;
    unsigned char T0CKI:1;
    unsigned char :1;
    unsigned char CLKR:1;
    unsigned char CLKIN:1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char SCL:1;
    unsigned char SDA:1;
    unsigned char :1;
    unsigned char MDCIN2:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char MDMIN:1;
    unsigned char MDCIN1:1;
    unsigned char :1;
    unsigned char OSC2:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char SDI:1;
    unsigned char :1;
    unsigned char CLKOUT:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char FLT0:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __PORTA_bits_t;
extern volatile __PORTA_bits_t __at(PORTA_ADDR) PORTA_bits;

#ifndef NO_BIT_DEFINES
#define RA0                  PORTA_bits.RA0
#define AN0                  PORTA_bits.AN0
#define CPS0                 PORTA_bits.CPS0
#define C1INP                PORTA_bits.C1INP
#define DACOUT               PORTA_bits.DACOUT
#define MDOUT_PORTA          PORTA_bits.MDOUT_PORTA
#define RA1                  PORTA_bits.RA1
#define AN1                  PORTA_bits.AN1
#define CPS1                 PORTA_bits.CPS1
#define C1IN0N               PORTA_bits.C1IN0N
#define SRI                  PORTA_bits.SRI
#define SCK                  PORTA_bits.SCK
#define SCL                  PORTA_bits.SCL
#define MDMIN                PORTA_bits.MDMIN
#define RA2                  PORTA_bits.RA2
#define AN2                  PORTA_bits.AN2
#define CPS2                 PORTA_bits.CPS2
#define C1OUT_PORTA          PORTA_bits.C1OUT_PORTA
#define SRQ                  PORTA_bits.SRQ
#define T0CKI                PORTA_bits.T0CKI
#define SDA                  PORTA_bits.SDA
#define MDCIN1               PORTA_bits.MDCIN1
#define SDI                  PORTA_bits.SDI
#define FLT0                 PORTA_bits.FLT0
#define RA3                  PORTA_bits.RA3
#define NOT_MCLR             PORTA_bits.NOT_MCLR
#define RA4                  PORTA_bits.RA4
#define AN3                  PORTA_bits.AN3
#define CPS3                 PORTA_bits.CPS3
#define C1IN1N               PORTA_bits.C1IN1N
#define T1OSO                PORTA_bits.T1OSO
#define CLKR                 PORTA_bits.CLKR
#define MDCIN2               PORTA_bits.MDCIN2
#define OSC2                 PORTA_bits.OSC2
#define CLKOUT               PORTA_bits.CLKOUT
#define RA5                  PORTA_bits.RA5
#define SRNQ                 PORTA_bits.SRNQ
#define T1CKI                PORTA_bits.T1CKI
#define T1OSI                PORTA_bits.T1OSI
#define OSC1                 PORTA_bits.OSC1
#define CLKIN                PORTA_bits.CLKIN
#endif /* NO_BIT_DEFINES */

// ----- PSTR1CON bits --------------------
typedef union {
  struct {
    unsigned char STR1A:1;
    unsigned char STR1B:1;
    unsigned char STR1C:1;
    unsigned char STR1D:1;
    unsigned char STR1SYNC:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __PSTR1CON_bits_t;
extern volatile __PSTR1CON_bits_t __at(PSTR1CON_ADDR) PSTR1CON_bits;

#ifndef NO_BIT_DEFINES
#define STR1A                PSTR1CON_bits.STR1A
#define STR1B                PSTR1CON_bits.STR1B
#define STR1C                PSTR1CON_bits.STR1C
#define STR1D                PSTR1CON_bits.STR1D
#define STR1SYNC             PSTR1CON_bits.STR1SYNC
#endif /* NO_BIT_DEFINES */

// ----- PWM1CON bits --------------------
typedef union {
  struct {
    unsigned char P1DC0:1;
    unsigned char P1DC1:1;
    unsigned char P1DC2:1;
    unsigned char P1DC3:1;
    unsigned char P1DC4:1;
    unsigned char P1DC5:1;
    unsigned char P1DC6:1;
    unsigned char P1RSEN:1;
  };
} __PWM1CON_bits_t;
extern volatile __PWM1CON_bits_t __at(PWM1CON_ADDR) PWM1CON_bits;

#ifndef NO_BIT_DEFINES
#define P1DC0                PWM1CON_bits.P1DC0
#define P1DC1                PWM1CON_bits.P1DC1
#define P1DC2                PWM1CON_bits.P1DC2
#define P1DC3                PWM1CON_bits.P1DC3
#define P1DC4                PWM1CON_bits.P1DC4
#define P1DC5                PWM1CON_bits.P1DC5
#define P1DC6                PWM1CON_bits.P1DC6
#define P1RSEN               PWM1CON_bits.P1RSEN
#endif /* NO_BIT_DEFINES */

// ----- RCSTA bits --------------------
typedef union {
  struct {
    unsigned char RX9D:1;
    unsigned char OERR:1;
    unsigned char FERR:1;
    unsigned char ADDEN:1;
    unsigned char CREN:1;
    unsigned char SREN:1;
    unsigned char RX9:1;
    unsigned char SPEN:1;
  };
} __RCSTA_bits_t;
extern volatile __RCSTA_bits_t __at(RCSTA_ADDR) RCSTA_bits;

#ifndef NO_BIT_DEFINES
#define RX9D                 RCSTA_bits.RX9D
#define OERR                 RCSTA_bits.OERR
#define FERR                 RCSTA_bits.FERR
#define ADDEN                RCSTA_bits.ADDEN
#define CREN                 RCSTA_bits.CREN
#define SREN                 RCSTA_bits.SREN
#define RX9                  RCSTA_bits.RX9
#define SPEN                 RCSTA_bits.SPEN
#endif /* NO_BIT_DEFINES */

// ----- SRCON0 bits --------------------
typedef union {
  struct {
    unsigned char SRPR:1;
    unsigned char SRPS:1;
    unsigned char SRNQEN:1;
    unsigned char SRQEN:1;
    unsigned char SRCLK0:1;
    unsigned char SRCLK1:1;
    unsigned char SRCLK2:1;
    unsigned char SRLEN:1;
  };
} __SRCON0_bits_t;
extern volatile __SRCON0_bits_t __at(SRCON0_ADDR) SRCON0_bits;

#ifndef NO_BIT_DEFINES
#define SRPR                 SRCON0_bits.SRPR
#define SRPS                 SRCON0_bits.SRPS
#define SRNQEN               SRCON0_bits.SRNQEN
#define SRQEN                SRCON0_bits.SRQEN
#define SRCLK0               SRCON0_bits.SRCLK0
#define SRCLK1               SRCON0_bits.SRCLK1
#define SRCLK2               SRCON0_bits.SRCLK2
#define SRLEN                SRCON0_bits.SRLEN
#endif /* NO_BIT_DEFINES */

// ----- SRCON1 bits --------------------
typedef union {
  struct {
    unsigned char SRRC1E:1;
    unsigned char :1;
    unsigned char SRRCKE:1;
    unsigned char SRRPE:1;
    unsigned char SRSC1E:1;
    unsigned char :1;
    unsigned char SRSCKE:1;
    unsigned char SRSPE:1;
  };
} __SRCON1_bits_t;
extern volatile __SRCON1_bits_t __at(SRCON1_ADDR) SRCON1_bits;

#ifndef NO_BIT_DEFINES
#define SRRC1E               SRCON1_bits.SRRC1E
#define SRRCKE               SRCON1_bits.SRRCKE
#define SRRPE                SRCON1_bits.SRRPE
#define SRSC1E               SRCON1_bits.SRSC1E
#define SRSCKE               SRCON1_bits.SRSCKE
#define SRSPE                SRCON1_bits.SRSPE
#endif /* NO_BIT_DEFINES */

// ----- SSP1CON1 bits --------------------
typedef union {
  struct {
    unsigned char SSPM0:1;
    unsigned char SSPM1:1;
    unsigned char SSPM2:1;
    unsigned char SSPM3:1;
    unsigned char CKP:1;
    unsigned char SSPEN:1;
    unsigned char SSPOV:1;
    unsigned char WCOL:1;
  };
} __SSP1CON1_bits_t;
extern volatile __SSP1CON1_bits_t __at(SSP1CON1_ADDR) SSP1CON1_bits;

// ----- SSP1CON2 bits --------------------
typedef union {
  struct {
    unsigned char SEN:1;
    unsigned char RSEN:1;
    unsigned char PEN:1;
    unsigned char RCEN:1;
    unsigned char ACKEN:1;
    unsigned char ACKDT:1;
    unsigned char ACKSTAT:1;
    unsigned char GCEN:1;
  };
} __SSP1CON2_bits_t;
extern volatile __SSP1CON2_bits_t __at(SSP1CON2_ADDR) SSP1CON2_bits;

// ----- SSP1CON3 bits --------------------
typedef union {
  struct {
    unsigned char DHEN:1;
    unsigned char AHEN:1;
    unsigned char SBCDE:1;
    unsigned char SDAHT:1;
    unsigned char BOEN:1;
    unsigned char SCIE:1;
    unsigned char PCIE:1;
    unsigned char ACKTIM:1;
  };
} __SSP1CON3_bits_t;
extern volatile __SSP1CON3_bits_t __at(SSP1CON3_ADDR) SSP1CON3_bits;

// ----- SSP1STAT bits --------------------
typedef union {
  struct {
    unsigned char BF:1;
    unsigned char UA:1;
    unsigned char R_NOT_W:1;
    unsigned char S:1;
    unsigned char P:1;
    unsigned char D_NOT_A:1;
    unsigned char CKE:1;
    unsigned char SMP:1;
  };
} __SSP1STAT_bits_t;
extern volatile __SSP1STAT_bits_t __at(SSP1STAT_ADDR) SSP1STAT_bits;

// ----- SSPCON bits --------------------
typedef union {
  struct {
    unsigned char SSPM0:1;
    unsigned char SSPM1:1;
    unsigned char SSPM2:1;
    unsigned char SSPM3:1;
    unsigned char CKP:1;
    unsigned char SSPEN:1;
    unsigned char SSPOV:1;
    unsigned char WCOL:1;
  };
} __SSPCON_bits_t;
extern volatile __SSPCON_bits_t __at(SSPCON_ADDR) SSPCON_bits;

// ----- SSPCON1 bits --------------------
typedef union {
  struct {
    unsigned char SSPM0:1;
    unsigned char SSPM1:1;
    unsigned char SSPM2:1;
    unsigned char SSPM3:1;
    unsigned char CKP:1;
    unsigned char SSPEN:1;
    unsigned char SSPOV:1;
    unsigned char WCOL:1;
  };
} __SSPCON1_bits_t;
extern volatile __SSPCON1_bits_t __at(SSPCON1_ADDR) SSPCON1_bits;

#ifndef NO_BIT_DEFINES
#define SSPM0                SSPCON1_bits.SSPM0
#define SSPM1                SSPCON1_bits.SSPM1
#define SSPM2                SSPCON1_bits.SSPM2
#define SSPM3                SSPCON1_bits.SSPM3
#define CKP                  SSPCON1_bits.CKP
#define SSPEN                SSPCON1_bits.SSPEN
#define SSPOV                SSPCON1_bits.SSPOV
#define WCOL                 SSPCON1_bits.WCOL
#endif /* NO_BIT_DEFINES */


// ----- SSPCON2 bits --------------------
typedef union {
  struct {
    unsigned char SEN:1;
    unsigned char RSEN:1;
    unsigned char PEN:1;
    unsigned char RCEN:1;
    unsigned char ACKEN:1;
    unsigned char ACKDT:1;
    unsigned char ACKSTAT:1;
    unsigned char GCEN:1;
  };
} __SSPCON2_bits_t;
extern volatile __SSPCON2_bits_t __at(SSPCON2_ADDR) SSPCON2_bits;

#ifndef NO_BIT_DEFINES
#define SEN                  SSPCON2_bits.SEN
#define RSEN                 SSPCON2_bits.RSEN
#define PEN                  SSPCON2_bits.PEN
#define RCEN                 SSPCON2_bits.RCEN
#define ACKEN                SSPCON2_bits.ACKEN
#define ACKDT                SSPCON2_bits.ACKDT
#define ACKSTAT              SSPCON2_bits.ACKSTAT
#define GCEN                 SSPCON2_bits.GCEN
#endif /* NO_BIT_DEFINES */


// ----- SSPCON3 bits --------------------
typedef union {
  struct {
    unsigned char DHEN:1;
    unsigned char AHEN:1;
    unsigned char SBCDE:1;
    unsigned char SDAHT:1;
    unsigned char BOEN:1;
    unsigned char SCIE:1;
    unsigned char PCIE:1;
    unsigned char ACKTIM:1;
  };
} __SSPCON3_bits_t;
extern volatile __SSPCON3_bits_t __at(SSPCON3_ADDR) SSPCON3_bits;

#ifndef NO_BIT_DEFINES
#define DHEN                 SSPCON3_bits.DHEN
#define AHEN                 SSPCON3_bits.AHEN
#define SBCDE                SSPCON3_bits.SBCDE
#define SDAHT                SSPCON3_bits.SDAHT
#define BOEN                 SSPCON3_bits.BOEN
#define SCIE                 SSPCON3_bits.SCIE
#define PCIE                 SSPCON3_bits.PCIE
#define ACKTIM               SSPCON3_bits.ACKTIM
#endif /* NO_BIT_DEFINES */

// ----- SSPSTAT bits --------------------
typedef union {
  struct {
    unsigned char BF:1;
    unsigned char UA:1;
    unsigned char R_NOT_W:1;
    unsigned char S:1;
    unsigned char P:1;
    unsigned char D_NOT_A:1;
    unsigned char CKE:1;
    unsigned char SMP:1;
  };
} __SSPSTAT_bits_t;
extern volatile __SSPSTAT_bits_t __at(SSPSTAT_ADDR) SSPSTAT_bits;

#ifndef NO_BIT_DEFINES
#define BF                   SSPSTAT_bits.BF
#define UA                   SSPSTAT_bits.UA
#define R_NOT_W              SSPSTAT_bits.R_NOT_W
#define S                    SSPSTAT_bits.S
#define P                    SSPSTAT_bits.P
#define D_NOT_A              SSPSTAT_bits.D_NOT_A
#define CKE                  SSPSTAT_bits.CKE
#define SMP                  SSPSTAT_bits.SMP
#endif /* NO_BIT_DEFINES */

// ----- STATUS bits --------------------
typedef union {
  struct {
    unsigned char C:1;
    unsigned char DC:1;
    unsigned char Z:1;
    unsigned char NOT_PD:1;
    unsigned char NOT_TO:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __STATUS_bits_t;
extern volatile __STATUS_bits_t __at(STATUS_ADDR) STATUS_bits;

#ifndef NO_BIT_DEFINES
#define C                    STATUS_bits.C
#define DC                   STATUS_bits.DC
#define Z                    STATUS_bits.Z
#define NOT_PD               STATUS_bits.NOT_PD
#define NOT_TO               STATUS_bits.NOT_TO
#endif /* NO_BIT_DEFINES */

// ----- STATUS_SHAD bits --------------------
typedef union {
  struct {
    unsigned char C_SHAD:1;
    unsigned char DC_SHAD:1;
    unsigned char Z_SHAD:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __STATUS_SHAD_bits_t;
extern volatile __STATUS_SHAD_bits_t __at(STATUS_SHAD_ADDR) STATUS_SHAD_bits;

#ifndef NO_BIT_DEFINES
#define C_SHAD               STATUS_SHAD_bits.C_SHAD
#define DC_SHAD              STATUS_SHAD_bits.DC_SHAD
#define Z_SHAD               STATUS_SHAD_bits.Z_SHAD
#endif /* NO_BIT_DEFINES */

// ----- T1CON bits --------------------
typedef union {
  struct {
    unsigned char TMR1ON:1;
    unsigned char :1;
    unsigned char NOT_T1SYNC:1;
    unsigned char T1OSCEN:1;
    unsigned char T1CKPS0:1;
    unsigned char T1CKPS1:1;
    unsigned char TMR1CS0:1;
    unsigned char TMR1CS1:1;
  };
} __T1CON_bits_t;
extern volatile __T1CON_bits_t __at(T1CON_ADDR) T1CON_bits;

#ifndef NO_BIT_DEFINES
#define TMR1ON               T1CON_bits.TMR1ON
#define NOT_T1SYNC           T1CON_bits.NOT_T1SYNC
#define T1OSCEN              T1CON_bits.T1OSCEN
#define T1CKPS0              T1CON_bits.T1CKPS0
#define T1CKPS1              T1CON_bits.T1CKPS1
#define TMR1CS0              T1CON_bits.TMR1CS0
#define TMR1CS1              T1CON_bits.TMR1CS1
#endif /* NO_BIT_DEFINES */

// ----- T1GCON bits --------------------
typedef union {
  struct {
    unsigned char T1GSS0:1;
    unsigned char T1GSS1:1;
    unsigned char T1GVAL:1;
    unsigned char T1GGO_NOT_DONE:1;
    unsigned char T1GSPM:1;
    unsigned char T1GTM:1;
    unsigned char T1GPOL:1;
    unsigned char TMR1GE:1;
  };
  struct {
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char T1GGO:1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
    unsigned char :1;
  };
} __T1GCON_bits_t;
extern volatile __T1GCON_bits_t __at(T1GCON_ADDR) T1GCON_bits;

#ifndef NO_BIT_DEFINES
#define T1GSS0               T1GCON_bits.T1GSS0
#define T1GSS1               T1GCON_bits.T1GSS1
#define T1GVAL               T1GCON_bits.T1GVAL
#define T1GGO_NOT_DONE       T1GCON_bits.T1GGO_NOT_DONE
#define T1GGO                T1GCON_bits.T1GGO
#define T1GSPM               T1GCON_bits.T1GSPM
#define T1GTM                T1GCON_bits.T1GTM
#define T1GPOL               T1GCON_bits.T1GPOL
#define TMR1GE               T1GCON_bits.TMR1GE
#endif /* NO_BIT_DEFINES */

// ----- T2CON bits --------------------
typedef union {
  struct {
    unsigned char T2CKPS0:1;
    unsigned char T2CKPS1:1;
    unsigned char TMR2ON:1;
    unsigned char T2OUTPS0:1;
    unsigned char T2OUTPS1:1;
    unsigned char T2OUTPS2:1;
    unsigned char T2OUTPS3:1;
    unsigned char :1;
  };
} __T2CON_bits_t;
extern volatile __T2CON_bits_t __at(T2CON_ADDR) T2CON_bits;

#ifndef NO_BIT_DEFINES
#define T2CKPS0              T2CON_bits.T2CKPS0
#define T2CKPS1              T2CON_bits.T2CKPS1
#define TMR2ON               T2CON_bits.TMR2ON
#define T2OUTPS0             T2CON_bits.T2OUTPS0
#define T2OUTPS1             T2CON_bits.T2OUTPS1
#define T2OUTPS2             T2CON_bits.T2OUTPS2
#define T2OUTPS3             T2CON_bits.T2OUTPS3
#endif /* NO_BIT_DEFINES */

// ----- TRISA bits --------------------
typedef union {
  struct {
    unsigned char TRISA0:1;
    unsigned char TRISA1:1;
    unsigned char TRISA2:1;
    unsigned char TRISA3:1;
    unsigned char TRISA4:1;
    unsigned char TRISA5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __TRISA_bits_t;
extern volatile __TRISA_bits_t __at(TRISA_ADDR) TRISA_bits;

#ifndef NO_BIT_DEFINES
#define TRISA0               TRISA_bits.TRISA0
#define TRISA1               TRISA_bits.TRISA1
#define TRISA2               TRISA_bits.TRISA2
#define TRISA3               TRISA_bits.TRISA3
#define TRISA4               TRISA_bits.TRISA4
#define TRISA5               TRISA_bits.TRISA5
#endif /* NO_BIT_DEFINES */

// ----- TXSTA bits --------------------
typedef union {
  struct {
    unsigned char TX9D:1;
    unsigned char TRMT:1;
    unsigned char BRGH:1;
    unsigned char SENDB:1;
    unsigned char SYNC:1;
    unsigned char TXEN:1;
    unsigned char TX9:1;
    unsigned char CSRC:1;
  };
} __TXSTA_bits_t;
extern volatile __TXSTA_bits_t __at(TXSTA_ADDR) TXSTA_bits;

#ifndef NO_BIT_DEFINES
#define TX9D                 TXSTA_bits.TX9D
#define TRMT                 TXSTA_bits.TRMT
#define BRGH                 TXSTA_bits.BRGH
#define SENDB                TXSTA_bits.SENDB
#define SYNC                 TXSTA_bits.SYNC
#define TXEN                 TXSTA_bits.TXEN
#define TX9                  TXSTA_bits.TX9
#define CSRC                 TXSTA_bits.CSRC
#endif /* NO_BIT_DEFINES */

// ----- WDTCON bits --------------------
typedef union {
  struct {
    unsigned char SWDTEN:1;
    unsigned char WDTPS0:1;
    unsigned char WDTPS1:1;
    unsigned char WDTPS2:1;
    unsigned char WDTPS3:1;
    unsigned char WDTPS4:1;
    unsigned char :1;
    unsigned char :1;
  };
} __WDTCON_bits_t;
extern volatile __WDTCON_bits_t __at(WDTCON_ADDR) WDTCON_bits;

#ifndef NO_BIT_DEFINES
#define SWDTEN               WDTCON_bits.SWDTEN
#define WDTPS0               WDTCON_bits.WDTPS0
#define WDTPS1               WDTCON_bits.WDTPS1
#define WDTPS2               WDTCON_bits.WDTPS2
#define WDTPS3               WDTCON_bits.WDTPS3
#define WDTPS4               WDTCON_bits.WDTPS4
#endif /* NO_BIT_DEFINES */

// ----- WPUA bits --------------------
typedef union {
  struct {
    unsigned char WPUA0:1;
    unsigned char WPUA1:1;
    unsigned char WPUA2:1;
    unsigned char WPUA3:1;
    unsigned char WPUA4:1;
    unsigned char WPUA5:1;
    unsigned char :1;
    unsigned char :1;
  };
} __WPUA_bits_t;
extern volatile __WPUA_bits_t __at(WPUA_ADDR) WPUA_bits;

#ifndef NO_BIT_DEFINES
#define WPUA0                WPUA_bits.WPUA0
#define WPUA1                WPUA_bits.WPUA1
#define WPUA2                WPUA_bits.WPUA2
#define WPUA3                WPUA_bits.WPUA3
#define WPUA4                WPUA_bits.WPUA4
#define WPUA5                WPUA_bits.WPUA5
#endif /* NO_BIT_DEFINES */

#endif
