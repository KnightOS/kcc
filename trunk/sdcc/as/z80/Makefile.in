VPATH        = @srcdir@
srcdir       = @srcdir@
top_builddir = @top_builddir@
top_srcdir   = @top_srcdir@

include $(top_builddir)/Makefile.common

OBJDIR = obj$(EXT)

ASXXLIB = $(srcdir)/../asxxsrc

ASXXLIBSRC = strcmpi.c assym.c aslex.c

SRC = asdata.c asexpr.c aslist.c asmain.c asout.c \
      assubr.c z80adr.c z80ext.c z80mch.c z80pst.c

ASSOURCES = $(SRC) $(ASXXLIBSRC:%.c=$(ASXXLIB)/%.c)

ASXXLIBOBJS = $(ASXXLIBSRC:%.c=$(OBJDIR)/%.o)

OBJS = $(SRC:%.c=$(OBJDIR)/%.o)

ASOBJECTS = $(OBJS) $(ASXXLIBOBJS)

BINS = $(BUILDDIR)/as$(EXT)$(EXEEXT)

CFLAGS += $(CPPFLAGS) $(OPTS) -I. -DINDEXLIB -DMLH_MAP -DUNIX -DSDK
CFLAGS += -funsigned-char

LDFLAGS = @LDFLAGS@ -lm $(EXTRALIBS)

all: dep $(BINS)

dep: Makefile.dep

Makefile.dep: $(ASSOURCES) $(srcdir)/*.h
	$(CPP) $(CPPFLAGS) $(M_OR_MM) $(filter %.c,$^) > Makefile.dep

ifeq "$(findstring $(MAKECMDGOALS),uninstall check installcheck installdirs \
                                   clean distclean mostlyclean realclean)" ""
  -include Makefile.dep
endif

# We need a '.stamp'-file in $(OBJDIR), because the time stamp
# of $(OBJDIR) itself is always updated, when a file in $(OBJDIR)
# is updated. A rule like
#	$(OBJDIR)/anyfile: $(OBJDIR)
# will always force a remake (at least on Linux ext2).

$(OBJDIR)/.stamp:
	mkdir -p $(OBJDIR)
	touch $(OBJDIR)/.stamp

$(BINS): $(ASOBJECTS)
	$(CC) -o $(BINS) $(ASOBJECTS) $(LDFLAGS)

$(OBJDIR)/%.o: %.c $(OBJDIR)/.stamp
	$(CC) -c $(CFLAGS) -o $@ $<

$(OBJDIR)/%.o: $(ASXXLIB)/%.c $(OBJDIR)/.stamp
	$(CC) -c $(CFLAGS) -o $@ $<

_as-z80:
	$(MAKE) EXT=-z80$(E)

_as-gbz80:
	$(MAKE) EXT=-gbz80$(E) OPTS=-DGAMEBOY

include $(srcdir)/clean.mk
