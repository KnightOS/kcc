#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[
  pdftitle={SDCC Compiler User Guide},
  pdfauthor={SDCC development team},
  pdfsubject={installation, user manual},
  pdfkeywords={8032, 8051, ansi, c, compiler, CPU, DS390, 
               embedded, GPL, HC08, manual, mcs51, PIC, Z80},
  colorlinks=true,
  linkcolor=blue] {hyperref}
\date{}
\end_preamble
\language english
\inputencoding default
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 1
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 30mm
\topmargin 20mm
\rightmargin 25mm
\bottommargin 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle fancy

\layout Comment

Please note: double dashed longoptions (e.g.
 --version) are written this way: -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-
\layout Comment

Two resp.
 three consecutive dashes simply result in a long resp.
 extra long dash.
\layout Comment

Architecture specific stuff (like memory models, code examples) should maybe
 go
\layout Comment

into seperate sections/chapters/appendices (it is hard to document PIC or
 Z80 in 
\layout Comment

a 8051 centered document)
\layout Title

SDCC Compiler User Guide
\layout Date


\size normal 
2.3.6
\size footnotesize 

\newline 
$Date$ 
\newline 
$Revision$
\layout Comment

The above strings enclosed in $ are automatically updated by cvs
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

Introduction
\layout Section

About SDCC
\layout Standard


\series bold 
SDCC
\series default 
 is a Freeware, retargettable, optimizing ANSI-C compiler by 
\series bold 
Sandeep Dutta
\series default 
 designed for 8 bit Microprocessors.
 The current version targets Intel MCS51 based Microprocessors (8031, 8032,
 8051, 8052
\begin_inset LatexCommand \index{8031, 8032, 8051, 8052, mcs51 CPU}

\end_inset 

, etc.), Dallas DS80C390 variants, Motorola HC08 and Zilog Z80 based MCUs.
 It can be retargetted for other microprocessors, support for Microchip
 PIC, Atmel AVR is under development.
 The entire source code for the compiler is distributed under GPL.
 SDCC uses ASXXXX & ASLINK, a Freeware, retargettable assembler & linker.
 SDCC has extensive language extensions suitable for utilizing various microcont
rollers and underlying hardware effectively.
 
\newline 

\newline 
In addition to the MCU specific optimizations SDCC also does a host of standard
 optimizations like:
\layout Itemize

global sub expression elimination, 
\layout Itemize

loop optimizations (loop invariant, strength reduction of induction variables
 and loop reversing), 
\layout Itemize

constant folding & propagation, 
\layout Itemize

copy propagation, 
\layout Itemize

dead code elimination 
\layout Itemize

jump tables for 
\emph on 
switch
\emph default 
 statements.
\layout Standard

For the back-end SDCC uses a global register allocation scheme which should
 be well suited for other 8 bit MCUs.
 
\newline 

\newline 
The peep hole optimizer uses a rule based substitution mechanism which is
 MCU independent.
 
\newline 

\newline 
Supported data-types are:
\layout Itemize

char (8 bits, 1 byte), 
\layout Itemize

short and int (16 bits, 2 bytes), 
\layout Itemize

long (32 bit, 4 bytes)
\layout Itemize

float (4 byte IEEE).
 
\layout Standard

The compiler also allows 
\emph on 
inline assembler code
\emph default 
 to be embedded anywhere in a function.
 In addition, routines developed in assembly can also be called.
\newline 

\newline 
SDCC also provides an option (-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-cyclomatic) to report the relative complexity of a function.
 These functions can then be further optimized, or hand coded in assembly
 if needed.
 
\newline 

\newline 
SDCC also comes with a companion source level debugger SDCDB, the debugger
 currently uses ucSim a freeware simulator for 8051 and other micro-controllers.
 
\newline 

\newline 
The latest version can be downloaded from 
\begin_inset LatexCommand \url{http://sdcc.sourceforge.net/snap.php}

\end_inset 

.

\series bold 
 
\series default 
\emph on 
Please note: the compiler will probably always be some steps ahead of this
 documentation
\series bold 
\emph default 

\begin_inset LatexCommand \index{Status of documentation}

\end_inset 


\begin_inset Foot
collapsed false

\layout Standard

Obviously this has pros and cons
\end_inset 

.
\layout Section

Open Source
\layout Standard

All packages used in this compiler system are 
\emph on 
opensource
\emph default 
 and 
\emph on 
freeware
\emph default 
; source code for all the sub-packages (pre-processor, assemblers, linkers
 etc) is distributed with the package.
 This documentation is maintained using a freeware word processor (LyX).
\newline 
This program is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License
\begin_inset LatexCommand \index{GNU General Public License, GPL}

\end_inset 

 as published by the Free Software Foundation; either version 2, or (at
 your option) any later version.
 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty
\begin_inset LatexCommand \index{warranty}

\end_inset 

 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, 59 Temple
 Place - Suite 330, Boston, MA 02111-1307, USA.
 In other words, you are welcome to use, share and improve this program.
 You are forbidden to forbid anyone else to use, share and improve what
 you give them.
 Help stamp out software-hoarding! 
\layout Section

Typographic conventions
\begin_inset LatexCommand \index{Typographic conventions}

\end_inset 


\layout Standard

Throughout this manual, we will use the following convention.
 Commands you have to type in are printed in 
\family sans 
\series bold 
"sans serif"
\series default 
.

\family default 
 Code samples are printed in 
\family typewriter 
typewriter font.

\family default 
 Interesting items and new terms are printed in 
\emph on 
italic.
\layout Section

Compatibility with previous versions
\layout Standard

This version has numerous bug fixes compared with the previous version.
 But we also introduced some incompatibilities with older versions.
 Not just for the fun of it, but to make the compiler more stable, efficient
 and ANSI compliant
\begin_inset LatexCommand \index{ANSI-compliance}

\end_inset 

 (see section 
\begin_inset LatexCommand \ref{sub:ANSI-Compliance}

\end_inset 

 for ANSI-Compliance).
 
\newline 

\layout Itemize

short is now equivalent to int (16 bits), it used to be equivalent to char
 (8 bits) which is not ANSI compliant
\layout Itemize

the default directory for gcc-builds where include, library and documentation
 files are stored is now in /usr/local/share
\layout Itemize

char type parameters to vararg functions are casted to int unless explicitly
 casted, e.g.: 
\newline 

\family typewriter 
\SpecialChar ~
\SpecialChar ~
char a=3;
\newline 
\SpecialChar ~
\SpecialChar ~
printf ("%d %c
\backslash 
n", a, (char)a);
\family default 

\newline 
 will push a as an int and as a char resp.
\layout Itemize

option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-regextend has been removed
\layout Itemize

option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-noregparms has been removed
\layout Itemize

option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-after-data has been removed
\layout Standard


\emph on 
<pending: more incompatibilities?>
\layout Section

System Requirements
\layout Standard

What do you need before you start installation of SDCC? A computer, and
 a desire to compute.
 The preferred method of installation is to compile SDCC from source using
 GNU gcc and make.
 For Windows some pre-compiled binary distributions are available for your
 convenience.
 You should have some experience with command line tools and compiler use.
\layout Section

Other Resources
\layout Standard

The SDCC home page at 
\begin_inset LatexCommand \url{http://sdcc.sourceforge.net/}

\end_inset 

 is a great place to find distribution sets.
 You can also find links to the user mailing lists that offer help or discuss
 SDCC with other SDCC users.
 Web links to other SDCC related sites can also be found here.
 This document can be found in the DOC directory of the source package as
 a text or HTML file.
 Some of the other tools (simulator and assembler) included with SDCC contain
 their own documentation and can be found in the source distribution.
 If you want the latest unreleased software, the complete source package
 is available directly by anonymous CVS on cvs.sdcc.sourceforge.net.
\layout Section

Wishes for the future
\layout Standard

There are (and always will be) some things that could be done.
 Here are some I can think of:
\newline 

\layout Standard


\family typewriter 
char KernelFunction3(char p) at 0x340;
\newline 

\layout Standard


\family typewriter 
code banking
\begin_inset LatexCommand \index{code banking (not supported)}

\end_inset 

 support for mcs51
\newline 

\newline 

\family default 
If you can think of some more, please see the chapter 
\begin_inset LatexCommand \ref{sub:Requesting-Features}

\end_inset 

 about filing feature requests
\begin_inset LatexCommand \index{Requesting features}

\end_inset 


\begin_inset LatexCommand \index{Feature request}

\end_inset 

.
\newline 

\layout Chapter

Installing SDCC
\begin_inset LatexCommand \index{Installation}

\end_inset 


\layout Standard

For most users it is sufficient to skip to either section 
\begin_inset LatexCommand \ref{sub:Building-SDCC-on-Linux}

\end_inset 

 or section 
\begin_inset LatexCommand \ref{sub:Windows-Install}

\end_inset 

.
 More detailled instructions follow below.
\layout Section

Configure Options
\begin_inset LatexCommand \index{Options SDCC configuration}

\end_inset 


\layout Standard

The install paths, search paths and other options are defined when running
 'configure'.
 The defaults can be overridden by:
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-prefix see table below
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-exec_prefix see table below
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-bindir see table below
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-datadir see table below
\layout List
\labelwidthstring 00.00.0000

docdir environment variable, see table below
\layout List
\labelwidthstring 00.00.0000

include_dir_suffix environment variable, see table below
\layout List
\labelwidthstring 00.00.0000

lib_dir_suffix environment variable, see table below
\layout List
\labelwidthstring 00.00.0000

sdccconf_h_dir_separator environment variable, either / or 
\backslash 

\backslash 
 makes sense here.
 This character will only be used in sdccconf.h; don't forget it's a C-header,
 therefore a double-backslash is needed there.
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-mcs51-port Excludes the Intel mcs51 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-gbz80-port Excludes the Gameboy gbz80 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-z80-port Excludes the z80 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-avr-port Excludes the AVR port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-ds390-port Excludes the DS390 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-hc08-port Excludes the HC08 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-pic-port Excludes the PIC port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-xa51-port Excludes the XA51 port
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-ucsim Disables configuring and building of ucsim
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-device-lib-build Disables automatically building device libraries
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-packihx Disables building packihx
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-enable-libgc Use the Bohem memory allocator.
 Lower runtime footprint.
\layout Standard

Furthermore the environment variables CC, CFLAGS, ...
 the tools and their arguments can be influenced.
 Please see `configure -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-help` and the man/info pages of `configure` for details.
\newline 

\newline 
The names of the standard libraries STD_LIB, STD_INT_LIB, STD_LONG_LIB,
 STD_FP_LIB, STD_DS390_LIB, STD_XA51_LIB and the environment variables SDCC_DIR_
NAME, SDCC_INCLUDE_NAME, SDCC_LIB_NAME are defined by `configure` too.
 At the moment it's not possible to change the default settings (it was
 simply never required).
\newline 

\newline 
These configure options are compiled into the binaries, and can only be
 changed by rerunning 'configure' and recompiling SDCC.
 The configure options are written in 
\emph on 
italics
\emph default 
 to distinguish them from run time environment variables (see section search
 paths).
\newline 

\newline 
The settings for 
\begin_inset Quotes sld
\end_inset 

Win32 builds
\begin_inset Quotes srd
\end_inset 

 are used by the SDCC team to build the official Win32 binaries.
 The SDCC team uses Mingw32 to build the official Windows binaries, because
 it's
\layout Enumerate

open source, 
\layout Enumerate

a gcc compiler and last but not least
\layout Enumerate

the binaries can be built by cross compiling on Sourceforge's compile farm.
\layout Standard

See the examples, how to pass the Win32 settings to 'configure'.
 The other Win32 builds using Borland, VC or whatever don't use 'configure',
 but a header file sdcc_vc_in.h is the same as sdccconf.h built by 'configure'
 for Win32.
\newline 

\newline 
These defaults are:
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="8" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="0in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Variable
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Win32 builds
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
PREFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 
sdcc
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
EXEC_PREFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$PREFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$PREFIX
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
BINDIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$EXECPREFIX
\emph default 
/bin
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$EXECPREFIX
\emph default 

\backslash 
bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
DATADIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$PREFIX
\emph default 
/share
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$PREFIX
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
DOCDIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR
\emph default 
/sdcc/doc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR
\emph default 

\backslash 
doc
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
INCLUDE_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/include
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

include
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
LIB_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/lib
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

lib
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Standard
\noindent 
'configure' also computes relative paths.
 This is needed for full relocatability of a binary package and to complete
 search paths (see section search paths below):
\newline 
 
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="0in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Variable (computed)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Win32 builds
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
BIN2DATA_DIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

../share
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

..
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
PREFIX2BIN_DIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bin
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

bin
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
PREFIX2DATA_DIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

share/sdcc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Standard
\noindent 
Examples:
\layout LyX-Code

./configure
\newline 
./configure -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-prefix=
\begin_inset Quotes srd
\end_inset 

/usr/bin
\begin_inset Quotes srd
\end_inset 

 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-datadir=
\begin_inset Quotes srd
\end_inset 

/usr/share
\begin_inset Quotes srd
\end_inset 


\newline 
./configure -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-avr-port -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-xa51-port
\layout Standard

To cross compile on linux for Mingw32 (see also 'sdcc/support/scripts/sdcc_mingw
32'):
\layout LyX-Code

./configure 
\backslash 

\newline 
CC=
\begin_inset Quotes srd
\end_inset 

i586-mingw32msvc-gcc
\begin_inset Quotes srd
\end_inset 

 CXX=
\begin_inset Quotes srd
\end_inset 

i586-mingw32msvc-g++
\begin_inset Quotes srd
\end_inset 

 
\backslash 
 
\newline 
RANLIB=
\begin_inset Quotes srd
\end_inset 

i586-mingw32msvc-ranlib
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
STRIP=
\begin_inset Quotes srd
\end_inset 

i586-mingw32msvc-strip
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-prefix=
\begin_inset Quotes srd
\end_inset 

/sdcc
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-datadir=
\begin_inset Quotes srd
\end_inset 

/sdcc
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
docdir=
\begin_inset Quotes srd
\end_inset 

/sdcc/doc
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
include_dir_suffix=
\begin_inset Quotes srd
\end_inset 

include
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
lib_dir_suffix=
\begin_inset Quotes srd
\end_inset 

lib
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
sdccconf_h_dir_separator=
\begin_inset Quotes srd
\end_inset 


\backslash 

\backslash 

\backslash 

\backslash 

\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-device-lib-build
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-ucsim
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-host=i586-mingw32msvc -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-build=unknown-unknown-linux-gnu
\layout Standard

To 
\begin_inset Quotes sld
\end_inset 

cross
\begin_inset Quotes srd
\end_inset 

compile on Cygwin for Mingw32 (see also sdcc/support/scripts/sdcc_cygwin_mingw32
):
\layout LyX-Code

./configure -C 
\backslash 

\newline 
CFLAGS=
\begin_inset Quotes srd
\end_inset 

-mno-cygwin -O2
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
LDFLAGS=
\begin_inset Quotes srd
\end_inset 

-mno-cygwin
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-prefix=
\begin_inset Quotes srd
\end_inset 

/sdcc
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-datadir=
\begin_inset Quotes srd
\end_inset 

/sdcc
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
docdir=
\begin_inset Quotes srd
\end_inset 

/sdcc/doc
\begin_inset Quotes srd
\end_inset 

 
\backslash 
 
\newline 
include_dir_suffix=
\begin_inset Quotes srd
\end_inset 

include
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
lib_dir_suffix=
\begin_inset Quotes srd
\end_inset 

lib
\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
sdccconf_h_dir_separator=
\begin_inset Quotes srd
\end_inset 


\backslash 

\backslash 

\backslash 

\backslash 

\begin_inset Quotes srd
\end_inset 

 
\backslash 

\newline 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-disable-ucsim
\layout Standard

'configure' is quite slow on Cygwin (at least on windows before Win2000/XP).
 The option '-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-C' turns on caching, which gives a little bit extra speed.
 However if options are changed, it can be necessary to delete the config.cache
 file.
\layout Section

Install paths
\begin_inset LatexCommand \label{sub:Install-paths}

\end_inset 


\begin_inset LatexCommand \index{Install paths}

\end_inset 


\layout Standard
\added_space_top medskip \align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Path
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Win32 builds
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Binary files*
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$EXEC_PREFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/bin
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 
sdcc
\backslash 
bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Include files
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR/ $INCLUDE_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/share/sdcc/include
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 
sdcc
\backslash 
include
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Library file**
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR/$LIB_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/share/sdcc/lib
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 
sdcc
\backslash 
lib
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Documentation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DOCDIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/share/sdcc/doc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 
sdcc
\backslash 
doc
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Verse


\size footnotesize 
*compiler, preprocessor, assembler, and linker
\newline 
**the 
\shape italic 
model
\shape default 
 is auto-appended by the compiler, e.g.
 small, large, z80, ds390 etc
\layout Standard
\noindent 
The install paths can still be changed during `make install` with e.g.:
\layout LyX-Code

make install prefix=$(HOME)/local/sdcc
\layout Standard

Of course this doesn't change the search paths compiled into the binaries.
\layout Section

Search Paths
\begin_inset LatexCommand \label{sub:Search-Paths}

\end_inset 


\begin_inset LatexCommand \index{Search path}

\end_inset 


\layout Standard

Some search paths or parts of them are determined by configure variables
 (in 
\emph on 
italics
\emph default 
, see section above).
 Further search paths are determined by environment variables during runtime.
 
\newline 
The paths searched when running the compiler are as follows (the first catch
 wins):
\newline 

\newline 
1.
 Binary files (preprocessor, assembler and linker)
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" width="0in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="0in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Search path
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Win32 builds
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME/
\emph on 
$PPREFIX2BIN_DIR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME/bin
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME
\backslash 
bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Path of argv[0] (if available)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Path of argv[0]
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Path of argv[0]
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$PATH
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$PATH
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$PATH
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 

 
\newline 

\layout Standard
\noindent 
2.
 Include files
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="1.5in">
<column alignment="block" valignment="top" leftline="true" width="1.5in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="0in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Search path
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Win32 builds
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-I dir
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-I dir
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-I dir
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_INCLUDE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_INCLUDE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_INCLUDE
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME/
\newline 

\emph on 
$PREFIX2DATA_DIR/
\newline 
$INCLUDE_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_ HOME/
\newline 
share/sdcc/
\newline 
include
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME
\backslash 
include
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])/
\newline 

\emph on 
$BIN2DATADIR/
\emph default 

\newline 

\emph on 
$INCLUDE_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])/
\newline 
../sdcc/include
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])
\backslash 
..
\backslash 
include
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR/
\emph default 

\newline 

\emph on 
$INCLUDE_DIR_SUFFIX
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/share/sdcc/
\newline 
include
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

(not on Win32)
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 

 
\newline 

\layout Standard
\noindent 
The option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nostdinc disables the last two search paths.
\newline 

\newline 
3.
 Library files 
\newline 

\layout Standard

With the exception of 
\begin_inset Quotes sld
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-L dir
\begin_inset Quotes srd
\end_inset 

 the 
\shape italic 
model
\shape default 
 is auto-appended by the compiler (e.g.
 small, large, z80, ds390 etc.).
 
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="1.7in">
<column alignment="block" valignment="top" leftline="true" width="1.2in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="1.2in">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Search path
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Win32 builds
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-L dir
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-L dir
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-L dir
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_LIB/
\newline 

\emph on 
<model>
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_LIB/
\newline 

\emph on 
<model>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_LIB
\backslash 

\newline 

\emph on 
<model>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME/
\newline 

\emph on 
$PREFIX2DATA_DIR/
\newline 
$LIB_DIR_SUFFIX/<model>
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME/
\newline 
share/sdcc/
\newline 
lib/
\emph on 
<model>
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

$SDCC_HOME
\backslash 
lib
\backslash 

\emph on 

\newline 
<model>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])/
\newline 

\emph on 
$BIN2DATADIR/
\emph default 

\newline 

\emph on 
$LIB_DIR_SUFFIX/<model>
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])/
\newline 
../sdcc/lib/
\emph on 
<model>
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

path(argv[0])
\backslash 

\newline 
..
\backslash 
lib
\backslash 

\emph on 
<model>
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
$DATADIR/
\newline 
$LIB_DIR_SUFFIX/<model>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

/usr/local/share/sdcc/
\newline 
lib/
\emph on 
<model>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

(not on Win32)
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Comment

Don't delete any of the stray spaces in the table above without checking
 the HTML output (last line)!
\layout Standard

\SpecialChar ~

\newline 
The option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nostdlib disables the last two search paths.
\layout Section

Building SDCC
\begin_inset LatexCommand \index{Building SDCC}

\end_inset 


\layout Subsection

Building SDCC on Linux
\begin_inset LatexCommand \label{sub:Building-SDCC-on-Linux}

\end_inset 


\layout Enumerate


\series medium 
Download the source package
\series default 
 either from the SDCC CVS repository or from the 
\begin_inset LatexCommand \url[nightly snapshots]{http://sdcc.sourceforge.net/snap.php}

\end_inset 


\series medium 
, it will be named something like sdcc
\series default 
.src
\series medium 
.t
\series default 
ar.
\series medium 
gz.
\layout Enumerate


\series medium 
Bring up a command line terminal, such as xterm.
\layout Enumerate


\series medium 
Unpack the file using a command like: 
\family sans 
\series bold 
"tar -xvzf sdcc.src.tar.gz
\family default 
\series default 
"
\series medium 
, this will create a sub-directory called sdcc with all of the sources.
\layout Enumerate

Change directory into the main SDCC directory, for example type: 
\family sans 
\series bold 
"cd sdcc
\series default 
".
\layout Enumerate


\series medium 
Type 
\family sans 
\series bold 
"./configure
\family default 
\series default 
".
 This configures the package for compilation on your system.
\layout Enumerate


\series medium 
Type 
\family sans 
\series bold 
"make
\family default 
\series default 
"
\series medium 
.

\series default 
 All of the source packages will compile, this can take a while.
\layout Enumerate


\series medium 
Type 
\family sans 
\series bold 
"make install"
\family default 
\series default 
 as root
\series medium 
.

\series default 
 This copies the binary executables, the include files, the libraries and
 the documentation to the install directories.
\layout Subsection

Building SDCC on OSX 2.x
\layout Standard

Follow the instruction for Linux.
\newline 

\newline 
On OSX 2.x it was reported, that the default gcc (version 3.1 20020420 (prerelease
)) fails to compile SDCC.
 Fortunately there's also gcc 2.9.x installed, which works fine.
 This compiler can be selected by running 'configure' with:
\layout LyX-Code

./configure CC=gcc2 CXX=g++2
\layout Subsection

Cross compiling SDCC on Linux for Windows
\layout Standard

With the Mingw32 gcc cross compiler it's easy to compile SDCC for Win32.
 See section 'Configure Options'.
\layout Subsection

Building SDCC on Windows 
\layout Standard

With the exception of Cygwin the SDCC binaries uCsim and sdcdb can't be
 built on Windows.
 They use Unix-sockets, which are not available on Win32.
\layout Subsection

Building SDCC using Cygwin and Mingw32
\layout Standard

For building and installing a Cygwin executable follow the instructions
 for Linux.
\newline 

\newline 
On Cygwin a 
\begin_inset Quotes sld
\end_inset 

native
\begin_inset Quotes srd
\end_inset 

 Win32-binary can be built, which will not need the Cygwin-DLL.
 For the necessary 'configure' options see section 'configure options' or
 the script 'sdcc/support/scripts/sdcc_cygwin_mingw32'.
\newline 

\newline 
In order to install Cygwin on Windows download setup.exe from 
\begin_inset LatexCommand \url[www.cygwin.com]{http://www.cygwin.com/}

\end_inset 

.
 Run it, set the 
\begin_inset Quotes sld
\end_inset 

default text file type
\begin_inset Quotes srd
\end_inset 

 to 
\begin_inset Quotes sld
\end_inset 

unix
\begin_inset Quotes srd
\end_inset 

 and download/install at least the following packages.
 Some packages are selected by default, others will be automatically selected
 because of dependencies with the manually selected packages.
 Never deselect these packages!
\layout Itemize

flex
\layout Itemize

bison
\layout Itemize

gcc ; version 3.x is fine, no need to use the old 2.9x
\layout Itemize

binutils ; selected with gcc
\layout Itemize

make
\layout Itemize

rxvt ; a nice console, which makes life much easier under windoze (see below)
\layout Itemize

man ; not really needed for building SDCC, but you'll miss it sooner or
 later
\layout Itemize

less ; not really needed for building SDCC, but you'll miss it sooner or
 later
\layout Itemize

cvs ; only if you use CVS access
\layout Standard

If you want to develop something you'll need:
\layout Itemize

python ; for the regression tests
\layout Itemize

gdb ; the gnu debugger, together with the nice GUI 
\begin_inset Quotes sld
\end_inset 

insight
\begin_inset Quotes srd
\end_inset 


\layout Itemize

openssh ; to access the CF or commit changes
\layout Itemize

autoconf and autoconf-devel ; if you want to fight with 'configure', don't
 use autoconf-stable!
\layout Standard

rxvt is a nice console with history.
 Replace in your cygwin.bat the line
\layout LyX-Code

bash -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-login -i 
\layout Standard

with (one line):
\layout LyX-Code

rxvt -sl 1000 -fn "Lucida Console-12" -sr -cr red
\layout LyX-Code

     -bg black -fg white -geometry 100x65 -e bash -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-login
\layout Standard

Text selected with the mouse is automatically copied to the clipboard, pasting
 works with shift-insert.
\newline 

\newline 
The other good tip is to make sure you have no //c/-style paths anywhere,
 use /cygdrive/c/ instead.
 Using // invokes a network lookup which is very slow.
 If you think 
\begin_inset Quotes sld
\end_inset 

cygdrive
\begin_inset Quotes srd
\end_inset 

 is too long, you can change it with e.g.
\layout LyX-Code

mount -s -u -c /mnt
\layout Standard

SDCC sources use the unix line ending LF.
 Life is much easier, if you store the source tree on a drive which is mounted
 in binary mode.
 And use an editor which can handle LF-only line endings.
 Make sure not to commit files with windows line endings.
 The tabulator spacing used in the project is 8.
\layout Subsection

Building SDCC Using Microsoft Visual C++ 6.0/NET (MSVC)
\layout Standard


\series medium 
Download the source package
\series default 
 either from the SDCC CVS repository or from the 
\begin_inset LatexCommand \url[nightly snapshots]{http://sdcc.sourceforge.net/snap.php}

\end_inset 


\series medium 
, it will be named something like sdcc
\series default 
.src
\series medium 
.tgz.

\series default 
 SDCC is distributed with all the projects, workspaces, and files you need
 to build it using Visual C++ 6.0/NET (except for sdcdb.exe which currently
 doesn't build under MSVC).
 The workspace name is 'sdcc.dsw'.
 Please note that as it is now, all the executables are created in a folder
 called sdcc
\backslash 
bin_vc.
 Once built you need to copy the executables from sdcc
\backslash 
bin_vc to sdcc
\backslash 
bin before running SDCC.
 
\newline 

\newline 
In order to build SDCC with MSVC you need win32 executables of bison.exe,
 flex.exe, and gawk.exe.
 One good place to get them is 
\begin_inset LatexCommand \url[here]{http://unxutils.sourceforge.net}

\end_inset 


\newline 

\newline 
Download the file UnxUtils
\begin_inset LatexCommand \index{UnxUtils}

\end_inset 

.zip.
 Now you have to install the utilities and setup MSVC so it can locate the
 required programs.
 Here there are two alternatives (choose one!):
\layout Enumerate

The easy way:
\newline 

\newline 
a) Extract UnxUtils.zip to your C:
\backslash 
 hard disk PRESERVING the original paths, otherwise bison won't work.
 (If you are using WinZip make certain that 'Use folder names' is selected)
\newline 

\newline 
b) In the Visual C++ IDE click Tools, Options, select the Directory tab,
 in 'Show directories for:' select 'Executable files', and in the directories
 window add a new path: 'C:
\backslash 
user
\backslash 
local
\backslash 
wbin', click ok.
\newline 

\newline 
(As a side effect, you get a bunch of Unix utilities that could be useful,
 such as diff and patch.)
\layout Enumerate

A more compact way:
\newline 

\newline 
This one avoids extracting a bunch of files you may not use, but requires
 some extra work:
\newline 

\newline 
a) Create a directory were to put the tools needed, or use a directory already
 present.
 Say for example 'C:
\backslash 
util'.
\newline 

\newline 
b) Extract 'bison.exe', 'bison.hairy', 'bison.simple', 'flex.exe', and gawk.exe
 to such directory WITHOUT preserving the original paths.
 (If you are using WinZip make certain that 'Use folder names' is not selected)
\newline 

\newline 
c) Rename bison.exe to '_bison.exe'.
\newline 

\newline 
d) Create a batch file 'bison.bat' in 'C:
\backslash 
util
\backslash 
' and add these lines: 
\newline 
\SpecialChar ~
\SpecialChar ~
set BISON_SIMPLE=C:
\backslash 
util
\backslash 
bison.simple 
\newline 
\SpecialChar ~
\SpecialChar ~
set BISON_HAIRY=C:
\backslash 
util
\backslash 
bison.hairy
\newline 
\SpecialChar ~
\SpecialChar ~
_bison %1 %2 %3 %4 %5 %6 %7 %8 %9
\newline 

\newline 
Steps 'c' and 'd' are needed because bison requires by default that the
 files 'bison.simple' and 'bison.hairy' reside in some weird Unix directory,
 '/usr/local/share/' I think.
 So it is necessary to tell bison where those files are located if they
 are not in such directory.
 That is the function of the environment variables BISON_SIMPLE and BISON_HAIRY.
\newline 

\newline 
e) In the Visual C++ IDE click Tools, Options, select the Directory tab,
 in 'Show directories for:' select 'Executable files', and in the directories
 window add a new path: 'c:
\backslash 
util', click ok.
 Note that you can use any other path instead of 'c:
\backslash 
util', even the path where the Visual C++ tools are, probably: 'C:
\backslash 
Program Files
\backslash 
Microsoft Visual Studio
\backslash 
Common
\backslash 
Tools'.
 So you don't have to execute step 'e' :)
\layout Standard

That is it.
 Open 'sdcc.dsw' in Visual Studio, click 'build all', when it finishes copy
 the executables from sdcc
\backslash 
bin_vc to sdcc
\backslash 
bin, and you can compile using SDCC.
\layout Subsection

Building SDCC Using Borland
\layout Enumerate

From the sdcc directory, run the command "make -f Makefile.bcc".
 This should regenerate all the .exe files in the bin directory except for
 sdcdb.exe (which currently doesn't build under Borland C++).
\layout Enumerate

If you modify any source files and need to rebuild, be aware that the dependenci
es may not be correctly calculated.
 The safest option is to delete all .obj files and run the build again.
 From a Cygwin BASH prompt, this can easily be done with the command (be
 sure you are in the sdcc directory):
\newline 

\newline 

\family sans 
\series bold 
find .
 
\backslash 
( -name '*.obj' -o -name '*.lib' -o -name '*.rul' 
\backslash 
) -print -exec rm {} 
\backslash 
;
\family default 
\series default 

\newline 

\newline 
or on Windows NT/2000/XP from the command prompt with the command:
\newline 

\family sans 
\series bold 

\newline 
del /s *.obj *.lib *.rul
\family default 
\series default 
 from the sdcc directory.
\layout Subsection

Windows Install Using a Binary Package
\begin_inset LatexCommand \label{sub:Windows-Install}

\end_inset 


\layout Enumerate

Download the binary package from 
\begin_inset LatexCommand \url{http://sdcc.sourceforge.net/snap.php}

\end_inset 

 and unpack it using your favorite unpacking tool (gunzip, WinZip, etc).
 This should unpack to a group of sub-directories.
 An example directory structure after unpacking the mingw32 package is:
 c:
\backslash 
sdcc
\backslash 
bin for the executables, c:
\backslash 
sdcc
\backslash 
include and c:
\backslash 
sdcc
\backslash 
lib for the include and libraries.
\layout Enumerate

Adjust your environment variable PATH to include the location of the bin
 directory or start sdcc using the full path.
\layout Section

Building the Documentation
\layout Standard

If the necessary tools (LyX, LaTeX, latex2html) are installed it is as easy
 as changing into the doc directory and typing 
\family sans 
\series bold 

\begin_inset Quotes srd
\end_inset 

make
\begin_inset Quotes srd
\end_inset 


\family default 
\series default 
 there.
 If you want to avoid installing the tools you will have some success with
 a bootable Knoppix CD 
\begin_inset LatexCommand \url{http://www.knoppix.net}

\end_inset 

.
 Prebuilt documentation in html and pdf format is available from 
\begin_inset LatexCommand \url{http://sdcc.sourceforge.net/snap.php}

\end_inset 

.
\layout Section

Reading the Documentation
\layout Standard

Currently reading the document in pdf format is recommended, as for unknown
 reason the hyperlinks are working there whereas in the html version they
 are not.
\newline 
This documentation is in some aspects different from a commercial documentation:
 
\layout Itemize

It tries to document SDCC for several processor architectures in one document
 (commercially these probably would be separate documents/products).
 This document
\begin_inset LatexCommand \index{Status of documentation}

\end_inset 

 currently matches SDCC for mcs51 and DS390 best and does give too few informati
on about f.e.
 Z80, PIC and HC08.
\layout Itemize

There are many references pointing away from this documentation.
 Don't let this distract you.
 If there f.e.
 was a reference like 
\begin_inset LatexCommand \url{www.opencores.org}

\end_inset 

 together with a statement 
\begin_inset Quotes sld
\end_inset 

some processors which are targetted by SDCC can be implemented in a 
\emph on 
f
\emph default 
ield 
\emph on 
p
\emph default 
rogrammable 
\emph on 
g
\emph default 
ate 
\emph on 
a
\emph default 
rray
\begin_inset LatexCommand \index{fpga (field programmable gate array)}

\end_inset 


\begin_inset Quotes srd
\end_inset 

 we expect you to have a quick look there and come back.
 If you read this you are on the right track.
\layout Itemize

Some sections attribute more space to problems, restrictions and warnings
 than to the solution.
\layout Itemize

The installation section and the section about the debugger is intimidating.
\layout Itemize

There are still lots of typos and there are more different writing styles
 than pictures.
\layout Section

Testing the SDCC Compiler
\layout Standard

The first thing you should do after installing your SDCC compiler is to
 see if it runs.
 Type 
\family sans 
\series bold 
"sdcc -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-version"
\begin_inset LatexCommand \index{version}

\end_inset 


\family default 
\series default 
 at the prompt, and the program should run and tell you the version.
 If it doesn't run, or gives a message about not finding sdcc program, then
 you need to check over your installation.
 Make sure that the sdcc bin directory is in your executable search path
 defined by the PATH environment setting (
\series medium 
see 
\series default 
section 
\begin_inset LatexCommand \ref{sub:Install-Trouble-shooting}

\end_inset 

\SpecialChar ~

\series medium 
Install trouble-shooting for suggestions
\series default 
).
 Make sure that the sdcc program is in the bin folder, if not perhaps something
 did not install correctly.
\newline 

\newline 

\series medium 
SDCC 
\series default 
is commonly installed as described in section 
\begin_inset Quotes sld
\end_inset 

Install and search paths
\begin_inset Quotes srd
\end_inset 


\newline 

\newline 

\series medium 
Make sure the compiler works on a very simple example.
 Type in the following test.c program using your favorite 
\series default 
ASCII 
\series medium 
editor:
\layout Verse


\family typewriter 
char test;
\newline 

\newline 
void main(void) {
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
test=0;
\newline 
}
\layout Standard


\series medium 
Compile this using the following command: 
\family sans 
\series bold 
"sdcc -c test.c".

\family default 
\series default 
 
\series medium 
If all goes well, the compiler will generate a test.asm and test.rel file.
 Congratulations, you've just compiled your first program with SDCC.
 We used the -c option to tell SDCC not to link the generated code, just
 to keep things simple for this step.
\series default 

\newline 

\newline 

\series medium 
The next step is to try it with the linker.
 Type in 
\family sans 
\series bold 
"sdcc test.c
\family default 
\series default 
"
\series medium 
.
 If all goes well the compiler will link with the libraries and produce
 a test.ihx output file.
 If this step fails
\series default 
 
\series medium 
(no test.ihx, and the linker generates warnings), then the problem is most
 likely that 
\series default 
SDCC
\series medium 
 cannot find the 
\series default 
/
\series medium 
usr/local/share/sdcc/lib directory
\series default 
 
\series medium 
(see 
\series default 
section 
\begin_inset LatexCommand \ref{sub:Install-Trouble-shooting}

\end_inset 

\SpecialChar ~

\series medium 
Install trouble-shooting for suggestions).
\series default 

\newline 

\newline 

\series medium 
The final test is to ensure 
\series default 
SDCC
\series medium 
 can use the 
\series default 
standard
\series medium 
 header files and libraries.
 Edit test.c and change it to the following:
\layout Verse


\family typewriter 
#include <string.h>
\newline 

\newline 
char str1[10];
\newline 

\newline 
void main(void) {
\newline 
\SpecialChar ~
\SpecialChar ~
strcpy(str1, "testing");
\newline 
}
\layout Standard


\series medium 
Compile this by typing 
\family sans 
\series bold 
"sdcc test.c"
\family default 
\series medium 
.
 This should generate a test.ihx output file, and it should give no warnings
 such as not finding the string.h file.
 If it cannot find the string.h file, then the problem is that 
\series default 
SDCC
\series medium 
 cannot find the /usr/local/share/sdcc/include directory
\series default 
 
\series medium 
(see the 
\series default 
section 
\begin_inset LatexCommand \ref{sub:Install-Trouble-shooting}

\end_inset 

\SpecialChar ~

\series medium 
Install trouble-shooting section for suggestions).

\series default 
 Use option 
\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-print-search-dirs
\series default 

\begin_inset LatexCommand \index{-\/-print-search-dirs}

\end_inset 

 to find exactly where SDCC is looking for the include and lib files.
\layout Section

Install Trouble-shooting
\begin_inset LatexCommand \label{sub:Install-Trouble-shooting}

\end_inset 


\begin_inset LatexCommand \index{Install trouble-shooting}

\end_inset 


\layout Subsection

SDCC does not build correctly.
\layout Standard

A thing to try is starting from scratch by unpacking the .tgz source package
 again in an empty directory.
 Configure it like:
\newline 

\newline 

\family sans 
\series bold 
./configure 2>&1 | tee configure.log
\family default 
\series default 

\newline 

\newline 
and build it like:
\newline 

\newline 

\family sans 
\series bold 
make 2>&1 | tee make.log
\family default 
\series default 

\newline 

\newline 
If anything goes wrong, you can review the log files to locate the problem.
 Or a relevant part of this can be attached to an email that could be helpful
 when requesting help from the mailing list.
\layout Subsection

What the 
\begin_inset Quotes sld
\end_inset 

./configure
\begin_inset Quotes srd
\end_inset 

 does
\layout Standard

The 
\begin_inset Quotes sld
\end_inset 

./configure
\begin_inset Quotes srd
\end_inset 

 command is a script that analyzes your system and performs some configuration
 to ensure the source package compiles on your system.
 It will take a few minutes to run, and will compile a few tests to determine
 what compiler features are installed.
\layout Subsection

What the 
\begin_inset Quotes sld
\end_inset 

make
\begin_inset Quotes srd
\end_inset 

 does.
\layout Standard

This runs the GNU make tool, which automatically compiles all the source
 packages into the final installed binary executables.
\layout Subsection

What the 
\begin_inset Quotes sld
\end_inset 

make install
\begin_inset Quotes erd
\end_inset 

 command does.
\layout Standard

This will install the compiler, other executables libraries and include
 files into the appropriate directories.
 See sections 
\begin_inset LatexCommand \ref{sub:Install-paths}

\end_inset 

,\SpecialChar ~

\begin_inset LatexCommand \ref{sub:Search-Paths}

\end_inset 

\SpecialChar ~
about install and search paths.
\newline 
On most systems you will need super-user privileges to do this.
\layout Section

Components of SDCC
\layout Standard

SDCC is not just a compiler, but a collection of tools by various developers.
 These include linkers, assemblers, simulators and other components.
 Here is a summary of some of the components.
 Note that the included simulator and assembler have separate documentation
 which you can find in the source package in their respective directories.
 As SDCC grows to include support for other processors, other packages from
 various developers are included and may have their own sets of documentation.
\newline 

\newline 
You might want to look at the files which are installed in <installdir>.
 At the time of this writing, we find the following programs for gcc-builds:
\newline 
 
\newline 
In <installdir>/bin:
\layout Itemize

sdcc - The compiler.
\layout Itemize

sdcpp - The C preprocessor.
\layout Itemize

asx8051 - The assembler for 8051 type processors.
\layout Itemize

as-z80
\series bold 
, 
\series default 
as-gbz80 - The Z80 and GameBoy Z80 assemblers.
\layout Itemize

aslink -The linker for 8051 type processors.
\layout Itemize

link-z80
\series bold 
, 
\series default 
link-gbz80 - The Z80 and GameBoy Z80 linkers.
\layout Itemize

s51 - The ucSim 8051 simulator.
\layout Itemize

sdcdb - The source debugger.
\layout Itemize

packihx - A tool to pack (compress) Intel hex files.
\layout Standard

In <installdir>/share/sdcc/include
\layout Itemize

the include files
\layout Standard

In <installdir>/share/sdcc/lib
\layout Itemize

the subdirs src and small, large, z80, gbz80 and ds390 with the precompiled
 relocatables.
\layout Standard

In <installdir>/share/sdcc/doc
\layout Itemize

the documentation
\layout Standard

As development for other processors proceeds, this list will expand to include
 executables to support processors like AVR, PIC, etc.
\layout Subsection

sdcc - The Compiler
\layout Standard

This is the actual compiler, it in turn uses the c-preprocessor and invokes
 the assembler and linkage editor.
\layout Subsection

sdcpp
\begin_inset LatexCommand \index{sdcpp}

\end_inset 

 - The C-Preprocessor
\layout Standard

The preprocessor is a modified version of the GNU preprocessor.
 The C preprocessor is used to pull in #include sources, process #ifdef
 statements, #defines and so on.
\layout Subsection

asx8051, as-z80, as-gbz80, aslink, link-z80, link-gbz80 - The Assemblers
 and Linkage Editors
\layout Standard

This is retargettable assembler & linkage editor, it was developed by Alan
 Baldwin.
 John Hartman created the version for 8051, and I (Sandeep) have made some
 enhancements and bug fixes for it to work properly with SDCC.
\layout Subsection

s51 - The Simulator
\begin_inset LatexCommand \index{s51}

\end_inset 


\layout Standard

S51 is a freeware, opensource simulator developed by Daniel Drotos (
\begin_inset LatexCommand \url{mailto:drdani@mazsola.iit.uni-miskolc.hu}

\end_inset 

).
 The simulator is built as part of the build process.
 For more information visit Daniel's web site at: 
\begin_inset LatexCommand \url{http://mazsola.iit.uni-miskolc.hu/~drdani/embedded/s51}

\end_inset 

.
 It currently supports the core mcs51, the Dallas DS80C390 and the Phillips
 XA51 family.
\layout Subsection

sdcdb
\begin_inset LatexCommand \index{sdcdb}

\end_inset 

 - Source Level Debugger
\layout Standard

Sdcdb is the companion source level debugger.
 The current version of the debugger uses Daniel's Simulator S51
\begin_inset LatexCommand \index{s51}

\end_inset 

, but can be easily changed to use other simulators.
\layout Chapter

Using SDCC
\layout Section

Compiling
\layout Subsection

Single Source File Projects
\layout Standard

For single source file 8051 projects the process is very simple.
 Compile your programs with the following command 
\family sans 
\series bold 
"sdcc sourcefile.c".

\family default 
\series default 
 This will compile, assemble and link your source file.
 Output files are as follows
\layout Itemize

sourcefile.asm
\begin_inset LatexCommand \index{<file>.asm}

\end_inset 

 - Assembler source
\begin_inset LatexCommand \index{Assembler source}

\end_inset 

 file created by the compiler
\layout Itemize

sourcefile.lst
\begin_inset LatexCommand \index{<file>.lst}

\end_inset 

 - Assembler listing
\begin_inset LatexCommand \index{Assembler listing}

\end_inset 

 file created by the Assembler
\layout Itemize

sourcefile.rst
\begin_inset LatexCommand \index{<file>.rst}

\end_inset 

 - Assembler listing
\begin_inset LatexCommand \index{Assembler listing}

\end_inset 

 file updated with linkedit information, created by linkage editor
\layout Itemize

sourcefile.sym
\begin_inset LatexCommand \index{<file>.sym}

\end_inset 

 - symbol listing
\begin_inset LatexCommand \index{Symbol listing}

\end_inset 

 for the sourcefile, created by the assembler
\layout Itemize

sourcefile.rel
\begin_inset LatexCommand \index{<file>.rel}

\end_inset 

 - Object file
\begin_inset LatexCommand \index{Object file}

\end_inset 

 created by the assembler, input to Linkage editor
\layout Itemize

sourcefile.map
\begin_inset LatexCommand \index{<file>.map}

\end_inset 

 - The memory map
\begin_inset LatexCommand \index{Memory map}

\end_inset 

 for the load module, created by the Linker
\layout Itemize

sourcefile.mem
\begin_inset LatexCommand \index{<file>.mem}

\end_inset 

 - A file with a summary of the memory usage
\layout Itemize

sourcefile.ihx
\begin_inset LatexCommand \index{<file>.ihx}

\end_inset 

 - The load module in Intel hex format
\begin_inset LatexCommand \index{Intel hex format}

\end_inset 

 (you can select the Motorola S19 format
\begin_inset LatexCommand \index{Motorola S19 format}

\end_inset 

 with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-out-fmt-s19
\begin_inset LatexCommand \index{-\/-out-fmt-s19}

\end_inset 

.
 If you need another format you might want to use 
\family sans 
\shape italic 
objdump
\family default 
\shape default 

\begin_inset LatexCommand \index{objdump}

\end_inset 

 or
\family sans 
\shape italic 
 srecord
\family default 
\shape default 

\begin_inset LatexCommand \index{srecord}

\end_inset 

)
\layout Itemize

sourcefile.adb
\begin_inset LatexCommand \index{.adb}

\end_inset 

 - An intermediate file containing debug information needed to create the
 .cdb file (with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-debug
\begin_inset LatexCommand \index{-\/-debug}

\end_inset 

) 
\layout Itemize

sourcefile.cdb
\begin_inset LatexCommand \index{<file>.cdb}

\end_inset 

 - An optional file (with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-debug) containing debug information
\layout Itemize

sourcefile.
 - (no extension)
\begin_inset LatexCommand \index{<file> (no extension)}

\end_inset 

 An optional AOMF51
\begin_inset LatexCommand \index{AOMF51}

\end_inset 

 file containing debug information (with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-debug).
 This format is commonly used by third party tools (debuggers
\begin_inset LatexCommand \index{Debugger}

\end_inset 

, simulators, emulators)
\layout Itemize

sourcefile.dump*
\begin_inset LatexCommand \index{<file>.dump*}

\end_inset 

 - Dump file to debug the compiler it self (with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpall) (see section 
\begin_inset LatexCommand \ref{sub:Intermediate-Dump-Options}

\end_inset 

\SpecialChar ~
 and section 
\begin_inset LatexCommand \ref{sub:The-anatomy-of}

\end_inset 

\SpecialChar ~

\begin_inset Quotes sld
\end_inset 

Anatomy of the compiler
\begin_inset Quotes srd
\end_inset 

).
\layout Subsection

Projects with Multiple Source Files
\layout Standard

SDCC can compile only ONE file at a time.
 Let us for example assume that you have a project containing the following
 files:
\newline 

\newline 
foo1.c (contains some functions)
\newline 
foo2.c (contains some more functions)
\newline 
foomain.c (contains more functions and the function main)
\newline 

\size footnotesize 

\newline 

\size default 
The first two files will need to be compiled separately with the commands:
\size footnotesize 
 
\size default 

\newline 

\newline 

\family sans 
\series bold 
sdcc\SpecialChar ~
-c\SpecialChar ~
foo1.c
\family default 
\series default 
\size footnotesize 

\newline 

\family sans 
\series bold 
\size default 
sdcc\SpecialChar ~
-c\SpecialChar ~
foo2.c
\family default 
\series default 

\newline 

\newline 
Then compile the source file containing the 
\emph on 
main()
\emph default 
 function and link
\begin_inset LatexCommand \index{Linker}

\end_inset 

 the files together with the following command: 
\newline 

\newline 

\family sans 
\series bold 
sdcc\SpecialChar ~
foomain.c\SpecialChar ~
foo1.rel\SpecialChar ~
foo2.rel
\family default 
\series default 

\begin_inset LatexCommand \index{.rel}

\end_inset 


\newline 

\newline 
Alternatively, 
\emph on 
foomain.c 
\emph default 
can be separately compiled as well: 
\family sans 
\series bold 

\newline 

\newline 
sdcc\SpecialChar ~
-c\SpecialChar ~
foomain.c
\newline 
sdcc foomain.rel foo1.rel foo2.rel
\newline 

\newline 

\family default 
\series default 
The file containing the 
\emph on 
main()
\emph default 
 function
\emph on 
 
\emph default 
\noun on 
must
\noun default 
 be the 
\noun on 
first
\noun default 
 file specified in the command line, since the linkage editor processes
 file in the order they are presented to it.
 The linker is invoked from SDCC using a script file with extension .lnk
\begin_inset LatexCommand \index{.lnk}

\end_inset 

.
 You can view this file to troubleshoot linking problems such as those arising
 from missing libraries.
\layout Subsection

Projects with Additional Libraries
\begin_inset LatexCommand \index{Libraries}

\end_inset 


\layout Standard

Some reusable routines may be compiled into a library, see the documentation
 for the assembler and linkage editor (which are in <installdir>/share/sdcc/doc)
 for how to create a 
\emph on 
.lib
\begin_inset LatexCommand \index{.lib}

\end_inset 


\emph default 
 library file.
 Libraries created in this manner can be included in the command line.
 Make sure you include the -L <library-path> option to tell the linker where
 to look for these files if they are not in the current directory.
 Here is an example, assuming you have the source file 
\emph on 
foomain.c
\emph default 
 and a library
\emph on 
 foolib.lib
\emph default 
 in the directory 
\emph on 
mylib
\emph default 
 (if that is not the same as your current project):
\newline 

\newline 

\family sans 
\series bold 
sdcc foomain.c foolib.lib -L mylib
\newline 

\newline 

\family default 
\series default 
Note here that
\emph on 
 mylib
\emph default 
 must be an absolute path name.
\newline 

\newline 
The most efficient way to use libraries is to keep separate modules in separate
 source files.
 The lib file now should name all the modules.rel
\begin_inset LatexCommand \index{rel}

\end_inset 

 files.
 For an example see the standard library file 
\emph on 
libsdcc.lib
\emph default 
 in the directory <installdir>/share/lib/small.
\layout Section

Command Line Options
\begin_inset LatexCommand \index{Command Line Options}

\end_inset 


\layout Subsection

Processor Selection Options
\begin_inset LatexCommand \index{Options processor selection}

\end_inset 


\begin_inset LatexCommand \index{Processor selection options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-mmcs51
\begin_inset LatexCommand \index{-mmcs51}

\end_inset 


\series default 
 Generate code for the Intel MCS51
\begin_inset LatexCommand \index{MCS51}

\end_inset 

 family of processors.
 This is the default processor target.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mds390
\begin_inset LatexCommand \index{-mds390}

\end_inset 


\series default 
 Generate code for the Dallas DS80C390
\begin_inset LatexCommand \index{DS80C390}

\end_inset 

 processor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mds400
\begin_inset LatexCommand \index{-mds400}

\end_inset 


\series default 
 Generate code for the Dallas DS80C400
\begin_inset LatexCommand \index{DS80C400}

\end_inset 

 processor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mhc08
\begin_inset LatexCommand \index{-mhc08}

\end_inset 


\series default 
 Generate code for the Motorola HC08
\begin_inset LatexCommand \index{HC08}

\end_inset 

 family of processors (added Oct 2003).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mz80
\begin_inset LatexCommand \index{-mz80}

\end_inset 


\series default 
 Generate code for the Zilog Z80
\begin_inset LatexCommand \index{Z80}

\end_inset 

 family of processors.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mgbz80
\begin_inset LatexCommand \index{-mgbz80}

\end_inset 


\series default 
 Generate code for the GameBoy Z80
\begin_inset LatexCommand \index{gbz80 (GameBoy Z80)}

\end_inset 

 processor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mavr
\begin_inset LatexCommand \index{-mavr}

\end_inset 


\series default 
 Generate code for the Atmel AVR
\begin_inset LatexCommand \index{AVR}

\end_inset 

 processor (In development, not complete).
 AVR users should probably have a look at avr-gcc 
\begin_inset LatexCommand \url{ http://savannah.nongnu.org/download/avr-libc/snapshots/}

\end_inset 

.
\layout Comment

I think it is fair to direct users there for now.
 Open source is also about avoiding unnecessary work .
 But I didn't find the 'official' link.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mpic14
\begin_inset LatexCommand \index{-mpic14}

\end_inset 


\series default 
 Generate code for the Microchip PIC 14
\begin_inset LatexCommand \index{PIC14}

\end_inset 

-bit processors (p16f84 and variants).
\layout Comment

p16f627 p16f628 p16f84 p16f873 p16f877?
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mpic16
\begin_inset LatexCommand \index{-mpic16}

\end_inset 


\series default 
 Generate code for the Microchip PIC 16
\begin_inset LatexCommand \index{PIC16}

\end_inset 

-bit processors (p18f452 and variants).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mtlcs900h
\series default 
 Generate code for the Toshiba TLCS-900H
\begin_inset LatexCommand \index{TLCS-900H}

\end_inset 

 processor (In development, not complete).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-mxa51
\begin_inset LatexCommand \index{-mxa51}

\end_inset 


\series default 
 Generate code for the Phillips XA51
\begin_inset LatexCommand \index{XA51}

\end_inset 

 processor (In development, not complete).
\layout Subsection

Preprocessor Options
\begin_inset LatexCommand \index{Options preprocessor}

\end_inset 


\begin_inset LatexCommand \index{Preprocessor options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-I<path>
\begin_inset LatexCommand \index{-I<path>}

\end_inset 


\series default 
 The additional location where the pre processor will look for <..h> or 
\begin_inset Quotes eld
\end_inset 

..h
\begin_inset Quotes erd
\end_inset 

 files.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-D<macro[=value]>
\begin_inset LatexCommand \index{-D<macro[=value]>}

\end_inset 


\series default 
 Command line definition of macros.
 Passed to the preprocessor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-M
\begin_inset LatexCommand \index{-M}

\end_inset 


\series default 
 Tell the preprocessor to output a rule suitable for make describing the
 dependencies of each object file.
 For each source file, the preprocessor outputs one make-rule whose target
 is the object file name for that source file and whose dependencies are
 all the files `#include'd in it.
 This rule may be a single line or may be continued with `
\backslash 
'-newline if it is long.
 The list of rules is printed on standard output instead of the preprocessed
 C program.
 `-M' implies `-E
\begin_inset LatexCommand \index{-E}

\end_inset 

'.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-C
\begin_inset LatexCommand \index{-C}

\end_inset 


\series default 
 Tell the preprocessor not to discard comments.
 Used with the `-E' option.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-MM
\begin_inset LatexCommand \index{-MM}

\end_inset 


\size large 
\bar under 
 
\series default 
\size default 
\bar default 
Like `-M' but the output mentions only the user header files included with
 `#include 
\begin_inset Quotes eld
\end_inset 

file"'.
 System header files included with `#include <file>' are omitted.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-Aquestion(answer)
\begin_inset LatexCommand \index{-Aquestion(answer)}

\end_inset 


\series default 
 Assert the answer answer for question, in case it is tested with a preprocessor
 conditional such as `#if #question(answer)'.
 `-A-' disables the standard assertions that normally describe the target
 machine.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-Umacro
\begin_inset LatexCommand \index{-Umacro}

\end_inset 


\series default 
 Undefine macro macro.
 `-U' options are evaluated after all `-D' options, but before any `-include'
 and `-imacros' options.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-dM
\begin_inset LatexCommand \index{-dM}

\end_inset 


\series default 
 Tell the preprocessor to output only a list of the macro definitions that
 are in effect at the end of preprocessing.
 Used with the `-E' option.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-dD
\begin_inset LatexCommand \index{-dD}

\end_inset 


\series default 
 Tell the preprocessor to pass all macro definitions into the output, in
 their proper sequence in the rest of the output.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-dN
\begin_inset LatexCommand \index{-dN}

\end_inset 


\size large 
\bar under 
 
\series default 
\size default 
\bar default 
Like `-dD' except that the macro arguments and contents are omitted.
 Only `#define name' is included in the output.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-Wp\SpecialChar ~
preprocessorOption[,preprocessorOption]
\series default 

\begin_inset LatexCommand \index{-Wp preprocessorOption[,preprocessorOption]}

\end_inset 

...
 Pass the preprocessorOption to the preprocessor.
\layout Subsection

Linker Options
\begin_inset LatexCommand \index{Options linker}

\end_inset 


\begin_inset LatexCommand \index{Linker options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-L\SpecialChar ~
-
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series bold 
-lib-path
\begin_inset LatexCommand \index{-\/-lib-path <path>}

\end_inset 


\begin_inset LatexCommand \index{-L -\/-lib-path}

\end_inset 


\series default 
\SpecialChar ~
<absolute path to additional libraries> This option is passed to the linkage
 editor's additional libraries
\begin_inset LatexCommand \index{Libraries}

\end_inset 

 search path.
 The path name must be absolute.
 Additional library files may be specified in the command line.
 See section Compiling programs for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xram-loc
\series default 

\begin_inset LatexCommand \index{-\/-xram-loc <Value>}

\end_inset 

\SpecialChar ~
<Value> The start location of the external ram
\begin_inset LatexCommand \index{xdata}

\end_inset 

, default value is 0.
 The value entered can be in Hexadecimal or Decimal format, e.g.: -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xram-loc 0x8000 or -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xram-loc 32768.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-loc
\series default 

\begin_inset LatexCommand \index{-\/-code-loc <Value>}

\end_inset 

\SpecialChar ~
<Value> The start location of the code
\begin_inset LatexCommand \index{code}

\end_inset 

 segment, default value 0.
 Note when this option is used the interrupt vector table is also relocated
 to the given address.
 The value entered can be in Hexadecimal or Decimal format, e.g.: -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-loc 0x8000 or -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-loc 32768.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-loc
\series default 

\begin_inset LatexCommand \index{-\/-stack-loc <Value>}

\end_inset 

\SpecialChar ~
<Value> By default the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 is placed after the data segment.
 Using this option the stack can be placed anywhere in the internal memory
 space of the 8051.
 The value entered can be in Hexadecimal or Decimal format, e.g.
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-loc 0x20 or -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-loc 32.
 Since the sp register is incremented before a push or call, the initial
 sp will be set to one byte prior the provided value.
 The provided value should not overlap any other memory areas such as used
 register banks or the data segment and with enough space for the current
 application.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-data-loc
\series default 

\begin_inset LatexCommand \index{-\/-data-loc <Value>}

\end_inset 

\SpecialChar ~
<Value> The start location of the internal ram data
\begin_inset LatexCommand \index{data}

\end_inset 

 segment.
 The value entered can be in Hexadecimal or Decimal format, eg.
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-data-loc 0x20 or -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-data-loc 32.
 (By default, the start location of the internal ram data segment  is set
 as low as possible in memory, taking into account the used register banks
 and the bit segment at address 0x20.
 For example if register banks 0 and 1 are used without bit variables, the
 data segment will be set, if -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-data-loc is not used, to location 0x10.)
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-idata-loc
\series default 

\begin_inset LatexCommand \index{-\/-idata-loc <Value>}

\end_inset 

\SpecialChar ~
<Value> The start location of the indirectly addressable internal ram
\begin_inset LatexCommand \index{idata}

\end_inset 

 of the 8051, default value is 0x80.
 The value entered can be in Hexadecimal or Decimal format, eg.
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-idata-loc 0x88 or -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-idata-loc 136.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-bit-loc
\series default 
\SpecialChar ~
<Value> The start location of the bit
\begin_inset LatexCommand \index{bit}

\end_inset 

 addressable internal ram of the 8051.
 This is 
\emph on 
not
\emph default 
 implemented yet.
 Instead an option can be passed directly to the linker: -Wl\SpecialChar ~
-bBSEG=<Value>.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-out-fmt-ihx
\begin_inset LatexCommand \index{-\/-out-fmt-ihx}

\end_inset 


\bar under 
 
\series default 
\bar default 
The linker output (final object code) is in Intel Hex format.
\begin_inset LatexCommand \index{Intel hex format}

\end_inset 

 (This is the default option).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-out-fmt-s19
\begin_inset LatexCommand \index{-\/-out-fmt-s19}

\end_inset 


\bar under 
 
\series default 
\bar default 
The linker output (final object code) is in Motorola S19 format
\begin_inset LatexCommand \index{Motorola S19 format}

\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-Wl\SpecialChar ~
linkOption[,linkOption]
\series default 

\begin_inset LatexCommand \index{-Wl linkOption[,linkOption]}

\end_inset 

...
 Pass the linkOption to the linker.
\layout Subsection

MCS51 Options
\begin_inset LatexCommand \index{Options MCS51}

\end_inset 


\begin_inset LatexCommand \index{MCS51 options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-small
\begin_inset LatexCommand \index{-\/-model-small}

\end_inset 


\series default 
\size large 
\emph on 
 
\size default 
\emph default 
Generate code for Small Model programs see section Memory Models for more
 details.
 This is the default model.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-large
\begin_inset LatexCommand \index{-\/-model-large}

\end_inset 


\series default 
 Generate code for Large model programs see section Memory Models for more
 details.
 If this option is used all source files in the project have to be compiled
 with this option.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack
\begin_inset LatexCommand \index{-\/-xstack}

\end_inset 


\series default 
 Uses a pseudo stack in the first 256 bytes in the external ram for allocating
 variables and passing parameters.
 See section 
\begin_inset LatexCommand \ref{sub:External-Stack}

\end_inset 

\SpecialChar ~
 External Stack for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-iram-size
\series default 
\SpecialChar ~
<Value>
\begin_inset LatexCommand \index{-\/-iram-size <Value>}

\end_inset 

 Causes the linker to check if the internal ram usage is within limits of
 the given value.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xram-size
\series default 
\SpecialChar ~
<Value>
\begin_inset LatexCommand \index{-\/-xram-size <Value>}

\end_inset 

 Causes the linker to check if the external ram usage is within limits of
 the given value.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-size
\series default 
\SpecialChar ~
<Value>
\begin_inset LatexCommand \index{-\/-code-size <Value>}

\end_inset 

 Causes the linker to check if the code memory usage is within limits of
 the given value.
\layout Subsection

DS390 Options
\begin_inset LatexCommand \index{Options DS390}

\end_inset 


\begin_inset LatexCommand \index{DS390 options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-flat24
\series default 

\begin_inset LatexCommand \index{-\/-model-flat24}

\end_inset 


\size large 
\emph on 
 
\size default 
\emph default 
Generate 24-bit flat mode code.
 This is the one and only that the ds390 code generator supports right now
 and is default when using 
\emph on 
-mds390
\emph default 
.
 See section Memory Models for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-protect-sp-update
\begin_inset LatexCommand \index{-\/-protect-sp-update}

\end_inset 


\series default 
 disable interrupts during ESP:SP updates
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-10bit
\series default 

\begin_inset LatexCommand \index{-\/-stack-10bit}

\end_inset 

 Generate code for the 10 bit stack mode of the Dallas DS80C390 part.
 This is the one and only that the ds390 code generator supports right now
 and is default when using 
\emph on 
-mds390
\emph default 
.
 In this mode, the stack is located in the lower 1K of the internal RAM,
 which is mapped to 0x400000.
 Note that the support is incomplete, since it still uses a single byte
 as the stack pointer.
 This means that only the lower 256 bytes of the potential 1K stack space
 will actually be used.
 However, this does allow you to reclaim the precious 256 bytes of low RAM
 for use for the DATA and IDATA segments.
 The compiler will not generate any code to put the processor into 10 bit
 stack mode.
 It is important to ensure that the processor is in this mode before calling
 any re-entrant functions compiled with this option.
 In principle, this should work with the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 


\emph default 
 option, but that has not been tested.
 It is incompatible with the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack
\begin_inset LatexCommand \index{-\/-xstack}

\end_inset 


\emph default 
 option.
 It also only makes sense if the processor is in 24 bit contiguous addressing
 mode (see the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-flat24 option
\emph default 
).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-probe
\begin_inset LatexCommand \index{-\/-stack-probe}

\end_inset 


\series default 
 insert call to function __stack_probe at each function prologue 
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-tini-libid
\begin_inset LatexCommand \index{-\/-tini-libid}

\end_inset 


\series default 
 <nnnn> LibraryID used in -mTININative 
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-use-accelerator
\begin_inset LatexCommand \index{-\/-use-accelerator}

\end_inset 


\series default 
 generate code for DS390 Arithmetic Accelerator 
\layout Subsection

Z80 Options
\begin_inset LatexCommand \index{Options Z80}

\end_inset 


\begin_inset LatexCommand \index{Z80 options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-callee-saves-bc
\series default 

\begin_inset LatexCommand \index{-\/-callee-saves-bc}

\end_inset 


\size large 
\emph on 
 
\size default 
\emph default 
Force a called function to always save BC.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-no-std-crt0
\series default 

\begin_inset LatexCommand \index{-\/-no-std-crt0}

\end_inset 

 When linking, skip the standard crt0.o object file.
 You must provide your own crt0.o for your system when linking.
 
\layout Subsection

Optimization Options
\begin_inset LatexCommand \index{Options optimization}

\end_inset 


\begin_inset LatexCommand \index{Optimization options}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nogcse
\begin_inset LatexCommand \index{-\/-nogcse}

\end_inset 


\series default 
 Will not do global subexpression elimination, this option may be used when
 the compiler creates undesirably large stack/data spaces to store compiler
 temporaries.
 A warning message will be generated when this happens and the compiler
 will indicate the number of extra bytes it allocated.
 It recommended that this option NOT be used, #pragma\SpecialChar ~
NOGCSE
\begin_inset LatexCommand \index{\#pragma NOGCSE}

\end_inset 

 can be used to turn off global subexpression elimination
\begin_inset LatexCommand \index{Subexpression elimination}

\end_inset 

 for a given function only.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-noinvariant
\begin_inset LatexCommand \index{-\/-noinvariant}

\end_inset 


\series default 
 Will not do loop invariant optimizations, this may be turned off for reasons
 explained for the previous option.
 For more details of loop optimizations performed see section Loop Invariants.It
 recommended that this option NOT be used, #pragma\SpecialChar ~
NOINVARIANT
\begin_inset LatexCommand \index{\#pragma NOINVARIANT}

\end_inset 

 can be used to turn off invariant optimizations for a given function only.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-noinduction
\begin_inset LatexCommand \index{-\/-noinduction}

\end_inset 


\series default 
 Will not do loop induction optimizations, see section strength reduction
 for more details.It is recommended that this option is NOT used, #pragma\SpecialChar ~
NOINDUCT
ION
\begin_inset LatexCommand \index{\#pragma NOINDUCTION}

\end_inset 

 can be used to turn off induction optimizations for a given function only.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nojtbound
\begin_inset LatexCommand \index{-\/-nojtbound}

\end_inset 


\size large 
\bar under 
 
\series default 
\size default 
\bar default 
 Will not generate boundary condition check when switch statements
\begin_inset LatexCommand \index{switch statement}

\end_inset 

 are implemented using jump-tables.
 See section 
\begin_inset LatexCommand \ref{sub:'switch'-Statements}

\end_inset 

\SpecialChar ~
Switch Statements for more details.
 It is recommended that this option is NOT used, #pragma\SpecialChar ~
NOJTBOUND
\begin_inset LatexCommand \index{\#pragma NOJTBOUND}

\end_inset 

 can be used to turn off boundary checking for jump tables for a given function
 only.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-noloopreverse
\begin_inset LatexCommand \index{-\/-noloopreverse}

\end_inset 


\series default 
\size large 
 
\size default 
Will not do loop reversal 
\begin_inset LatexCommand \index{Loop reversing}

\end_inset 

optimization.
\layout List
\labelwidthstring 00.00.0000

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-
\series bold 
nolabelopt
\series default 
 
\begin_inset LatexCommand \index{-\/-nolabelopt }

\end_inset 

Will not optimize labels (makes the dumpfiles more readable).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-no-xinit-opt
\begin_inset LatexCommand \index{-\/-no-xinit-opt}

\end_inset 


\series default 
 Will not memcpy initialized data from code space into xdata space.
 This saves a few bytes in code space if you don't have initialized data.
\layout Subsection

Other Options
\begin_inset LatexCommand \index{Options other}

\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
-c\SpecialChar ~
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-compile-only
\begin_inset LatexCommand \index{-\/-compile-only}

\end_inset 


\begin_inset LatexCommand \index{-c -\/-compile-only}

\end_inset 


\series default 
 will compile and assemble the source, but will not call the linkage editor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series bold 
-c1mode
\begin_inset LatexCommand \index{-\/-c1mode}

\end_inset 


\series default 
 reads the preprocessed source from standard input and compiles it.
 The file name for the assembler output must be specified using the -o option.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-E
\begin_inset LatexCommand \index{-E}

\end_inset 


\series default 
 Run only the C preprocessor.
 Preprocess all the C source files specified and output the results to standard
 output.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-o\SpecialChar ~
<path/file>
\begin_inset LatexCommand \index{-o <path/file>}

\end_inset 

 
\series default 
The output path resp.
 file where everything will be placed.
 If the parameter is a path, it must have a trailing slash (or backslash
 for the Windows binaries) to be recognized as a path.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 


\series default 
\size large 
\emph on 
 
\size default 
\emph default 
All functions in the source file will be compiled as 
\emph on 
reentrant
\emph default 

\begin_inset LatexCommand \index{reentrant}

\end_inset 

, i.e.
 the parameters and local variables will be allocated on the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

.
 see section Parameters and Local Variables for more details.
 If this option is used all source files in the project should be compiled
 with this option.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-callee-saves
\begin_inset LatexCommand \index{-\/-callee-saves}

\end_inset 

 function1[,function2][,function3]....

\series default 
 The compiler by default uses a caller saves convention for register saving
 across function calls, however this can cause unnecessary register pushing
 & popping when calling small functions from larger functions.
 This option can be used to switch the register saving convention for the
 function names specified.
 The compiler will not save registers when calling these functions, no extra
 code will be generated at the entry & exit (function prologue
\series bold 

\begin_inset LatexCommand \index{function prologue}

\end_inset 


\series default 
 & epilogue
\series bold 

\begin_inset LatexCommand \index{function epilogue}

\end_inset 


\series default 
) for these functions to save & restore the registers used by these functions,
 this can SUBSTANTIALLY reduce code & improve run time performance of the
 generated code.
 In the future the compiler (with inter procedural analysis) will be able
 to determine the appropriate scheme to use for each function call.
 DO NOT use this option for built-in functions such as _mulint..., if this
 option is used for a library function the appropriate library function
 needs to be recompiled with the same option.
 If the project consists of multiple source files then all the source file
 should be compiled with the same -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-callee-saves option string.
 Also see #pragma\SpecialChar ~
CALLEE-SAVES
\begin_inset LatexCommand \index{\#pragma CALLEE-SAVES}

\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-debug
\begin_inset LatexCommand \index{-\/-debug}

\end_inset 


\bar under 
 
\series default 
\bar default 
When this option is used the compiler will generate debug information, that
 can be used with the SDCDB.
 The debug information is collected in a file with .cdb extension.
 For more information see documentation for SDCDB.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-S
\begin_inset LatexCommand \index{-S}

\end_inset 


\size large 
\bar under 
 
\series default 
\size default 
\bar default 
Stop after the stage of compilation proper; do not assemble.
 The output is an assembler code file for the input file specified.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-int-long-reent
\begin_inset LatexCommand \index{-\/-int-long-reent}

\end_inset 


\series default 
 Integer (16 bit) and long (32 bit) libraries have been compiled as reentrant.
 Note by default these libraries are compiled as non-reentrant.
 See section Installation for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-cyclomatic
\begin_inset LatexCommand \index{-\/-cyclomatic}

\end_inset 


\bar under 
 
\series default 
\bar default 
This option will cause the compiler to generate an information message for
 each function in the source file.
 The message contains some 
\emph on 
important
\emph default 
 information about the function.
 The number of edges and nodes the compiler detected in the control flow
 graph of the function, and most importantly the 
\emph on 
cyclomatic complexity
\begin_inset LatexCommand \index{Cyclomatic complexity}

\end_inset 


\emph default 
 see section on Cyclomatic Complexity for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-float-reent
\begin_inset LatexCommand \index{-\/-float-reent}

\end_inset 


\bar under 
 
\series default 
\bar default 
 Floating point library is compiled as reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

.
 See section Installation for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nooverlay
\begin_inset LatexCommand \index{-\/-nooverlay}

\end_inset 


\series default 
  The compiler will not overlay parameters and local variables of any function,
 see section Parameters and local variables for more details.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-main-return
\begin_inset LatexCommand \index{-\/-main-return}

\end_inset 


\series default 
 This option can be used when the code generated is called by a monitor
 program.
 The compiler will generate a 'ret' upon return from the 'main'
\begin_inset LatexCommand \index{main return}

\end_inset 

 function.
 The default setting is to lock up i.e.
 generate a '
\family typewriter 
ljmp .
\family default 
'.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-peep-file
\series default 

\begin_inset LatexCommand \index{-\/-peep-file}

\end_inset 

\SpecialChar ~
<filename> This option can be used to use additional rules to be used by
 the peep hole optimizer.
 See section 
\begin_inset LatexCommand \ref{sub:Peephole-Optimizer}

\end_inset 

\SpecialChar ~
Peep Hole optimizations for details on how to write these rules.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-no-peep
\begin_inset LatexCommand \index{-\/-no-peep}

\end_inset 


\series default 
 Disable peep-hole optimization.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-peep-asm
\begin_inset LatexCommand \index{-\/-peep-asm}

\end_inset 


\series default 
  Pass the inline assembler code through the peep hole optimizer.
 This can cause unexpected changes to inline assembler code, please go through
 the peephole optimizer
\begin_inset LatexCommand \index{Peephole optimizer}

\end_inset 

 rules defined in the source file tree '<target>/peeph.def' before using
 this option.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nostdincl
\begin_inset LatexCommand \index{-\/-nostdincl}

\end_inset 


\series default 
 This will prevent the compiler from passing on the default include path
 to the preprocessor.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-nostdlib
\begin_inset LatexCommand \index{-\/-nostdlib}

\end_inset 


\series default 
 This will prevent the compiler from passing on the default library
\begin_inset LatexCommand \index{Libraries}

\end_inset 

 path to the linker.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-verbose
\begin_inset LatexCommand \index{-\/-verbose}

\end_inset 


\series default 
 Shows the various actions the compiler is performing.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-V
\begin_inset LatexCommand \index{-V}

\end_inset 


\series default 
 Shows the actual commands the compiler is executing.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-no-c-code-in-asm
\begin_inset LatexCommand \index{-\/-no-c-code-in-asm}

\end_inset 


\series default 
 Hides your ugly and inefficient c-code from the asm file, so you can always
 blame the compiler :).
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-i-code-in-asm
\begin_inset LatexCommand \index{-\/-i-code-in-asm}

\end_inset 


\series default 
 Include i-codes in the asm file.
 Sounds like noise but is most helpful for debugging the compiler itself.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-less-pedantic
\begin_inset LatexCommand \index{-\/-less-pedantic}

\end_inset 


\series default 
 Disable some of the more pedantic warnings
\begin_inset LatexCommand \index{Warnings}

\end_inset 

 (jwk burps: please be more specific here, please!).
 If you want rather more than less warnings you should consider using a
 separate tool dedicated to syntax checking like 
\begin_inset LatexCommand \url{www.splint.org}

\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-print-search-dirs
\begin_inset LatexCommand \index{-\/-print-search-dirs}

\end_inset 


\series default 
 Display the directories in the compiler's search path
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-vc
\begin_inset LatexCommand \index{-\/-vc}

\end_inset 


\series default 
 Display errors and warnings using MSVC style, so you can use SDCC with
 visual studio.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-use-stdout
\begin_inset LatexCommand \index{-\/-use-stdout}

\end_inset 


\series default 
 Send errors and warnings to stdout instead of stderr.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-Wa\SpecialChar ~
asmOption[,asmOption]
\series default 

\begin_inset LatexCommand \index{-Wa asmOption[,asmOption]}

\end_inset 

...
 Pass the asmOption to the assembler.
\layout Subsection

Intermediate Dump Options
\begin_inset LatexCommand \label{sub:Intermediate-Dump-Options}

\end_inset 


\begin_inset LatexCommand \index{Options intermediate dump}

\end_inset 


\begin_inset LatexCommand \index{Intermediate dump options}

\end_inset 


\layout Standard

The following options are provided for the purpose of retargetting and debugging
 the compiler.
 These provided a means to dump the intermediate code (iCode
\begin_inset LatexCommand \index{iCode}

\end_inset 

) generated by the compiler in human readable form at various stages of
 the compilation process.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpraw
\begin_inset LatexCommand \index{-\/-dumpraw}

\end_inset 


\series default 
 This option will cause the compiler to dump the intermediate code into
 a file of named 
\emph on 
<source filename>.dumpraw
\emph default 
 just after the intermediate code has been generated for a function, i.e.
 before any optimizations are done.
 The basic blocks
\begin_inset LatexCommand \index{Basic blocks}

\end_inset 

 at this stage ordered in the depth first number, so they may not be in
 sequence of execution.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpgcse
\begin_inset LatexCommand \index{-\/-dumpgcse}

\end_inset 


\series default 
 Will create a dump of iCode's, after global subexpression elimination
\begin_inset LatexCommand \index{Global subexpression elimination}

\end_inset 

, into a file named 
\emph on 
<source filename>.dumpgcse.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpdeadcode
\begin_inset LatexCommand \index{-\/-dumpdeadcode}

\end_inset 


\series default 
 Will create a dump of iCode's, after deadcode elimination
\begin_inset LatexCommand \index{Dead-code elimination}

\end_inset 

, into a file named 
\emph on 
<source filename>.dumpdeadcode.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumploop
\begin_inset LatexCommand \index{-\/-dumploop}

\end_inset 


\series default 
\size large 
 
\size default 
Will create a dump of iCode's, after loop optimizations
\begin_inset LatexCommand \index{Loop optimization}

\end_inset 

, into a file named 
\emph on 
<source filename>.dumploop.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumprange
\begin_inset LatexCommand \index{-\/-dumprange}

\end_inset 


\series default 
\size large 
 
\size default 
Will create a dump of iCode's, after live range analysis
\begin_inset LatexCommand \index{Live range analysis}

\end_inset 

, into a file named 
\emph on 
<source filename>.dumprange.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumlrange
\begin_inset LatexCommand \index{-\/-dumlrange}

\end_inset 


\series default 
 Will dump the life ranges
\begin_inset LatexCommand \index{Live range analysis}

\end_inset 

 for all symbols.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpregassign
\begin_inset LatexCommand \index{-\/-dumpregassign}

\end_inset 


\bar under 
 
\series default 
\bar default 
Will create a dump of iCode's, after register assignment
\begin_inset LatexCommand \index{Register assignment}

\end_inset 

, into a file named 
\emph on 
<source filename>.dumprassgn.
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumplrange
\begin_inset LatexCommand \index{-\/-dumplrange}

\end_inset 


\series default 
 Will create a dump of the live ranges of iTemp's
\layout List
\labelwidthstring 00.00.0000


\series bold 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpall
\begin_inset LatexCommand \index{-\/-dumpall}

\end_inset 


\size large 
\bar under 
 
\series default 
\size default 
\bar default 
Will cause all the above mentioned dumps to be created.
\layout Subsection

Redirecting output on Windows Shells
\layout Standard

By default SDCC writes it's error messages to 
\begin_inset Quotes sld
\end_inset 

standard error
\begin_inset Quotes srd
\end_inset 

.
 To force all messages to 
\begin_inset Quotes sld
\end_inset 

standard output
\begin_inset Quotes srd
\end_inset 

 use 
\series bold 
-
\series default 
\emph on 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series bold 
\emph default 
-
\series default 
use-stdout
\begin_inset LatexCommand \index{-\/-use-stdout}

\end_inset 

.
 Aditionaly, if you happen to have visual studio installed in your windows
 machine, you can use it to compile your sources using a custom build and
 the SDCC -
\emph on 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\emph default 
-vc
\begin_inset LatexCommand \index{-\/-vc}

\end_inset 

 option.
 Something like this should work:
\newline 

\newline 

\series bold 
c:
\backslash 
sdcc
\backslash 
bin
\backslash 
sdcc.exe -
\series default 
\emph on 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series bold 
\emph default 
-vc -
\series default 
\emph on 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series bold 
\emph default 
-model-large -c $(InputPath)
\layout Section

Environment variables
\begin_inset LatexCommand \index{Environment variables}

\end_inset 


\layout Standard

SDCC recognizes the following environment variables:
\layout List
\labelwidthstring 00.00.0000


\series bold 
SDCC_LEAVE_SIGNALS
\begin_inset LatexCommand \index{SDCC\_LEAVE\_SIGNALS}

\end_inset 


\series default 
 SDCC installs a signal handler
\begin_inset LatexCommand \index{signal handler}

\end_inset 

 to be able to delete temporary files after an user break (^C) or an exception.
 If this environment variable is set, SDCC won't install the signal handler
 in order to be able to debug SDCC.
\layout List
\labelwidthstring 00.00.0000


\series bold 
TMP,\SpecialChar ~
TEMP,\SpecialChar ~
TMPDIR
\begin_inset LatexCommand \index{TMP, TEMP, TMPDIR}

\end_inset 


\series default 
 Path, where temporary files will be created.
 The order of the variables is the search order.
 In a standard *nix environment these variables are not set, and there's
 no need to set them.
 On Windows it's recommended to set one of them.
\layout List
\labelwidthstring 00.00.0000


\series bold 
SDCC_HOME
\begin_inset LatexCommand \index{SDCC\_HOME}

\end_inset 


\series default 
 Path, see section 
\begin_inset LatexCommand \ref{sub:Install-paths}

\end_inset 

\SpecialChar ~

\begin_inset Quotes sld
\end_inset 

 Install Paths
\begin_inset Quotes srd
\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\series bold 
SDCC_INCLUDE
\begin_inset LatexCommand \index{SDCC\_INCLUDE}

\end_inset 


\series default 
 Path, see section 
\begin_inset LatexCommand \ref{sub:Search-Paths}

\end_inset 

\SpecialChar ~

\begin_inset Quotes sld
\end_inset 

Search Paths
\begin_inset Quotes srd
\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\series bold 
SDCC_LIB
\begin_inset LatexCommand \index{SDCC\_LIB}

\end_inset 


\series default 
 Path, see section 
\begin_inset LatexCommand \ref{sub:Search-Paths}

\end_inset 

\SpecialChar ~

\begin_inset Quotes sld
\end_inset 

Search Paths
\begin_inset Quotes srd
\end_inset 

..
\layout Standard

There are some more environment variables recognized by SDCC, but these
 are solely used for debugging purposes.
 They can change or disappear very quickly, and will never be documented.
\layout Section

Storage Class Language Extensions
\layout Subsection

MCS51/DS390 Storage Class
\begin_inset LatexCommand \index{Storage class}

\end_inset 

 Language Extensions
\layout Standard

In addition to the ANSI storage classes SDCC allows the following MCS51
 specific storage classes:
\layout Subsubsection

data
\begin_inset LatexCommand \index{data}

\end_inset 


\layout Standard

This is the 
\series bold 
default
\series default 
 storage class for the Small Memory model.
 Variables declared with this storage class will be allocated in the directly
 addressable portion of the internal RAM of a 8051, e.g.:
\layout Verse


\family typewriter 
data unsigned char test_data;
\layout Standard

Writing 0x01 to this variable generates the assembly code:
\layout Verse


\family typewriter 
75*00 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
_test_data,#0x01 
\layout Subsubsection

xdata
\begin_inset LatexCommand \index{xdata}

\end_inset 


\layout Standard

Variables declared with this storage class will be placed in the external
 RAM.
 This is the 
\series bold 
default
\series default 
 storage class for the Large Memory model, e.g.:
\layout Verse


\family typewriter 
xdata unsigned char test_xdata;
\layout Standard

Writing 0x01 to this variable generates the assembly code:
\layout Verse


\family typewriter 
90s00r00\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
dptr,#_test_xdata 
\newline 
74\SpecialChar ~
01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
a,#0x01 
\newline 
F0\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movx\SpecialChar ~
@dptr,a 
\layout Subsubsection

idata
\begin_inset LatexCommand \index{idata}

\end_inset 


\layout Standard

Variables declared with this storage class will be allocated into the indirectly
 addressable portion of the internal ram of a 8051, e.g.:
\layout Verse


\family typewriter 
idata unsigned char test_idata;
\layout Standard

Writing 0x01 to this variable generates the assembly code:
\layout Verse


\family typewriter 
78r00\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
r0,#_test_idata
\newline 
76\SpecialChar ~
01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
@r0,#0x01
\layout Standard

Please note, the first 128 byte of idata physically access the same RAM
 as the data memory.
 The original 8051 had 128 byte idata memory, nowadays most devices have
 256 byte idata memory.
 The stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 is located in idata memory.
\layout Subsubsection

pdata
\begin_inset LatexCommand \index{pdata}

\end_inset 


\layout Standard

Paged xdata access is currently not as straightforward as using the other
 addressing modes of a 8051.
 The following example writes 0x01 to the address pointed to.
 Please note, pdata access physically accesses xdata memory.
 The high byte of the address is determined by port P2 (or in case of some
 8051 variants by a separate Special Function Register, see section
\begin_inset LatexCommand \ref{sub:MCS51-variants}

\end_inset 

).
\layout Verse


\family typewriter 
pdata unsigned char *test_pdata_ptr;
\newline 

\newline 
void main() 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
test_pdata_ptr = (pdata *)0xfe; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
*test_pdata_ptr = 1; 
\newline 
} 
\layout Standard

Generates the assembly code:
\layout Verse


\family typewriter 
75*01 FE\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 _test_pdata_ptr,#0xFE
\newline 
78 FE\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 r0,#0xFE 
\newline 
74 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 a,#0x01
\newline 
F2\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movx @r0,a 
\layout Standard

Be extremely carefull if you use pdata together with the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack
\begin_inset LatexCommand \index{-\/-xstack}

\end_inset 

 option.
\layout Subsubsection

code
\begin_inset LatexCommand \index{code}

\end_inset 


\layout Standard

'Variables' declared with this storage class will be placed in the code
 memory:
\layout Verse


\family typewriter 
code unsigned char test_code;
\layout Standard

Read access to this variable generates the assembly code:
\layout Verse


\family typewriter 
90s00r6F\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov dptr,#_test_code
\newline 
E4\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
clr a
\newline 
93\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movc a,@a+dptr 
\layout Standard


\family typewriter 
char
\family default 
 indexed arrays of characters in code memory can be accessed efficiently:
\layout Verse


\family typewriter 
code char test_array[] = {'c','h','e','a','p'}; 
\layout Standard

Read access to this array using an 8-bit index generates the assembly code:
\layout Verse


\family typewriter 
E5*00\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov a,_index 
\layout Verse


\family typewriter 
90s00r41\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov dptr,#_test_array
\layout Verse


\family typewriter 
93\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movc a,@a+dptr 
\layout Subsubsection

bit
\begin_inset LatexCommand \index{bit}

\end_inset 


\layout Standard

This is a data-type and a storage class specifier.
 When a variable is declared as a bit, it is allocated into the bit addressable
 memory of 8051, e.g.:
\layout Verse


\family typewriter 
bit test_bit;
\layout Standard

Writing 1 to this variable generates the assembly code:
\layout Verse


\family typewriter 
D2*00\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
setb\SpecialChar ~
_test_bit
\layout Standard

The bit addressable memory consists of 128 bits which are located from 0x20
 to 0x2f in data memory.
 
\layout Standard

Apart from this 8051 specific storage class most architectures support ANSI-C
 bitfields
\begin_inset LatexCommand \index{bitfields}

\end_inset 

 
\begin_inset Foot
collapsed false

\layout Standard

Not really meant as examples, but nevertheless showing what bitfields are
 about: device/include/mc68hc908qy.h and support/regression/tests/bitfields.c
\end_inset 

.
\layout Subsubsection

sfr
\begin_inset LatexCommand \index{sfr}

\end_inset 

 / sbit
\begin_inset LatexCommand \index{sbit}

\end_inset 


\layout Standard

Like the bit keyword, 
\emph on 
sfr / sbit 
\emph default 
signifies both a data-type and storage class, they are used to describe
 the 
\emph on 
s
\emph default 
pecial 
\emph on 
f
\emph default 
unction 
\emph on 
r
\emph default 
egisters and 
\emph on 
s
\emph default 
pecial 
\emph on 
bit
\emph default 
 variables of a 8051, eg:
\layout Verse


\family typewriter 
sfr at
\begin_inset LatexCommand \index{at}

\end_inset 

 0x80 P0;\SpecialChar ~
 /* special function register P0 at location 0x80 */
\newline 
sbit at 0xd7 CY; /* CY (Carry Flag
\begin_inset LatexCommand \index{Flags}

\end_inset 


\begin_inset LatexCommand \index{Carry flag}

\end_inset 

) */
\layout Standard

Special function registers which are located on an address dividable by
 8 are bit-addressable, an
\emph on 
 sbit
\emph default 
 addresses a specific bit within these sfr.
\layout Subsubsection

Pointers
\begin_inset LatexCommand \index{Pointers}

\end_inset 

 to MCS51/DS390 specific memory spaces
\layout Standard

SDCC allows (via language extensions) pointers to explicitly point to any
 of the memory spaces
\begin_inset LatexCommand \index{Memory model}

\end_inset 

 of the 8051.
 In addition to the explicit pointers, the compiler uses (by default) generic
 pointers which can be used to point to any of the memory spaces.
\newline 

\newline 
Pointer declaration examples:
\layout Verse


\family typewriter 
/* pointer physically in internal ram pointing to object in external ram
 */ 
\newline 
xdata unsigned char * data p;
\newline 

\newline 
/* pointer physically in external ram pointing to object in internal ram
 */ 
\newline 
data unsigned char * xdata p;
\newline 

\newline 
/* pointer physically in code rom pointing to data in xdata space */ 
\newline 
xdata unsigned char * code p;
\newline 

\newline 
/* pointer physically in code space pointing to data in code space */ 
\newline 
code unsigned char * code p;
\newline 

\newline 
/* the following is a generic pointer physically located in xdata space
 */
\newline 
char * xdata p;
\layout Standard

Well you get the idea.
 
\newline 

\newline 
All unqualified pointers are treated as 3-byte (4-byte for the ds390) 
\emph on 
generic
\emph default 
 pointers.
 
\size small 

\newline 

\newline 

\size default 
The highest order byte of the 
\emph on 
generic
\emph default 
 pointers contains the data space information.
 Assembler support routines are called whenever data is stored or retrieved
 using 
\emph on 
generic
\emph default 
 pointers.
 These are useful for developing reusable library
\begin_inset LatexCommand \index{Libraries}

\end_inset 

 routines.
 Explicitly specifying the pointer type will generate the most efficient
 code.
\layout Subsection

Z80/Z180 Storage Class
\begin_inset LatexCommand \index{Storage class}

\end_inset 

 Language Extensions
\layout Subsubsection

sfr
\begin_inset LatexCommand \index{sfr}

\end_inset 

 (in/out to 8-bit addresses)
\layout Standard

The Z80
\begin_inset LatexCommand \index{Z80}

\end_inset 

 family has separate address spaces for memory and 
\emph on 
i
\emph default 
nput/
\emph on 
o
\emph default 
utput memory.
 I/O memory
\begin_inset LatexCommand \index{I/O memory (Z80/Z180)}

\end_inset 

 is accessed with special instructions, e.g.:
\layout Verse


\family typewriter 
sfr at 0x78 IoPort;\SpecialChar ~
\SpecialChar ~
/* define a var in I/O space at 78h called IoPort */
 
\layout Standard

Writing 0x01 to this variable generates the assembly code:
\layout Verse


\family typewriter 
3E 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ld a,#0x01
\newline 
D3 78\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
out (_IoPort),a 
\layout Subsubsection

banked sfr
\begin_inset LatexCommand \index{sfr}

\end_inset 

 (in/out to 16-bit addresses)
\layout Standard

The keyword 
\emph on 
banked
\emph default 
 is used to support 16 bit addresses in I/O memory e.g.:
\layout Verse


\family typewriter 
sfr banked at 0x123 IoPort; 
\layout Standard

Writing 0x01 to this variable generates the assembly code:
\layout Verse


\family typewriter 
01 23 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ld bc,#_IoPort
\newline 
3E 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ld a,#0x01 
\newline 
ED 79\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
out (c),a 
\layout Subsubsection

sfr
\begin_inset LatexCommand \index{sfr}

\end_inset 

 (in0/out0 to 8 bit addresses on Z180
\begin_inset LatexCommand \index{Z180}

\end_inset 

/HD64180
\begin_inset LatexCommand \index{HD64180}

\end_inset 

)
\layout Standard

The compiler option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-portmode=180 (80) and a compiler #pragma\SpecialChar ~
portmode
\begin_inset LatexCommand \index{\#pragma portmode}

\end_inset 

=z180 (z80) is used to turn on (off) the Z180/HD64180 port addressing instructio
ns 
\family typewriter 
in0/out0
\family default 
 instead of 
\family typewriter 
in/out
\family default 
.
 If you include the file z180.h this will be set automatically.
\layout Section

Absolute Addressing
\begin_inset LatexCommand \index{Absolute addressing}

\end_inset 


\layout Standard

Data items can be assigned an absolute address with the 
\emph on 
at
\begin_inset LatexCommand \index{at}

\end_inset 

 <address>
\emph default 
 keyword, in addition to a storage class, e.g.:
\layout Verse


\family typewriter 
xdata
\begin_inset LatexCommand \index{xdata}

\end_inset 

 at
\begin_inset LatexCommand \index{at}

\end_inset 

 0x7ffe unsigned int chksum;
\layout Standard

In the above example the variable chksum will located at 0x7ffe and 0x7fff
 of the external ram.
 The compiler does 
\emph on 
not
\emph default 
 reserve any space for variables declared in this way (they are implemented
 with an equate in the assembler).
 Thus it is left to the programmer to make sure there are no overlaps with
 other variables that are declared without the absolute address.
 The assembler listing file (.lst
\begin_inset LatexCommand \index{<file>.lst}

\end_inset 

) and the linker output files (.rst
\begin_inset LatexCommand \index{<file>.rst}

\end_inset 

) and (.map
\begin_inset LatexCommand \index{<file>.map}

\end_inset 

) are good places to look for such overlaps.
 Variables with an absolute address are 
\emph on 
not
\emph default 
 initialized.
\layout Standard

In case of memory mapped I/O devices the keyword 
\emph on 
volatile
\emph default 
 should be used to tell the compiler that accesses might not be optimized
 away:
\layout Verse


\family typewriter 
volatile
\begin_inset LatexCommand \index{volatile}

\end_inset 

 xdata
\begin_inset LatexCommand \index{xdata}

\end_inset 

 at
\begin_inset LatexCommand \index{at}

\end_inset 

 0x8000 unsigned char PORTA_8255;
\layout Standard

Absolute address can be specified for variables in all storage classes,
 e.g.:
\layout Verse


\family typewriter 
bit
\begin_inset LatexCommand \index{bit}

\end_inset 

 at
\begin_inset LatexCommand \index{at}

\end_inset 

 0x02 bvar;
\layout Standard

The above example will allocate the variable at offset 0x02 in the bit-addressab
le space.
 There is no real advantage to assigning absolute addresses to variables
 in this manner, unless you want strict control over all the variables allocated.
 One possible use would be to write hardware portable code.
 For example, if you have a routine that uses one or more of the microcontroller
 I/O pins, and such pins are different for two different hardwares, you
 can declare the I/O pins in your routine using:
\layout Verse


\family typewriter 
extern volatile bit SDI;
\newline 
extern volatile bit SCLK;
\newline 
extern volatile bit CPOL;
\newline 

\newline 
void DS1306_put(unsigned char value)
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
unsigned char mask=0x80;
\newline 

\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
while(mask)
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDI=(value & mask)?1:0;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SCLK=!CPOL;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SCLK=CPOL;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mask/=2;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
}
\newline 
}
\layout Standard

Then, someplace in the code for the first hardware you would use
\layout Verse


\family typewriter 
bit at 0x80 SDI;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* I/O port 0, bit 0 */
\newline 
bit at 0x81 SCLK;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* I/O port 0, bit 1 */
\newline 
bit CPOL;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* This is a variable, let the linker allocate this one */
\layout Standard

Similarly, for the second hardware you would use
\layout Verse


\family typewriter 
bit at 0x83 SDI;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* I/O port 0, bit 3 */
\newline 
bit at 0x91 SCLK;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* I/O port 1, bit 1 */
\newline 
bit
\begin_inset LatexCommand \index{bit}

\end_inset 

 CPOL;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* This is a variable, let the linker allocate this one */
\layout Standard

and you can use the same hardware dependent routine without changes, as
 for example in a library.
 This is somehow similar to sbit, but only one absolute address has to be
 specified in the whole project.
\layout Section

Parameters
\begin_inset LatexCommand \index{Parameters}

\end_inset 


\begin_inset LatexCommand \index{function parameter}

\end_inset 

 & Local Variables
\begin_inset LatexCommand \index{Local variable}

\end_inset 


\layout Standard

Automatic (local) variables and parameters to functions can either be placed
 on the stack or in data-space.
 The default action of the compiler is to place these variables in the internal
 RAM (for small model) or external RAM (for large model).
 This in fact makes them similar to 
\emph on 
static
\begin_inset LatexCommand \index{static}

\end_inset 


\emph default 
 so by default functions are non-reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

.
 
\newline 

\newline 
They can be placed on the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 either by using the
\emph on 
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 


\emph default 
 option or by using the 
\emph on 
reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 


\emph default 
 keyword in the function declaration, e.g.:
\layout Verse


\family typewriter 
unsigned char foo(char i) reentrant 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\layout Standard

Since stack space on 8051 is limited, the 
\emph on 
reentrant 
\emph default 
keyword or the
\emph on 
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\emph default 
 option should be used sparingly.
 Note that the reentrant keyword just means that the parameters & local
 variables will be allocated to the stack, it 
\emph on 
does not
\emph default 
 mean that the function is register bank independent.
\newline 

\newline 
Local variables can be assigned storage classes and absolute
\begin_inset LatexCommand \index{Absolute addressing}

\end_inset 

 addresses, e.g.: 
\layout Verse


\family typewriter 
unsigned char foo() 
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
xdata unsigned char i;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
bit bvar;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
data at 0x31 unsigned char j;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\layout Standard

In the above example the variable 
\emph on 
i
\emph default 
 will be allocated in the external ram, 
\emph on 
bvar
\emph default 
 in bit addressable space and
\emph on 
 j
\emph default 
 in internal ram.
 When compiled with 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\emph default 
 or when a function is declared as 
\emph on 
reentrant
\emph default 
 this should only be done for static variables.
\layout Standard

Parameters
\begin_inset LatexCommand \index{function parameter}

\end_inset 

 however are not allowed any storage class
\begin_inset LatexCommand \index{storage class}

\end_inset 

, (storage classes for parameters will be ignored), their allocation is
 governed by the memory model in use, and the reentrancy options.
\layout Section

Overlaying
\begin_inset LatexCommand \label{sub:Overlaying}

\end_inset 


\begin_inset LatexCommand \index{Overlaying}

\end_inset 


\layout Standard

For non-reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

 functions SDCC will try to reduce internal ram space usage by overlaying
 parameters and local variables of a function (if possible).
 Parameters and local variables of a function will be allocated to an overlayabl
e segment if the function has 
\emph on 
no other function calls and the function is non-reentrant and the memory
 model
\begin_inset LatexCommand \index{Memory model}

\end_inset 

 is small.

\emph default 
 If an explicit storage class
\begin_inset LatexCommand \index{Storage class}

\end_inset 

 is specified for a local variable, it will NOT be overlayed.
\layout Standard

Note that the compiler (not the linkage editor) makes the decision for overlayin
g the data items.
 Functions that are called from an interrupt service routine should be preceded
 by a #pragma\SpecialChar ~
NOOVERLAY
\begin_inset LatexCommand \index{\#pragma NOOVERLAY}

\end_inset 

 if they are not reentrant.
\layout Standard

Also note that the compiler does not do any processing of inline assembler
 code, so the compiler might incorrectly assign local variables and parameters
 of a function into the overlay segment if the inline assembler code calls
 other c-functions that might use the overlay.
 In that case the #pragma\SpecialChar ~
NOOVERLAY should be used.
\layout Standard

Parameters and local variables of functions that contain 16 or 32 bit multiplica
tion
\begin_inset LatexCommand \index{Multiplication}

\end_inset 

 or division
\begin_inset LatexCommand \index{Division}

\end_inset 

 will NOT be overlayed since these are implemented using external functions,
 e.g.:
\layout Verse


\family typewriter 
#pragma SAVE 
\newline 
#pragma NOOVERLAY
\begin_inset LatexCommand \index{\#pragma NOOVERLAY}

\end_inset 

 
\newline 
void set_error(unsigned char errcd) 
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
P3 = errcd;
\newline 
} 
\newline 
#pragma RESTORE 
\newline 

\newline 
void some_isr () interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 2
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
set_error(10);
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\layout Standard

In the above example the parameter 
\emph on 
errcd
\emph default 
 for the function 
\emph on 
set_error
\emph default 
 would be assigned to the overlayable segment if the #pragma\SpecialChar ~
NOOVERLAY was
 not present, this could cause unpredictable runtime behavior when called
 from an ISR.
 The #pragma\SpecialChar ~
NOOVERLAY ensures that the parameters and local variables for
 the function are NOT overlayed.
\layout Section

Interrupt Service Routines
\begin_inset LatexCommand \label{sub:Interrupt-Service-Routines}

\end_inset 


\layout Standard

SDCC allows interrupt service routines to be coded in C, with some extended
 keywords.
\layout Verse


\family typewriter 
void timer_isr (void) interrupt 1 using 1 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\layout Standard

The optional number following the 
\emph on 
interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 


\emph default 
 keyword is the interrupt number this routine will service.
 When present, the compiler will insert a call to this routine in the interrupt
 vector table for the interrupt number specified.
 The 
\emph on 
using
\emph default 
 keyword can be used to tell the compiler to use the specified register
 bank (8051 specific) when generating code for this function.
 
\newline 

\layout Standard

If you have multiple source files in your project, interrupt service routines
 can be present in any of them, but a prototype of the isr MUST be present
 or included in the file that contains the function 
\emph on 
main
\emph default 
.
\layout Standard

Interrupt numbers and the corresponding address & descriptions for the Standard
 8051/8052 are listed below.
 SDCC will automatically adjust the interrupt vector table to the maximum
 interrupt number specified.
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0in">
<column alignment="center" valignment="top" leftline="true" width="0in">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Interrupt #
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector Address
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

External 0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x0003
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Timer 0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x000B
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

External 1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x0013
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Timer 1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x001B
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Serial
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x0023
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Timer 2 (8052)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

0x002B
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Standard

If the interrupt service routine is defined without 
\emph on 
using
\begin_inset LatexCommand \index{using}

\end_inset 


\emph default 
 a register bank or with register bank 0 (using 0), the compiler will save
 the registers used by itself on the stack upon entry and restore them at
 exit, however if such an interrupt service routine calls another function
 then the entire register bank will be saved on the stack.
 This scheme may be advantageous for small interrupt service routines which
 have low register usage.
\layout Standard

If the interrupt service routine is defined to be using a specific register
 bank then only 
\emph on 
a, b & dptr
\emph default 
 are save and restored, if such an interrupt service routine calls another
 function (using another register bank) then the entire register bank of
 the called function will be saved on the stack.
 This scheme is recommended for larger interrupt service routines.
\layout Standard

Using interrupts opens the door for some very interesting bugs: 
\layout Standard

If the interrupt service routines changes variables which are accessed by
 other functions these variables should be declared 
\emph on 
volatile
\emph default 

\begin_inset LatexCommand \index{volatile}

\end_inset 

.
 If the access to these variables is not 
\emph on 
atomic
\begin_inset LatexCommand \index{atomic access}

\end_inset 


\emph default 
 (i.e.
 the processor needs more than one instruction for the access and could
 be interrupted while accessing the variable) the interrupt must disabled
 during the access to avoid inconsistent data.
 Access to 16 or 32 bit variables is obviously not atomic on 8 bit CPUs
 and should be protected by disabling interrupts.
 You're not automatically on the safe side if you use 8 bit variables though.
 We need an example here: f.e.
 on the 8051 the harmless looking 
\begin_inset Quotes srd
\end_inset 


\family typewriter 
flags\SpecialChar ~
|=\SpecialChar ~
0x80;
\family default 

\begin_inset Quotes sld
\end_inset 

 is not atomic if 
\family typewriter 
flags
\family default 
 resides in xdata.
 Setting 
\begin_inset Quotes srd
\end_inset 


\family typewriter 
flags\SpecialChar ~
|=\SpecialChar ~
0x40;
\family default 

\begin_inset Quotes sld
\end_inset 

 from within an interrupt routine might get lost if the interrupt occurs
 at the wrong time.
 
\begin_inset Quotes sld
\end_inset 


\family typewriter 
counter\SpecialChar ~
+=\SpecialChar ~
8;
\family default 

\begin_inset Quotes srd
\end_inset 

 is not atomic on the 8051 even if 
\family typewriter 
counter
\family default 
 is located in data memory.
 Bugs like these are hard to reproduce and can cause a lot of trouble.
 
\layout Standard

A special note here, int (16 bit) and long (32 bit) integer division
\begin_inset LatexCommand \index{Division}

\end_inset 

, multiplication
\begin_inset LatexCommand \index{Multiplication}

\end_inset 

 & modulus
\begin_inset LatexCommand \index{Modulus}

\end_inset 

 and floating-point
\begin_inset LatexCommand \index{Floating point support}

\end_inset 

 operations are implemented using external support routines developed in
 ANSI-C.
 If an interrupt service routine needs to do any of these operations then
 the support routines (as mentioned in a following section) will have to
 be recompiled using the
\emph on 
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 


\emph default 
 option and the source file will need to be compiled using the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-int-long-reent
\emph default 

\begin_inset LatexCommand \index{-\/-int-long-reent}

\end_inset 

 compiler option.
\layout Standard

Calling other functions from an interrupt service routine is not recommended,
 avoid it if possible.
 Note that when some function is called from an interrupt service routine
 it should be preceded by a #pragma\SpecialChar ~
NOOVERLAY
\begin_inset LatexCommand \index{\#pragma NOOVERLAY}

\end_inset 

 if it is not reentrant.
 Furthermore nonreentrant functions should not be called from the main program
 while the interrupt service routine might be active.
 
\newline 

\newline 
Also see section 
\begin_inset LatexCommand \ref{sub:Overlaying}

\end_inset 

\SpecialChar ~
about Overlaying and section 
\begin_inset LatexCommand \ref{sub:Functions-using-private-banks}

\end_inset 

\SpecialChar ~
about Functions using private banks.
\layout Section

Enabling and Disabling Interrupts
\layout Subsection

Critical Functions and Critical Statements
\layout Standard

A special keyword may be associated with a function declaring it as 
\emph on 
critical
\emph default 
.
 SDCC will generate code to disable all interrupts
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 upon entry to a critical function and restore the interrupt enable to the
 previous state before returning.
 Nesting critical functions will need one additional byte on the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 for each call.
\layout Verse


\family typewriter 
int foo () critical
\begin_inset LatexCommand \index{critical}

\end_inset 

 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\layout Standard

The critical attribute maybe used with other attributes like 
\emph on 
reentrant.
\emph default 

\newline 
The keyword 
\emph on 
critical
\emph default 
 may also be used to disable interrupts more locally:
\layout Verse


\family typewriter 
critical{ i++; }
\layout Standard

More than one statement could have been included in the block.
\layout Subsection

Enabling and Disabling Interrupts directly
\layout Standard

Interrupts
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 can also be disabled and enabled directly (8051):
\layout Verse


\family typewriter 
EA = 0;
\layout Verse


\family typewriter 
...
\layout Verse


\family typewriter 
EA = 1;
\layout Standard

On other architectures which have seperate opcodes for enabling and disabling
 interrupts you might want to make use of defines with inline assembly
\begin_inset LatexCommand \index{Assembler routines}

\end_inset 

 (HC08):
\layout Verse


\family typewriter 
#define CLI _asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 

\SpecialChar ~
\SpecialChar ~
cli\SpecialChar ~
\SpecialChar ~
_endasm
\begin_inset LatexCommand \index{\_endasm}

\end_inset 

; 
\layout Verse


\family typewriter 
#define SEI _asm\SpecialChar ~
\SpecialChar ~
sei\SpecialChar ~
\SpecialChar ~
_endasm; 
\layout Verse


\family typewriter 
...
\layout Standard

Note: it is sometimes sufficient to disable only a specific interrupt source
 like f.e.
 a timer or serial interrupt by manipulating an 
\emph on 
interrupt mask
\begin_inset LatexCommand \index{interrupt mask}

\end_inset 


\emph default 
 register.
 Usually the time during which interrupts are disabled should be kept as
 short as possible.
 This minimizes both 
\emph on 
interrupt latency
\emph default 

\begin_inset LatexCommand \index{interrupt latency}

\end_inset 

 (the time between the occurrence of the interrupt and the execution of
 the first code in the interrupt routine) and 
\emph on 
interrupt jitter
\emph default 

\begin_inset LatexCommand \index{interrupt jitter}

\end_inset 

 (the difference between the shortest and the longest interrupt latency).
 These really are something different, f.e.
 a serial interrupt has to be served before its buffer overruns so it cares
 for the maximum interrupt latency, whereas it does not care about jitter.
 On a loudspeaker driven via a digital to analog converter which is fed
 by an interrupt a latency of a few milliseconds might be tolerable, whereas
 a much smaller jitter will be very audible.
\layout Standard

You can reenable interrupts within an interrupt routine and on some architecture
s you can make use of two (or more) levels of 
\emph on 
interrupt priorities
\emph default 

\begin_inset LatexCommand \index{interrupt priority}

\end_inset 

.
 On architectures which don't support interrupt priorities these can be
 implemented by manipulating the interrupt mask and reenabling interrupts
 within the interrupt routine.
 Don't add complexity unless you have to.
 
\layout Section

Functions using private banks
\begin_inset LatexCommand \label{sub:Functions-using-private-banks}

\end_inset 


\begin_inset LatexCommand \index{bank}

\end_inset 


\layout Standard

The 
\emph on 
using
\begin_inset LatexCommand \index{using}

\end_inset 


\emph default 
 attribute (which tells the compiler to use a register bank other than the
 default bank zero) should only be applied to 
\emph on 
interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 


\emph default 
 functions (see note 1 below).
 This will in most circumstances make the generated ISR code more efficient
 since it will not have to save registers on the stack.
\layout Standard

The 
\emph on 
using
\emph default 
 attribute will have no effect on the generated code for a 
\emph on 
non-interrupt
\emph default 
 function (but may occasionally be useful anyway
\begin_inset Foot
collapsed false

\layout Standard

possible exception: if a function is called ONLY from 'interrupt' functions
 using a particular bank, it can be declared with the same 'using' attribute
 as the calling 'interrupt' functions.
 For instance, if you have several ISRs using bank one, and all of them
 call memcpy(), it might make sense to create a specialized version of memcpy()
 'using 1', since this would prevent the ISR from having to save bank zero
 to the stack on entry and switch to bank zero before calling the function
\end_inset 

).
\newline 

\emph on 
(pending: I don't think this has been done yet)
\layout Standard

An 
\emph on 
interrupt
\emph default 
 function using a non-zero bank will assume that it can trash that register
 bank, and will not save it.
 Since high-priority interrupts
\begin_inset LatexCommand \index{interrupt priority}

\end_inset 

 can interrupt low-priority ones on the 8051 and friends, this means that
 if a high-priority ISR 
\emph on 
using
\emph default 
 a particular bank occurs while processing a low-priority ISR 
\emph on 
using
\emph default 
 the same bank, terrible and bad things can happen.
 To prevent this, no single register bank should be 
\emph on 
used
\emph default 
 by both a high priority and a low priority ISR.
 This is probably most easily done by having all high priority ISRs use
 one bank and all low priority ISRs use another.
 If you have an ISR which can change priority at runtime, you're on your
 own: I suggest using the default bank zero and taking the small performance
 hit.
\layout Standard

It is most efficient if your ISR calls no other functions.
 If your ISR must call other functions, it is most efficient if those functions
 use the same bank as the ISR (see note 1 below); the next best is if the
 called functions use bank zero.
 It is very inefficient to call a function using a different, non-zero bank
 from an ISR.
 
\layout Section

Startup Code
\begin_inset LatexCommand \label{sub:Startup-Code}

\end_inset 


\begin_inset LatexCommand \index{Startup code}

\end_inset 


\layout Subsection

MCS51/DS390 Startup Code
\layout Standard

The compiler inserts a call to the C routine 
\emph on 
_sdcc_external_startup()
\begin_inset LatexCommand \index{\_sdcc\_external\_startup()}

\end_inset 


\series bold 
\emph default 
 
\series default 
at the start of the CODE area.
 This routine is in the runtime library
\begin_inset LatexCommand \index{Runtime library}

\end_inset 

.
 By default this routine returns 0, if this routine returns a non-zero value,
 the static & global variable initialization will be skipped and the function
 main will be invoked.
 Otherwise static & global variables will be initialized before the function
 main is invoked.
 You could add a 
\emph on 
_sdcc_external_startup()
\emph default 
 routine to your program to override the default if you need to setup hardware
 or perform some other critical operation prior to static & global variable
 initialization.
 On some mcs51 variants xdata has to be explicitly enabled before it can
 be accessed, this is the place to do it.
 See also the compiler option 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-no-xinit
\emph default 
-
\emph on 
opt
\emph default 

\begin_inset LatexCommand \index{-\/-no-xinit-opt}

\end_inset 

 and section 
\begin_inset LatexCommand \ref{sub:MCS51-variants}

\end_inset 

\SpecialChar ~
about MCS51-variants.
\layout Subsection

HC08 Startup Code
\layout Standard

The HC08 startup code follows the same scheme as the MCS51 startup code.
\layout Subsection

Z80 Startup Code
\layout Standard

On the Z80 the startup code is inserted by linking with crt0.o which is generated
 from sdcc/device/lib/z80/crt0.s.
 If you need a different startup code you can use the compiler option 
\emph on 
-
\series bold 
\emph default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 


\series default 
\emph on 
-no-std-crt0
\emph default 

\begin_inset LatexCommand \index{-\/-no-std-crt0}

\end_inset 

 and provide your own crt0.o.
 
\layout Section

Inline Assembler Code
\begin_inset LatexCommand \index{Assembler routines}

\end_inset 


\layout Subsection

A Step by Step Introduction
\layout Standard

Starting from a small snippet of c-code this example shows for the MCS51
 how to use inline assembly, access variables, a function parameter and
 an array in xdata memory.
 This is a buffer routine which should be optimized:
\layout Verse


\family typewriter 
\size footnotesize 
unsigned char xdata at 0x7f00 buf[0x100];
\newline 
unsigned char head,tail;
\newline 

\newline 
void to_buffer( unsigned char c ) 
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
if( head != tail-1 ) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
buf[ head++ ] = c; 
\newline 
} 
\layout Standard

If the code snippet (assume it is saved in buffer.c) is compiled with SDCC
 then a corresponding buffer.asm file is generated.
 We define a new function 
\family typewriter 
to_buffer_asm()
\family default 
 in file buffer.c in which we cut and paste the generated code, removing
 unwanted comments and some ':'.
 Then add 
\begin_inset Quotes sld
\end_inset 

_asm
\begin_inset Quotes srd
\end_inset 

 and 
\begin_inset Quotes sld
\end_inset 

_endasm;
\begin_inset Quotes srd
\end_inset 

 to the beginning and the end of the function body:
\layout Verse


\family typewriter 
\size footnotesize 
/* With a cut and paste from the .asm file, we have something to start with.
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
The function is not yet OK! (registers aren't saved) */ 
\newline 
void to_buffer_asm( unsigned char c ) 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 


\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
r2,dpl 
\newline 
;buffer.c if( head != tail-1 ) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
a,_tail 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dec\SpecialChar ~
\SpecialChar ~
a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
r3,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
a,_head 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
cjne a,ar3,00106$ 
\newline 
ret 00106$: 
\newline 
;buffer.c buf[ head++ ] = c; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
r3,_head 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
inc\SpecialChar ~
\SpecialChar ~
_head 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
a,r3 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
add\SpecialChar ~
\SpecialChar ~
a,#_buf 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
dpl,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
clr\SpecialChar ~
\SpecialChar ~
a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
addc\SpecialChar ~
a,#(_buf >> 8) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
dph,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
a,r2 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movx @dptr,a 
\newline 
00103$: 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ret
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_endasm;
\newline 
} 
\layout Standard

The new file buffer.c should compile with only one warning about the unreferenced
 function argument 'c'.
 Now we hand-optimize the assembly code and insert an #define USE_ASSEMBLY
 and finally have:
\layout Verse


\family typewriter 
\size footnotesize 
unsigned char xdata at 0x7f00 buf[0x100];
\newline 
unsigned char head,tail;
\newline 
#define USE_ASSEMBLY
\newline 

\newline 
#ifndef USE_ASSEMBLY
\newline 
void to_buffer( unsigned char c )
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
if( head != tail-1 )
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
buf[ head++ ] = c;
\newline 
}
\newline 

\newline 
#else
\newline 

\newline 
void to_buffer( unsigned char c )
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
c; // to avoid warning: unreferenced function argument
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 


\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; save used registers here.
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; If we were still using r2,r3 we would have to push them here.
 
\newline 
; if( head != tail-1 )
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 a,_tail
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dec\SpecialChar ~
 a
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
xrl\SpecialChar ~
 a,_head
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; we could do an ANL a,#0x0f here to use a smaller buffer (see below)
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
jz\SpecialChar ~
\SpecialChar ~
 t_b_end$
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
;
\newline 
; buf[ head++ ] = c;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 a,dpl \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; dpl holds lower byte of function argument
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 dpl,_head \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; buf is 0x100 byte aligned so head can be used directly
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
 dph,#(_buf>>8)
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
movx @dptr,a
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
inc \SpecialChar ~
_head
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; we could do an ANL _head,#0x0f here to use a smaller buffer (see above)
\newline 
t_b_end$:
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; restore used registers here 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_endasm;
\newline 
}
\newline 
#endif
\layout Standard

The inline assembler code can contain any valid code understood by the assembler
, this includes any assembler directives and comment lines
\begin_inset Foot
collapsed false

\layout Standard

The assembler does not like some characters like ':' or ''' in comments.
\end_inset 

.
 The compiler does not do any validation of the code within the 
\family typewriter 
_asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 

 ...
 _endasm;
\family default 
 keyword pair.
 Specifically it will not know which registers are used and thus register
 pushing/popping
\begin_inset LatexCommand \index{push/pop}

\end_inset 

 has to be done manually.
 
\layout Standard

It is strongly recommended that each assembly instruction (including labels)
 be placed in a separate line (as the example shows).
 When the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-
\emph on 
peep-asm
\begin_inset LatexCommand \index{-\/-peep-asm}

\end_inset 


\emph default 
 command line option is used, the inline assembler code will be passed through
 the peephole optimizer
\begin_inset LatexCommand \index{Peephole optimizer}

\end_inset 

.
 There are only a few (if any) cases where this option makes sense, it might
 cause some unexpected changes in the inline assembler code.
 Please go through the peephole optimizer rules defined in file 
\emph on 
SDCCpeeph.def
\emph default 
 carefully before using this option.
\layout Subsection

Naked Functions
\begin_inset LatexCommand \label{sub:Naked-Functions}

\end_inset 


\begin_inset LatexCommand \index{Naked functions}

\end_inset 


\layout Standard

A special keyword may be associated with a function declaring it as 
\emph on 
_naked
\begin_inset LatexCommand \index{\_naked}

\end_inset 

.
 
\emph default 
The 
\emph on 
_naked
\emph default 
 function modifier attribute prevents the compiler from generating prologue
\begin_inset LatexCommand \index{function prologue}

\end_inset 

 and epilogue
\begin_inset LatexCommand \index{function epilogue}

\end_inset 

 code for that function.
 This means that the user is entirely responsible for such things as saving
 any registers that may need to be preserved, selecting the proper register
 bank, generating the 
\emph on 
return
\emph default 
 instruction at the end, etc.
 Practically, this means that the contents of the function must be written
 in inline assembler.
 This is particularly useful for interrupt functions, which can have a large
 (and often unnecessary) prologue/epilogue.
 For example, compare the code generated by these two functions:
\layout Verse


\family typewriter 
volatile
\begin_inset LatexCommand \index{volatile}

\end_inset 

 data unsigned char counter;
\newline 

\newline 
void simpleInterrupt(void) interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 1
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
counter++;
\newline 
}
\newline 

\newline 
void nakedInterrupt(void) interrupt 2 _naked
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 


\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
inc\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_counter
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
reti\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; MUST explicitly include ret or reti in _naked function.
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_endasm
\begin_inset LatexCommand \index{\_endasm}

\end_inset 

;
\newline 
}
\layout Standard

For an 8051 target, the generated simpleInterrupt looks like:
\layout Verse


\family typewriter 
_simpleInterrupt:
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
acc
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
b
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dpl
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dph
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
psw
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
psw,#0x00
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
inc\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_counter
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
psw
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dph
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dpl
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
b
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
acc
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
reti
\layout Standard

whereas nakedInterrupt looks like:
\layout Verse


\family typewriter 
_nakedInterrupt:
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
inc\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_counter
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
reti\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; MUST explicitly include ret or reti in _naked function.
\layout Standard

The #pragma directive EXCLUDE
\begin_inset LatexCommand \index{\#pragma EXCLUDE}

\end_inset 

 allows a more fine grained control over pushing & popping
\begin_inset LatexCommand \index{push/pop}

\end_inset 

 the registers.
\layout Standard

While there is nothing preventing you from writing C code inside a _naked
 function, there are many ways to shoot yourself in the foot doing this,
 and it is recommended that you stick to inline assembler.
\layout Subsection

Use of Labels within Inline Assembler
\layout Standard

SDCC allows the use of in-line assembler with a few restriction as regards
 labels.
 In older versions of the compiler all labels defined within inline assembler
 code 
\emph on 
had to be
\emph default 
 of the form 
\emph on 
nnnnn$
\emph default 
 where nnnn is a number less than 100 (which implies a limit of utmost 100
 inline assembler labels 
\emph on 
per function
\emph default 
\noun on 
)
\noun default 
.
 
\layout Verse


\family typewriter 
_asm
\begin_inset LatexCommand \index{\_asm}

\end_inset 

 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
b,#10 
\newline 
00001$: 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
djnz\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
b,00001$ 
\newline 
_endasm
\begin_inset LatexCommand \index{\_endasm}

\end_inset 

 ;
\layout Standard

Inline assembler code cannot reference any C-Labels, however it can reference
 labels
\begin_inset LatexCommand \index{Labels}

\end_inset 

 defined by the inline assembler, e.g.:
\layout Verse


\family typewriter 
foo() { 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* some c code */ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_asm 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
; some assembler code 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ljmp $0003 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_endasm; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* some more c code */ 
\newline 
clabel:\SpecialChar ~
\SpecialChar ~
/* inline assembler cannot reference this label */ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_asm
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
$0003: ;label (can be reference by inline assembler only) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
_endasm ; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* some more c code */
\newline 
}
\layout Standard

In other words inline assembly code can access labels defined in inline
 assembly within the scope of the function.
 The same goes the other way, ie.
 labels defines in inline assembly can not be accessed by C statements.
\layout Section

Interfacing with Assembler Code
\begin_inset LatexCommand \index{Assembler routines}

\end_inset 


\layout Subsection

Global Registers used for Parameter Passing
\begin_inset LatexCommand \index{Parameter passing}

\end_inset 


\layout Standard

The compiler always uses the global registers 
\emph on 
DPL, DPH
\begin_inset LatexCommand \index{DPTR, DPH, DPL}

\end_inset 


\begin_inset LatexCommand \index{DPTR}

\end_inset 

, B
\begin_inset LatexCommand \index{B (register)}

\end_inset 

 
\emph default 
and
\emph on 
 ACC
\begin_inset LatexCommand \index{ACC}

\end_inset 


\emph default 
 to pass the first parameter to a routine.
 The second parameter onwards is either allocated on the stack (for reentrant
 routines or if -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto is used) or in data / xdata memory (depending on the memory
 model).
 
\layout Subsection

Assembler Routine(non-reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

)
\begin_inset LatexCommand \index{Assembler routines (non-reentrant)}

\end_inset 


\layout Standard

In the following example the function c_func calls an assembler routine
 asm_func, which takes two parameters
\begin_inset LatexCommand \index{function parameter}

\end_inset 

.
\layout Verse


\family typewriter 
extern int asm_func(unsigned char, unsigned char);
\newline 

\newline 
int c_func (unsigned char i, unsigned char j)
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return asm_func(i,j);
\newline 
}
\newline 

\newline 
int main()
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return c_func(10,9);
\newline 
}
\layout Standard

The corresponding assembler function is:
\layout Verse


\family typewriter 
.globl _asm_func_PARM_2 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
.globl _asm_func 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
.area OSEG 
\newline 
_asm_func_PARM_2:
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
.ds    1 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
.area CSEG 
\newline 
_asm_func: 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov    a,dpl 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
add    a,_asm_func_PARM_2 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov    dpl,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
dph
\begin_inset LatexCommand \index{DPTR, DPH, DPL}

\end_inset 

,#0x00 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ret
\layout Standard

Note here that the return values
\begin_inset LatexCommand \index{return value}

\end_inset 

 are placed in 'dpl' - One byte return value, 'dpl' LSB & 'dph' MSB for
 two byte values.
 'dpl', 'dph' and 'b' for three byte values (generic pointers) and 'dpl','dph','
b' & 'acc' for four byte values.
\layout Standard

The parameter naming convention is _<function_name>_PARM_<n>, where n is
 the parameter number starting from 1, and counting from the left.
 The first parameter is passed in 
\begin_inset Quotes eld
\end_inset 

dpl
\begin_inset Quotes erd
\end_inset 

 for One bye parameter, 
\begin_inset Quotes eld
\end_inset 

dptr
\begin_inset Quotes erd
\end_inset 

 if two bytes, 
\begin_inset Quotes eld
\end_inset 

b,dptr
\begin_inset Quotes erd
\end_inset 

 for three bytes and 
\begin_inset Quotes eld
\end_inset 

acc,b,dptr
\begin_inset Quotes erd
\end_inset 

 for four bytes, the variable name for the second parameter will be _<function_n
ame>_PARM_2.
\newline 

\newline 
Assemble the assembler routine with the following command:
\newline 

\newline 

\family sans 
\series bold 
asx8051 -losg asmfunc.asm
\newline 

\newline 

\family default 
\series default 
Then compile and link the assembler routine to the C source file with the
 following command:
\newline 

\newline 

\family sans 
\series bold 
sdcc cfunc.c asmfunc.rel
\layout Subsection

Assembler Routine(reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

)
\begin_inset LatexCommand \index{Assembler routines (reentrant)}

\end_inset 


\layout Standard

In this case the second parameter
\begin_inset LatexCommand \index{function parameter}

\end_inset 

 onwards will be passed on the stack, the parameters are pushed from right
 to left i.e.
 after the call the left most parameter will be on the top of the stack.
 Here is an example:
\layout Verse


\family typewriter 
extern int asm_func(unsigned char, unsigned char);
\newline 

\newline 
int c_func (unsigned char i, unsigned char j) reentrant 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return asm_func(i,j); 
\newline 
} 
\newline 

\newline 
int main() 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return c_func(10,9); 
\newline 
}
\layout Standard

The corresponding assembler routine is:
\layout Verse


\family typewriter 
.globl _asm_func 
\newline 
_asm_func: 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
push  _bp 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov _bp,sp 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  r2,dpl
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  a,_bp 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
clr  c 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
add  a,#0xfd 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  r0,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
add  a,#0xfc
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  r1,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  a,@r0 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
add  a,r2
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  dpl,a 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  dph,#0x00 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mov  sp,_bp 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
pop  _bp 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ret
\layout Standard

The compiling and linking procedure remains the same, however note the extra
 entry & exit linkage required for the assembler code, _bp is the stack
 frame pointer and is used to compute the offset into the stack for parameters
 and local variables.
\layout Section

int (16 bit)
\begin_inset LatexCommand \index{int (16 bit)}

\end_inset 

 and long (32 bit)
\begin_inset LatexCommand \index{long (32 bit)}

\end_inset 

 Support
\layout Standard

For signed & unsigned int (16 bit) and long (32 bit) variables, division,
 multiplication and modulus operations are implemented by support routines.
 These support routines are all developed in ANSI-C to facilitate porting
 to other MCUs, although some model specific assembler optimizations are
 used.
 The following files contain the described routines, all of them can be
 found in <installdir>/share/sdcc/lib.
\newline 

\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="11" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Function
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_mulint.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

16 bit multiplication
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_divsint.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 signed 16 bit division (calls _divuint)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_divuint.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 unsigned 16 bit division
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_modsint.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

signed 16 bit modulus (calls _moduint)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_moduint.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

unsigned 16 bit modulus
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_mullong.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

32 bit multiplication
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_divslong.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 signed 32 division (calls _divulong)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_divulong.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

unsigned 32 division
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_modslong.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 signed 32 bit modulus (calls _modulong)
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

_modulong.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

unsigned 32 bit modulus
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Standard

Since they are compiled as 
\emph on 
non-reentrant
\emph default 

\begin_inset LatexCommand \index{reentrant}

\end_inset 

, interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 service routines should not do any of the above operations.
 If this is unavoidable then the above routines will need to be compiled
 with the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 


\emph default 
 option, after which the source program will have to be compiled with 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-int-long-reent
\begin_inset LatexCommand \index{-\/-int-long-reent}

\end_inset 


\emph default 
 option.
 Notice that you don't have to call this routines directly.
 The compiler will use them automatically every time an integer operation
 is required.
\layout Section

Floating Point Support
\begin_inset LatexCommand \index{Floating point support}

\end_inset 


\layout Standard

SDCC supports IEEE (single precision 4 bytes) floating point numbers.The
 floating point support routines are derived from gcc's floatlib.c and consist
 of the following routines:
\newline 

\layout Standard
\align center 

\size footnotesize 

\begin_inset  Tabular
<lyxtabular version="3" rows="17" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
Function 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fsadd.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
add floating point numbers
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fssub.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
subtract floating point numbers 
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fsdiv.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
divide floating point numbers 
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fsmul.c 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
multiply floating point numbers 
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2uchar.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to unsigned char
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2char.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to signed char
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2uint.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to unsigned int
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2int.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to signed int
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2ulong.
\family default 
\series default 
\shape default 
\size default 
\emph default 
\bar default 
\noun default 
\color default
c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to unsigned long
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_fs2long.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert floating point to signed long
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_uchar2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert unsigned char to floating point
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_char2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert char to floating point number
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_uint2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert unsigned int to floating point
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_int2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert int to floating point numbers
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_ulong2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert unsigned long to floating point number
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
_long2fs.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
convert long to floating point number
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Standard

Note if all these routines are used simultaneously the data space might
 overflow.
 For serious floating point usage it is strongly recommended that the large
 model be used.
 Also notice that you don't have to call this routines directly.
 The compiler will use them automatically every time a floating point operation
 is required.
\layout Section

MCS51 Memory Models
\begin_inset LatexCommand \index{Memory model}

\end_inset 


\begin_inset LatexCommand \index{MCS51 memory}

\end_inset 


\layout Standard

SDCC allows two memory models for MCS51 code, 
\shape slanted 
small
\shape default 
 and 
\shape slanted 
large
\shape default 
.
 Modules compiled with different memory models should 
\emph on 
never
\emph default 
 be combined together or the results would be unpredictable.
 The library routines supplied with the compiler are compiled as both small
 and large.
 The compiled library modules are contained in separate directories as small
 and large so that you can link to either set.
 
\layout Standard

When the large model is used all variables declared without a storage class
 will be allocated into the external ram, this includes all parameters and
 local variables (for non-reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

 functions).
 When the small model is used variables without storage class are allocated
 in the internal ram.
\layout Standard

Judicious usage of the processor specific storage classes
\begin_inset LatexCommand \index{Storage class}

\end_inset 

 and the 'reentrant' function type will yield much more efficient code,
 than using the large model.
 Several optimizations are disabled when the program is compiled using the
 large model, it is therefore strongly recommended that the small model
 be used unless absolutely required.
\layout Section

DS390 Memory Models
\begin_inset LatexCommand \index{Memory model}

\end_inset 


\begin_inset LatexCommand \index{DS390 memory model}

\end_inset 


\layout Standard

The only model supported is Flat 24
\begin_inset LatexCommand \index{Flat 24 (memory model)}

\end_inset 

.
 This generates code for the 24 bit contiguous addressing mode of the Dallas
 DS80C390 part.
 In this mode, up to four meg of external RAM or code space can be directly
 addressed.
 See the data sheets at www.dalsemi.com for further information on this part.
\newline 

\newline 
Note that the compiler does not generate any code to place the processor
 into 24 bitmode (although 
\emph on 
tinibios
\emph default 
 in the ds390 libraries will do that for you).
 If you don't use 
\emph on 
tinibios
\emph default 

\begin_inset LatexCommand \index{Tinibios (DS390)}

\end_inset 

, the boot loader or similar code must ensure that the processor is in 24
 bit contiguous addressing mode before calling the SDCC startup code.
\newline 

\newline 
Like the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-large
\emph default 
 option, variables will by default be placed into the XDATA segment.
 
\newline 

\newline 
Segments may be placed anywhere in the 4 meg address space using the usual
 -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-*-loc options.
 Note that if any segments are located above 64K, the -r flag must be passed
 to the linker to generate the proper segment relocations, and the Intel
 HEX output format must be used.
 The -r flag can be passed to the linker by using the option 
\emph on 
-Wl-r
\emph default 
 on the SDCC command line.
 However, currently the linker can not handle code segments > 64k.
\layout Section

Pragmas
\begin_inset LatexCommand \index{Pragmas}

\end_inset 


\layout Standard

SDCC supports the following #pragma directives.
\layout Itemize

SAVE
\begin_inset LatexCommand \index{\#pragma SAVE}

\end_inset 

 - this will save all current options to the SAVE/RESTORE stack.
 See RESTORE.
\layout Itemize

RESTORE
\begin_inset LatexCommand \index{\#pragma RESTORE}

\end_inset 

 - will restore saved options from the last save.
 SAVEs & RESTOREs can be nested.
 SDCC uses a SAVE/RESTORE stack: SAVE pushes current options to the stack,
 RESTORE pulls current options from the stack.
 See SAVE.
\layout Itemize

NOGCSE
\begin_inset LatexCommand \index{\#pragma NOGCSE}

\end_inset 

 - will stop global common subexpression elimination.
\layout Itemize

NOINDUCTION
\begin_inset LatexCommand \index{\#pragma NOINDUCTION}

\end_inset 

 - will stop loop induction optimizations.
\layout Itemize

NOJTBOUND
\begin_inset LatexCommand \index{\#pragma NOJTBOUND}

\end_inset 

 - will not generate code for boundary value checking, when switch statements
 are turned into jump-tables (dangerous).
 For more details see section 
\begin_inset LatexCommand \ref{sub:'switch'-Statements}

\end_inset 

.
\layout Itemize

NOOVERLAY
\begin_inset LatexCommand \index{\#pragma NOOVERLAY}

\end_inset 

 - the compiler will not overlay the parameters and local variables of a
 function.
\layout Itemize

LESS_PEDANTIC
\begin_inset LatexCommand \index{\#pragma LESS\_PEDANTIC}

\end_inset 

 - the compiler will not warn you anymore for obvious mistakes, you'r on
 your own now ;-(
\layout Itemize

NOLOOPREVERSE
\begin_inset LatexCommand \index{\#pragma NOLOOPREVERSE}

\end_inset 

 - Will not do loop reversal optimization
\layout Itemize

EXCLUDE
\begin_inset LatexCommand \index{\#pragma EXCLUDE}

\end_inset 

 NONE | {acc[,b[,dpl[,dph]]] - The exclude pragma disables generation of
 pair of push/pop
\begin_inset LatexCommand \index{push/pop}

\end_inset 

 instruction in ISR function (using interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 keyword).
 The directive should be placed immediately before the ISR function definition
 and it affects ALL ISR functions following it.
 To enable the normal register saving for ISR functions use #pragma\SpecialChar ~
EXCLUDE\SpecialChar ~
none
\begin_inset LatexCommand \index{\#pragma EXCLUDE}

\end_inset 

.
\layout Itemize

NOIV
\begin_inset LatexCommand \index{\#pragma NOIV}

\end_inset 

 - Do not generate interrupt vector table entries for all ISR functions
 defined after the pragma.
 This is useful in cases where the interrupt vector table must be defined
 manually, or when there is a secondary, manually defined interrupt vector
 table (e.g.
 for the autovector feature of the Cypress EZ-USB FX2).
 More elegantly this can be achieved by obmitting the optional interrupt
 number after the interrupt keyword, see section 
\begin_inset LatexCommand \ref{sub:Interrupt-Service-Routines}

\end_inset 

\SpecialChar ~
about interrupts.
\layout Itemize

CALLEE-SAVES
\begin_inset LatexCommand \index{\#pragma CALLEE-SAVES}

\end_inset 


\begin_inset LatexCommand \index{function prologue}

\end_inset 

 function1[,function2[,function3...]] - The compiler by default uses a caller
 saves convention for register saving across function calls, however this
 can cause unnecessary register pushing & popping when calling small functions
 from larger functions.
 This option can be used to switch off the register saving convention for
 the function names specified.
 The compiler will not save registers when calling these functions, extra
 code need to be manually inserted at the entry & exit for these functions
 to save & restore the registers used by these functions, this can SUBSTANTIALLY
 reduce code & improve run time performance of the generated code.
 In the future the compiler (with inter procedural analysis) may be able
 to determine the appropriate scheme to use for each function call.
 If -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-callee-saves command line option is used, the function names specified
 in #pragma\SpecialChar ~
CALLEE-SAVES
\begin_inset LatexCommand \index{\#pragma CALLEE-SAVES}

\end_inset 

 is appended to the list of functions specified in the command line.
\layout Itemize

preproc_asm
\begin_inset LatexCommand \index{\#pragma preproc\_asm}

\end_inset 

 (+ | -) - switch _asm _endasm block preprocessing on / off.
 Default is on.
\layout Standard

The pragma's are intended to be used to turn-on or off certain optimizations
 which might cause the compiler to generate extra stack / data space to
 store compiler generated temporary variables.
 This usually happens in large functions.
 Pragma directives should be used as shown in the following example, they
 are used to control options & optimizations for a given function; pragmas
 should be placed before and/or after a function, placing pragma's inside
 a function body could have unpredictable results.
\layout Verse


\family typewriter 
#pragma SAVE
\begin_inset LatexCommand \index{\#pragma SAVE}

\end_inset 

 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* save the current settings */ 
\newline 
#pragma NOGCSE
\begin_inset LatexCommand \index{\#pragma NOGCSE}

\end_inset 

 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* turnoff global subexpression elimination */ 
\newline 
#pragma NOINDUCTION
\begin_inset LatexCommand \index{\#pragma NOINDUCTION}

\end_inset 

 /* turn off induction optimizations */ 
\newline 
int foo () 
\newline 
{ 
\newline 
\SpecialChar ~
 \SpecialChar ~
 ...
 
\newline 
\SpecialChar ~
 \SpecialChar ~
 /* large code */ 
\newline 
\SpecialChar ~
 \SpecialChar ~
 ...
 
\newline 
} 
\newline 
#pragma RESTORE
\begin_inset LatexCommand \index{\#pragma RESTORE}

\end_inset 

 /* turn the optimizations back on */
\layout Standard

The compiler will generate a warning message when extra space is allocated.
 It is strongly recommended that the SAVE and RESTORE pragma's be used when
 changing options for a function.
\layout Section

Defines Created by the Compiler
\begin_inset LatexCommand \index{Defines created by the compiler}

\end_inset 


\layout Standard

The compiler creates the following #defines
\begin_inset LatexCommand \index{\#defines}

\end_inset 

:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
#define
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC
\begin_inset LatexCommand \index{SDCC}

\end_inset 

 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

this Symbol is always defined
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_mcs51
\begin_inset LatexCommand \index{SDCC\_mcs51}

\end_inset 

 or SDCC_ds390
\begin_inset LatexCommand \index{SDCC\_ds390}

\end_inset 

 or SDCC_z80
\begin_inset LatexCommand \index{SDCC\_z80}

\end_inset 

, etc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

depending on the model used (e.g.: -mds390
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

__mcs51
\begin_inset LatexCommand \index{\_\_mcs51}

\end_inset 

, __ds390
\begin_inset LatexCommand \index{\_\_ds390}

\end_inset 

, __hc08
\begin_inset LatexCommand \index{\_\_hc08}

\end_inset 

, __z80
\begin_inset LatexCommand \index{\_\_z80}

\end_inset 

, etc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

depending on the model used (e.g.
 -mz80)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_STACK_AUTO
\begin_inset LatexCommand \index{SDCC\_STACK\_AUTO}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\emph default 
 option is used
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_MODEL_SMALL
\begin_inset LatexCommand \index{SDCC\_MODEL\_SMALL}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-small
\emph default 
 is used
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_MODEL_LARGE
\begin_inset LatexCommand \index{SDCC\_MODEL\_LARGE}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-model-large
\emph default 
 is used
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_USE_XSTACK
\begin_inset LatexCommand \index{SDCC\_USE\_XSTACK}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack
\emph default 
 option is used
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_STACK_TENBIT
\begin_inset LatexCommand \index{SDCC\_STACK\_TENBIT}

\end_inset 

 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-mds390
\emph default 
 is used
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SDCC_MODEL_FLAT24
\begin_inset LatexCommand \index{SDCC\_MODEL\_FLAT24}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

when 
\emph on 
-mds390
\emph default 
 is used
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Chapter

Debugging with SDCDB
\begin_inset LatexCommand \index{sdcdb}

\end_inset 

 
\layout Standard

SDCC is distributed with a source level debugger
\begin_inset LatexCommand \index{Debugger}

\end_inset 

.
 The debugger uses a command line interface, the command repertoire of the
 debugger has been kept as close to gdb
\begin_inset LatexCommand \index{gdb}

\end_inset 

 (the GNU debugger) as possible.
 The configuration and build process is part of the standard compiler installati
on, which also builds and installs the debugger in the target directory
 specified during configuration.
 The debugger allows you debug BOTH at the C source and at the ASM source
 level.
 Sdcdb is available on Unix platforms only.
\layout Section

Compiling for Debugging
\layout Standard

The \SpecialChar \-
\SpecialChar \-
debug option must be specified for all files for which debug information
 is to be generated.
 The complier generates a .adb file for each of these files.
 The linker creates the .cdb file from the .adb files and the address information.
 This .cdb is used by the debugger.
\layout Section

How the Debugger Works
\layout Standard

When the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-debug option is specified the compiler generates extra symbol information
 some of which are put into the assembler source and some are put into the
 .adb file.
  Then the linker creates the .cdb file from the individual .adb files with
 the address information for the symbols.
 The debugger reads the symbolic information generated by the compiler &
 the address information generated by the linker.
 It uses the SIMULATOR (Daniel's S51) to execute the program, the program
 execution is controlled by the debugger.
 When a command is issued for the debugger, it translates it into appropriate
 commands for the simulator.
\layout Section

Starting the Debugger
\layout Standard

The debugger can be started using the following command line.
 (Assume the file you are debugging has the file name foo).
\newline 

\newline 

\family sans 
\series bold 
sdcdb foo
\newline 

\family default 
\series default 

\newline 
The debugger will look for the following files.
\layout Itemize

foo.c - the source file.
\layout Itemize

foo.cdb - the debugger symbol information file.
\layout Itemize

foo.ihx - the Intel hex format
\begin_inset LatexCommand \index{Intel hex format}

\end_inset 

 object file.
\layout Section

Command Line Options.
\layout Itemize

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-directory=<source file directory> this option can used to specify the directory
 search list.
 The debugger will look into the directory list specified for source, cdb
 & ihx files.
 The items in the directory list must be separated by ':', e.g.
 if the source files can be in the directories /home/src1 and /home/src2,
 the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-directory option should be -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-directory=/home/src1:/home/src2.
 Note there can be no spaces in the option.
 
\layout Itemize

-cd <directory> - change to the <directory>.
\layout Itemize

-fullname - used by GUI front ends.
\layout Itemize

-cpu <cpu-type> - this argument is passed to the simulator please see the
 simulator docs for details.
\layout Itemize

-X <Clock frequency > this options is passed to the simulator please see
 the simulator docs for details.
\layout Itemize

-s <serial port file> passed to simulator see the simulator docs for details.
\layout Itemize

-S <serial in,out> passed to simulator see the simulator docs for details.
\layout Itemize

-k <port number> passed to simulator see the simulator docs for details.
\layout Section

Debugger Commands.
\layout Standard

As mentioned earlier the command interface for the debugger has been deliberatel
y kept as close the GNU debugger gdb, as possible.
 This will help the integration with existing graphical user interfaces
 (like ddd, xxgdb or xemacs) existing for the GNU debugger.
 If you use a graphical user interface for the debugger you can skip the
 next sections.
\layout Subsubsection*

break [line | file:line | function | file:function]
\layout Standard

Set breakpoint at specified line or function:
\newline 

\newline 

\family sans 
\series bold 
sdcdb>break 100 
\newline 
sdcdb>break foo.c:100
\newline 
sdcdb>break funcfoo
\newline 
sdcdb>break foo.c:funcfoo
\layout Subsubsection*

clear [line | file:line | function | file:function ]
\layout Standard

Clear breakpoint at specified line or function:
\newline 

\newline 

\family sans 
\series bold 
sdcdb>clear 100
\newline 
sdcdb>clear foo.c:100
\newline 
sdcdb>clear funcfoo
\newline 
sdcdb>clear foo.c:funcfoo
\layout Subsubsection*

continue
\layout Standard

Continue program being debugged, after breakpoint.
\layout Subsubsection*

finish
\layout Standard

Execute till the end of the current function.
\layout Subsubsection*

delete [n]
\layout Standard

Delete breakpoint number 'n'.
 If used without any option clear ALL user defined break points.
\layout Subsubsection*

info [break | stack | frame | registers ]
\layout Itemize

info break - list all breakpoints
\layout Itemize

info stack - show the function call stack.
\layout Itemize

info frame - show information about the current execution frame.
\layout Itemize

info registers - show content of all registers.
\layout Subsubsection*

step
\layout Standard

Step program until it reaches a different source line.
\layout Subsubsection*

next
\layout Standard

Step program, proceeding through subroutine calls.
\layout Subsubsection*

run
\layout Standard

Start debugged program.
\layout Subsubsection*

ptype variable 
\layout Standard

Print type information of the variable.
\layout Subsubsection*

print variable
\layout Standard

print value of variable.
\layout Subsubsection*

file filename
\layout Standard

load the given file name.
 Note this is an alternate method of loading file for debugging.
\layout Subsubsection*

frame
\layout Standard

print information about current frame.
\layout Subsubsection*

set srcmode
\layout Standard

Toggle between C source & assembly source.
\layout Subsubsection*

! simulator command
\layout Standard

Send the string following '!' to the simulator, the simulator response is
 displayed.
 Note the debugger does not interpret the command being sent to the simulator,
 so if a command like 'go' is sent the debugger can loose its execution
 context and may display incorrect values.
\layout Subsubsection*

quit.
\layout Standard

"Watch me now.
 Iam going Down.
 My name is Bobby Brown"
\layout Section

Interfacing with XEmacs
\begin_inset LatexCommand \index{XEmacs}

\end_inset 


\begin_inset LatexCommand \index{Emacs}

\end_inset 

.
\layout Standard

Two files (in emacs lisp) are provided for the interfacing with XEmacs,
 sdcdb.el and sdcdbsrc.el.
 These two files can be found in the $(prefix)/bin directory after the installat
ion is complete.
 These files need to be loaded into XEmacs for the interface to work.
 This can be done at XEmacs startup time by inserting the following into
 your '.xemacs' file (which can be found in your HOME directory): 
\newline 

\newline 

\family typewriter 
(load-file sdcdbsrc.el) 
\family default 

\newline 

\newline 
.xemacs is a lisp file so the () around the command is REQUIRED.
 The files can also be loaded dynamically while XEmacs is running, set the
 environment variable 'EMACSLOADPATH' to the installation bin directory
 (<installdir>/bin), then enter the following command ESC-x load-file sdcdbsrc.
 To start the interface enter the following command: 
\newline 

\newline 

\family sans 
\series bold 
ESC-x sdcdbsrc
\family default 
\series default 

\newline 

\newline 
You will prompted to enter the file name to be debugged.
 
\newline 

\newline 
The command line options that are passed to the simulator directly are bound
 to default values in the file sdcdbsrc.el.
 The variables are listed below, these values maybe changed as required.
\layout Itemize

sdcdbsrc-cpu-type '51
\layout Itemize

sdcdbsrc-frequency '11059200
\layout Itemize

sdcdbsrc-serial nil
\layout Standard

The following is a list of key mapping for the debugger interface.
\layout Standard

\SpecialChar ~

\family typewriter 

\newline 
;; Current Listing :: 
\newline 
;;key\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
binding\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Comment 
\newline 
;;---\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
------\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
--------
\newline 
;; 
\newline 
;; n\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-next-from-src\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB next command 
\newline 
;; b\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-back-from-src\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB back command 
\newline 
;; c\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-cont-from-src\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB continue command
\newline 
;; s\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-step-from-src\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB step command 
\newline 
;; ?\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-whatis-c-sexp\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB ptypecommand for data at 
\newline 
;;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 buffer point 
\newline 
;; x\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-delete\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB Delete all breakpoints if no arg 
\newline 
;;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
given or delete arg (C-u arg x) 
\newline 
;; m\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-frame\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB Display current frame if no arg, 
\newline 
;;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
given or display frame arg 
\newline 
;;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
buffer point 
\newline 
;; !\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-goto-sdcdb\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Goto the SDCDB output buffer 
\newline 
;; p\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-print-c-sexp\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB print command for data at 
\newline 
;;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 buffer point 
\newline 
;; g\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-goto-sdcdb\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Goto the SDCDB output buffer 
\newline 
;; t\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-mode\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Toggles Sdcdbsrc mode (turns it off) 
\newline 
;; 
\newline 
;; C-c C-f\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-finish-from-src\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
SDCDB finish command 
\newline 
;; 
\newline 
;; C-x SPC\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdb-break\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Set break for line with point 
\newline 
;; ESC t\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-mode\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
Toggle Sdcdbsrc mode 
\newline 
;; ESC m\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sdcdbsrc-srcmode\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 Toggle list mode 
\newline 
;; 
\newline 

\layout Chapter
\pagebreak_top 
TIPS
\layout Standard

Here are a few guidelines that will help the compiler generate more efficient
 code, some of the tips are specific to this compiler others are generally
 good programming practice.
\layout Itemize

Use the smallest data type to represent your data-value.
 If it is known in advance that the value is going to be less than 256 then
 use an 'unsigned char' instead of a 'short' or 'int'.
\layout Itemize

Use unsigned when it is known in advance that the value is not going to
 be negative.
 This helps especially if you are doing division or multiplication.
\layout Itemize

NEVER jump into a LOOP.
\layout Itemize

Declare the variables to be local whenever possible, especially loop control
 variables (induction).
\layout Itemize

Since the compiler does not always do implicit integral promotion, the programme
r should do an explicit cast when integral promotion is required.
\layout Itemize

Reducing the size of division, multiplication & modulus operations can reduce
 code size substantially.
 Take the following code for example.
\begin_deeper 
\layout Verse


\family typewriter 
foobar(unsigned int p1, unsigned char ch)
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
unsigned char ch1 = p1 % ch ;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
....
\newline 
}
\layout Standard

For the modulus operation the variable ch will be promoted to unsigned int
 first then the modulus operation will be performed (this will lead to a
 call to support routine _moduint()), and the result will be casted to a
 char.
 If the code is changed to 
\layout Verse


\family typewriter 
foobar(unsigned int p1, unsigned char ch)
\newline 
{
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
unsigned char ch1 = (unsigned char)p1 % ch ;
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
....
\newline 
}
\layout Standard

It would substantially reduce the code generated (future versions of the
 compiler will be smart enough to detect such optimization opportunities).
\end_deeper 
\layout Itemize

Have a look at the assembly listing to get a 
\begin_inset Quotes sld
\end_inset 

feeling
\begin_inset Quotes srd
\end_inset 

 for the code generation.
\layout Section

Notes on MCS51 memory
\begin_inset LatexCommand \index{MCS51 memory}

\end_inset 

 layout
\layout Standard

The 8051 family of microcontrollers have a minimum of 128 bytes of internal
 RAM memory which is structured as follows
\newline 

\newline 
- Bytes 00-1F - 32 bytes to hold up to 4 banks of the registers R0 to R7,
 
\newline 
- Bytes 20-2F - 16 bytes to hold 128 bit
\begin_inset LatexCommand \index{bit}

\end_inset 

 variables and, 
\newline 
- Bytes 30-7F - 80 bytes for general purpose use.
\newline 

\layout Standard

Additionally some members of the MCS51 family may have up to 128 bytes of
 additional, indirectly addressable, internal RAM memory (
\emph on 
idata
\emph default 

\begin_inset LatexCommand \index{idata}

\end_inset 

).
 Furthermore, some chips may have some built in external memory (
\emph on 
xdata
\emph default 

\begin_inset LatexCommand \index{xdata}

\end_inset 

) which should not be confused with the internal, directly addressable RAM
 memory (
\emph on 
data
\emph default 

\begin_inset LatexCommand \index{data}

\end_inset 

).
 Sometimes this built in 
\emph on 
xdata
\emph default 
 memory has to be activated before using it (you can probably find this
 information on the datasheet of the microcontroller your are using, see
 also section 
\begin_inset LatexCommand \ref{sub:Startup-Code}

\end_inset 

\SpecialChar ~
Startup-Code).
\layout Standard

Normally SDCC will only use the first bank
\begin_inset LatexCommand \index{bank}

\end_inset 

 of registers (register bank 0), but it is possible to specify that other
 banks of registers should be used in interrupt
\begin_inset LatexCommand \index{interrupt}

\end_inset 

 routines.
 By default, the compiler will place the stack after the last byte of allocated
 memory for variables.
 For example, if the first 2 banks of registers are used, and only four
 bytes are used for 
\emph on 
data
\emph default 
 variables, it will position the base of the internal stack at address 20
 (0x14).
 This implies that as the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 grows, it will use up the remaining register banks, and the 16 bytes used
 by the 128 bit variables, and 80 bytes for general purpose use.
 If any bit variables are used, the data variables will be placed after
 the byte holding the last bit variable.
 For example, if register banks 0 and 1 are used, and there are 9 bit variables
 (two bytes used), 
\emph on 
data
\emph default 
 variables will be placed starting at address 0x22.
 You can also use -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-data-loc
\begin_inset LatexCommand \index{-\/-data-loc}

\end_inset 

 to specify the start address of the 
\emph on 
data
\emph default 
 and -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-iram-size to specify the size of the total internal RAM (
\emph on 
data
\emph default 
+
\emph on 
idata
\emph default 
).
 
\layout Standard

By default the 8051 linker will place the stack after the last byte of data
 variables.
 Option -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-loc
\begin_inset LatexCommand \index{-\/-stack-loc}

\end_inset 

 allows you to specify the start of the stack, i.e.
 you could start it after any data in the general purpose area.
 If your microcontroller has additional indirectly addressable internal
 RAM (
\emph on 
idata
\emph default 
) you can place the stack on it.
 You may also need to use -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xdata-loc
\begin_inset LatexCommand \index{-\/-data-loc}

\end_inset 

 to set the start address of the external RAM (
\emph on 
xdata
\emph default 
) and -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xram-size
\begin_inset LatexCommand \index{-\/-data-loc}

\end_inset 

 to specify its size.
 Same goes for the code memory, using -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-loc
\begin_inset LatexCommand \index{-\/-data-loc}

\end_inset 

 and -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-code-size
\begin_inset LatexCommand \index{-\/-data-loc}

\end_inset 

.
 If in doubt, don't specify any options and see if the resulting memory
 layout is appropriate, then you can adjust it.
\layout Standard

The 8051 linker generates two files with memory allocation information.
 The first, with extension .map shows all the variables and segments.
 The second with extension .mem shows the final memory layout.
 The linker will complaint either if memory segments overlap, there is not
 enough memory, or there is not enough space for stack.
 If you get any linking warnings and/or errors related to stack or segments
 allocation, take a look at either the .map or .mem files to find out what
 the problem is.
 The .mem file may even suggest a solution to the problem.
\layout Section

Tools
\begin_inset LatexCommand \index{Tools}

\end_inset 

 included in the distribution
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="12" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Purpose
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Directory
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

uCsim
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Simulator for various architectures
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/sim/ucsim
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

keil2sdcc.pl
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

header file conversion
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/support/scripts
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

mh2h.c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

header file conversion
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/support/scripts
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

as-gbz80
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Assembler
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

as-z80
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Assembler
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

asx8051
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Assembler
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcdb
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Simulator
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

aslink
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Linker
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

link-z80
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Linker
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

link-gbz80
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Linker
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

packihx
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ihx packer
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
sdcc/bin
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Section

Related open source tools
\begin_inset LatexCommand \index{Related tools}

\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="block" valignment="top" leftline="true" width="30line%">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Purpose
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Where to get
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

gpsim
\begin_inset LatexCommand \index{gpsim}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PIC simulator
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://www.dattalo.com/gnupic/gpsim.html}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

flP5
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PIC programmer
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://digilander.libero.it/fbradasc/FLP5.html}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

indent
\begin_inset LatexCommand \index{indent}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Formats C source - Master of the white spaces
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://home.hccnet.nl/d.ingamells/beautify.html}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

srecord
\begin_inset LatexCommand \index{srecord}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Object file conversion, checksumming, ...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://srecord.sourceforge.net/}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

objdump
\begin_inset LatexCommand \index{objdump}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Object file conversion, ...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Part of binutils (should be there anyway)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

doxygen
\begin_inset LatexCommand \index{doxygen}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Source code documentation system
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://www.doxygen.org}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

splint
\begin_inset LatexCommand \index{splint}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Statically checks c sources
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://www.splint.org}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ddd
\begin_inset LatexCommand \index{ddd}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Debugger, serves nicely as GUI to sdcdb
\begin_inset LatexCommand \index{sdcdb}

\end_inset 

 (Unix only)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://www.gnu.org/software/ddd/}

\end_inset 


\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Section

Related documentation / recommended reading
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="block" valignment="top" leftline="true" width="30line%">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Subject / Title
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Where to get
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
c-refcard.pdf
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

C Reference Card
\begin_inset LatexCommand \index{C Reference card}

\end_inset 

, 2 pages
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset LatexCommand \url{http://www.refcards.com/about/c.html}

\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

S.
 S.
 Muchnick
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Advanced Compiler Design and Implementation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

bookstore
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

test_suite_spec.pdf
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc regression test
\begin_inset LatexCommand \index{Regression test}

\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/doc
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
cdbfileformat.pd
\family default 
\series default 
\shape default 
\size default 
\emph default 
\bar default 
\noun default 
\color default
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc internal documentation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sdcc/doc
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\layout Chapter
\pagebreak_top 
Support
\begin_inset LatexCommand \index{Support}

\end_inset 


\layout Standard

SDCC has grown to be a large project.
 The compiler alone (without the preprocessor, assembler and linker) is
 well over 100,000 lines of code (blank stripped).
 The open source nature of this project is a key to its continued growth
 and support.
 You gain the benefit and support of many active software developers and
 end users.
 Is SDCC perfect? No, that's why we need your help.
 The developers take pride in fixing reported bugs.
 You can help by reporting the bugs and helping other SDCC users.
 There are lots of ways to contribute, and we encourage you to take part
 in making SDCC a great software package.
 
\layout Standard

The SDCC project is hosted on the SDCC sourceforge site at 
\begin_inset LatexCommand \htmlurl{http://sourceforge.net/projects/sdcc}

\end_inset 

.
 You'll find the complete set of mailing lists
\begin_inset LatexCommand \index{Mailing list}

\end_inset 

, forums, bug reporting system, patch submission
\begin_inset LatexCommand \index{Patch submission}

\end_inset 

 system, download
\begin_inset LatexCommand \index{download}

\end_inset 

 area and cvs code repository
\begin_inset LatexCommand \index{cvs code repository}

\end_inset 

 there.
\layout Section

Reporting Bugs
\begin_inset LatexCommand \index{Bug reporting}

\end_inset 


\begin_inset LatexCommand \index{Reporting bugs}

\end_inset 


\layout Standard

The recommended way of reporting bugs is using the infrastructure of the
 sourceforge site.
 You can follow the status of bug reports there and have an overview about
 the known bugs.
\layout Standard

Bug reports are automatically forwarded to the developer mailing list and
 will be fixed ASAP.
 When reporting a bug, it is very useful to include a small test program
 (the smaller the better) which reproduces the problem.
 If you can isolate the problem by looking at the generated assembly code,
 this can be very helpful.
 Compiling your program with the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpall
\begin_inset LatexCommand \index{-\/-dumpall}

\end_inset 

 option can sometimes be useful in locating optimization problems.
 When reporting a bug please maker sure you:
\layout Enumerate

Attach the code you are compiling with SDCC.
 
\layout Enumerate

Specify the exact command you use to run SDCC, or attach your Makefile.
 
\layout Enumerate

Specify the SDCC version (type "sdcc -v"), your platform, and operating
 system.
 
\layout Enumerate

Provide an exact copy of any error message or incorrect output.
 
\layout Enumerate

Put something meaningful in the subject of your message.
\layout Standard

Please attempt to include these 5 important parts, as applicable, in all
 requests for support or when reporting any problems or bugs with SDCC.
 Though this will make your message lengthy, it will greatly improve your
 chance that SDCC users and developers will be able to help you.
 Some SDCC developers are frustrated by bug reports without code provided
 that they can use to reproduce and ultimately fix the problem, so please
 be sure to provide sample code if you are reporting a bug! 
\layout Standard

Please have a short check that you are using a recent version of SDCC and
 the bug is not yet known.
 This is the link for reporting bugs: 
\begin_inset LatexCommand \htmlurl{http://sourceforge.net/tracker/?group_id=599&atid=100599}

\end_inset 

.
\layout Section

Requesting Features
\begin_inset LatexCommand \label{sub:Requesting-Features}

\end_inset 


\begin_inset LatexCommand \index{Feature request}

\end_inset 


\begin_inset LatexCommand \index{Requesting features}

\end_inset 


\layout Standard

Like bug reports feature requests are forwarded to the developer mailing
 list.
 This is the link for requesting features: 
\begin_inset LatexCommand \htmlurl{http://sourceforge.net/tracker/?group_id=599&atid=350599}

\end_inset 

.
\layout Section

Getting Help
\layout Standard

These links should take you directly to the 
\begin_inset LatexCommand \url[Mailing lists]{http://sourceforge.net/mail/?group_id=599}

\end_inset 


\begin_inset Foot
collapsed false

\layout Standard

Traffic on sdcc-devel and sdcc-user is about 100 mails/month each not counting
 automated messages (mid 2003)
\end_inset 

 and the 
\begin_inset LatexCommand \url[Forums]{http://sourceforge.net/forum/?group_id=599}

\end_inset 

, lists and forums are archived so if you are lucky someone already had
 a similar problem.
\layout Section

ChangeLog
\begin_inset LatexCommand \index{Changelog}

\end_inset 


\layout Standard

You can follow the status of the cvs version
\begin_inset LatexCommand \index{version}

\end_inset 

 of SDCC by watching the file 
\begin_inset LatexCommand \htmlurl[ChangeLog]{http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/sdcc/sdcc/ChangeLog?rev=HEAD&content-type=text/plain}

\end_inset 

 in the cvs-repository.
\layout Section

Release policy
\begin_inset LatexCommand \index{Release policy}

\end_inset 


\layout Standard

Historically there often were long delays between official releases and
 the sourceforge download area tends to get not updated at all.
 Current excuses might refer to problems with live range analysis, but if
 this is fixed, the next problem rising is that another excuse will have
 to be found.
 Kidding aside, we have to get better there! On the other hand there are
 daily snapshots available at 
\begin_inset LatexCommand \htmlurl[snap]{http://sdcc.sourceforge.net/snap.php}

\end_inset 

, and you can always built the very last version (hopefully with many bugs
 fixed, and features added) from the source code available at 
\begin_inset LatexCommand \htmlurl[Source]{http://sdcc.sourceforge.net/snap.php#Source}

\end_inset 

.
\layout Section

Examples
\begin_inset LatexCommand \index{Examples}

\end_inset 


\layout Standard

You'll find some small examples in the directory 
\emph on 
sdcc/device/examples/.
 
\emph default 
More examples and libraries are available at
\emph on 
 The SDCC Open Knowledge Resource 
\begin_inset LatexCommand \url{http://www.qsl.net/dl9sec/SDCC_OKR.html}

\end_inset 

 
\emph default 
web site or at 
\begin_inset LatexCommand \url{http://www.pjrc.com/tech/8051/}

\end_inset 

.
\layout Comment

I did insert a reference to Paul's web site here although it seems rather
 dedicated to a specific 8032 board (I think it's okay because it f.e.
 shows LCD/Harddisc interface and has a free 8051 monitor.
 Independent 8032 board vendors face hard competition of heavily subsidized
 development boards anyway).
\layout Comment

Maybe we should include some links to real world applications.
 Preferably pointer to pointers (one for each architecture) so this stays
 manageable here?
\layout Section

Quality control
\begin_inset LatexCommand \index{Quality control}

\end_inset 


\layout Standard

The compiler is passed through nightly compile and build checks.
 The so called 
\shape italic 
regression tests
\shape default 

\begin_inset LatexCommand \index{Regression test}

\end_inset 

 check that SDCC itself compiles flawlessly on several platforms and checks
 the quality of the code generated by SDCC by running the code through simulator
s.
 There is a separate document 
\shape italic 
test_suite.pdf
\begin_inset LatexCommand \index{Test suite}

\end_inset 


\shape default 
 about this.
\layout Standard

You'll find the test code in the directory 
\shape italic 
sdcc/support/regression
\shape default 
.
 You can run these tests manually by running 
\family sans 
make
\family default 
 in this directory (or f.e.
 
\family sans 
make test-mcs51
\family default 
 if you don't want to run the complete tests).
 The test code might also be interesting if you want to look for examples
\begin_inset LatexCommand \index{Examples}

\end_inset 

 checking corner cases of SDCC or if you plan to submit patches
\begin_inset LatexCommand \index{Patch submission}

\end_inset 

.
\layout Standard

The pic port uses a different set of regression tests, you'll find them
 in the directory 
\shape italic 
sdcc/src/regression
\shape default 
.
\layout Chapter
\pagebreak_top 
SDCC Technical Data
\layout Section

Optimizations
\begin_inset LatexCommand \index{Optimizations}

\end_inset 


\layout Standard

SDCC performs a host of standard optimizations in addition to some MCU specific
 optimizations.
 
\layout Subsection

Sub-expression Elimination
\begin_inset LatexCommand \index{Subexpression elimination}

\end_inset 


\layout Standard

The compiler does local and global common subexpression elimination, e.g.:
 
\layout Verse


\family typewriter 
i = x + y + 1; 
\newline 
j = x + y;
\layout Standard

will be translated to
\layout Verse


\family typewriter 
iTemp = x + y; 
\newline 
i = iTemp + 1; 
\newline 
j = iTemp;
\layout Standard

Some subexpressions are not as obvious as the above example, e.g.:
\layout Verse


\family typewriter 
a->b[i].c = 10; 
\newline 
a->b[i].d = 11;
\layout Standard

In this case the address arithmetic a->b[i] will be computed only once;
 the equivalent code in C would be.
\layout Verse


\family typewriter 
iTemp = a->b[i]; 
\newline 
iTemp.c = 10; 
\newline 
iTemp.d = 11;
\layout Standard

The compiler will try to keep these temporary variables in registers.
\layout Subsection

Dead-Code Elimination
\begin_inset LatexCommand \index{Dead-code elimination}

\end_inset 


\layout Verse


\family typewriter 
int global;
\newline 

\newline 
void f () { 
\newline 
\SpecialChar ~
\SpecialChar ~
int i; 
\newline 
\SpecialChar ~
\SpecialChar ~
i = 1; \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* dead store */ 
\newline 
\SpecialChar ~
\SpecialChar ~
global = 1;\SpecialChar ~
/* dead store */ 
\newline 
\SpecialChar ~
\SpecialChar ~
global = 2; 
\newline 
\SpecialChar ~
\SpecialChar ~
return; 
\newline 
\SpecialChar ~
\SpecialChar ~
global = 3;\SpecialChar ~
/* unreachable */ 
\newline 
}
\layout Standard

will be changed to
\layout Verse


\family typewriter 
int global;
\newline 

\newline 
void f () {
\newline 
\SpecialChar ~
\SpecialChar ~
global = 2; 
\newline 
\SpecialChar ~
\SpecialChar ~
return; 
\newline 
}
\layout Subsection

Copy-Propagation
\begin_inset LatexCommand \index{Copy propagation}

\end_inset 


\layout Verse


\family typewriter 
int f() { 
\newline 
\SpecialChar ~
\SpecialChar ~
int i, j; 
\newline 
\SpecialChar ~
\SpecialChar ~
i = 10; 
\newline 
\SpecialChar ~
\SpecialChar ~
j = i; 
\newline 
\SpecialChar ~
\SpecialChar ~
return j; 
\newline 
}
\layout Standard

will be changed to 
\layout Verse


\family typewriter 
int f() { 
\newline 
\SpecialChar ~
\SpecialChar ~
int i, j; 
\newline 
\SpecialChar ~
\SpecialChar ~
i = 10; 
\newline 
\SpecialChar ~
\SpecialChar ~
j = 10; 
\newline 
\SpecialChar ~
\SpecialChar ~
return 10; 
\newline 
}
\layout Standard

Note: the dead stores created by this copy propagation will be eliminated
 by dead-code elimination.
\layout Subsection

Loop Optimizations
\begin_inset LatexCommand \index{Loop optimization}

\end_inset 


\layout Standard

Two types of loop optimizations are done by SDCC loop invariant lifting
 and strength reduction of loop induction variables.
 In addition to the strength reduction the optimizer marks the induction
 variables and the register allocator tries to keep the induction variables
 in registers for the duration of the loop.
 Because of this preference of the register allocator
\begin_inset LatexCommand \index{Register allocation}

\end_inset 

, loop induction optimization causes an increase in register pressure, which
 may cause unwanted spilling of other temporary variables into the stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 / data space.
 The compiler will generate a warning message when it is forced to allocate
 extra space either on the stack or data space.
 If this extra space allocation is undesirable then induction optimization
 can be eliminated either for the entire source file (with -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-noinduction option) or for a given function only using #pragma\SpecialChar ~
NOINDUCTION
\begin_inset LatexCommand \index{\#pragma NOINDUCTION}

\end_inset 

.
\newline 

\newline 
Loop Invariant:
\layout Verse


\family typewriter 
for (i = 0 ; i < 100 ; i ++) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
f += k + l;
\layout Standard

changed to
\layout Verse


\family typewriter 
itemp = k + l; 
\newline 
for (i = 0; i < 100; i++) 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
f += itemp;
\layout Standard

As mentioned previously some loop invariants are not as apparent, all static
 address computations are also moved out of the loop.
\newline 

\newline 
Strength Reduction
\begin_inset LatexCommand \index{Strength reduction}

\end_inset 

, this optimization substitutes an expression by a cheaper expression:
\layout Verse


\family typewriter 
for (i=0;i < 100; i++)
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ar[i*5] = i*3;
\layout Standard

changed to
\layout Verse


\family typewriter 
itemp1 = 0; 
\newline 
itemp2 = 0; 
\newline 
for (i=0;i< 100;i++) { 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
ar[itemp1] = itemp2; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
itemp1 += 5; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
itemp2 += 3; 
\newline 
}
\layout Standard

The more expensive multiplication
\begin_inset LatexCommand \index{Multiplication}

\end_inset 

 is changed to a less expensive addition.
\layout Subsection

Loop Reversing
\begin_inset LatexCommand \index{Loop reversing}

\end_inset 


\layout Standard

This optimization is done to reduce the overhead of checking loop boundaries
 for every iteration.
 Some simple loops can be reversed and implemented using a 
\begin_inset Quotes eld
\end_inset 

decrement and jump if not zero
\begin_inset Quotes erd
\end_inset 

 instruction.
 SDCC checks for the following criterion to determine if a loop is reversible
 (note: more sophisticated compilers use data-dependency analysis to make
 this determination, SDCC uses a more simple minded analysis).
\layout Itemize

The 'for' loop is of the form 
\newline 

\newline 

\family typewriter 
for(<symbol> = <expression>; <sym> [< | <=] <expression>; [<sym>++ | <sym>
 += 1])
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
<for body>
\layout Itemize

The <for body> does not contain 
\begin_inset Quotes eld
\end_inset 

continue
\begin_inset Quotes erd
\end_inset 

 or 'break
\begin_inset Quotes erd
\end_inset 

.
\layout Itemize

All goto's are contained within the loop.
\layout Itemize

No function calls within the loop.
\layout Itemize

The loop control variable <sym> is not assigned any value within the loop
\layout Itemize

The loop control variable does NOT participate in any arithmetic operation
 within the loop.
\layout Itemize

There are NO switch statements in the loop.
\layout Subsection

Algebraic Simplifications
\layout Standard

SDCC does numerous algebraic simplifications, the following is a small sub-set
 of these optimizations.
\layout Verse


\family typewriter 
i = j + 0 ; /* changed to */ i = j; 
\newline 
i /= 2;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 /* changed to */ i >>= 1; 
\newline 
i = j - j ; /* changed to */ i = 0; 
\newline 
i = j / 1 ; /* changed to */ i = j;
\layout Standard

Note the subexpressions
\begin_inset LatexCommand \index{Subexpression}

\end_inset 

 given above are generally introduced by macro expansions or as a result
 of copy/constant propagation.
\layout Subsection

'switch' Statements
\begin_inset LatexCommand \label{sub:'switch'-Statements}

\end_inset 


\begin_inset LatexCommand \index{switch statement}

\end_inset 


\layout Standard

SDCC changes switch statements to jump tables
\begin_inset LatexCommand \index{jump tables}

\end_inset 

 when the following conditions are true.
 
\layout Itemize

The case labels are in numerical sequence, the labels need not be in order,
 and the starting number need not be one or zero.
\begin_deeper 
\layout Verse


\family typewriter 
switch(i) {\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
switch (i) { 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 4: ...\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 0: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 5: ...\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 1: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 3: ...\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 2: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 6: ...\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
case 3: ...
 
\newline 
}\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
}
\layout Standard

Both the above switch statements will be implemented using a jump-table.
 The example to the right side is slightly more efficient as the check for
 the lower boundary of the jump-table is not needed.
\end_deeper 
\layout Itemize

The number of case labels is at least three, since it takes two conditional
 statements to handle the boundary conditions.
\layout Itemize

The number of case labels is less than 84, since each label takes 3 bytes
 and a jump-table can be utmost 256 bytes long.
\layout Standard

Switch statements which have gaps in the numeric sequence or those that
 have more that 84 case labels can be split into more than one switch statement
 for efficient code generation, e.g.:
\layout Verse


\family typewriter 
switch (i) { 
\newline 
\SpecialChar ~
\SpecialChar ~
case 1: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 2: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 3: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 4: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 9: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 10: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 11: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 12: ...
 
\newline 
}
\layout Standard

If the above switch statement is broken down into two switch statements
\layout Verse


\family typewriter 
switch (i) { 
\newline 
\SpecialChar ~
\SpecialChar ~
case 1: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 2: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 3: ...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 4: ...
 
\newline 
}
\layout Standard

and
\layout Verse


\family typewriter 
switch (i) { 
\newline 
\SpecialChar ~
\SpecialChar ~
case 9:\SpecialChar ~
\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 10:\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 11:\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
case 12:\SpecialChar ~
...
 
\newline 
}
\layout Standard

then both the switch statements will be implemented using jump-tables whereas
 the unmodified switch statement will not be.
 You might also consider dummy cases 0 and 5 to 8 in this example.
 
\newline 
The pragma NOJTBOUND
\begin_inset LatexCommand \index{\#pragma NOJTBOUND}

\end_inset 

 can be used to turn off checking the 
\emph on 
j
\emph default 
ump 
\emph on 
t
\emph default 
able 
\emph on 
bound
\emph default 
aries.
 It has no effect if a default label is supplied.
 Use of this pragma is dangerous: if the switch argument is not matched
 by a case statement the processor will happily jump into Nirvana.
\layout Subsection

Bit-shifting Operations
\begin_inset LatexCommand \index{Bit shifting}

\end_inset 

.
\layout Standard

Bit shifting is one of the most frequently used operation in embedded programmin
g.
 SDCC tries to implement bit-shift operations in the most efficient way
 possible, e.g.:
\layout Verse


\family typewriter 
unsigned char i;
\newline 
...
 
\newline 
i >>= 4; 
\newline 
...
\layout Standard

generates the following code:
\layout Verse


\family typewriter 
mov\SpecialChar ~
 a,_i 
\newline 
swap a 
\newline 
anl\SpecialChar ~
 a,#0x0f 
\newline 
mov\SpecialChar ~
 _i,a
\layout Standard

In general SDCC will never setup a loop if the shift count is known.
 Another example:
\layout Verse


\family typewriter 
unsigned int i; 
\newline 
...
 
\newline 
i >>= 9; 
\newline 
...
\layout Standard

will generate:
\layout Verse


\family typewriter 
mov\SpecialChar ~
\SpecialChar ~
a,(_i + 1) 
\newline 
mov\SpecialChar ~
\SpecialChar ~
(_i + 1),#0x00 
\newline 
clr\SpecialChar ~
\SpecialChar ~
c 
\newline 
rrc\SpecialChar ~
\SpecialChar ~
a 
\newline 
mov\SpecialChar ~
\SpecialChar ~
_i,a
\layout Subsection

Bit-rotation
\begin_inset LatexCommand \index{Bit rotation}

\end_inset 


\layout Standard

A special case of the bit-shift operation is bit rotation
\begin_inset LatexCommand \index{rotating bits}

\end_inset 

, SDCC recognizes the following expression to be a left bit-rotation:
\layout Verse


\family typewriter 
\series bold 
unsigned
\series default 
\SpecialChar ~
\SpecialChar ~
char i;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
/* unsigned is needed for rotation */ 
\newline 
...
 
\newline 
i = ((i << 1) | (i >> 7)); 
\family default 

\newline 

\family typewriter 
...
\layout Standard

will generate the following code:
\layout Verse


\family typewriter 
mov\SpecialChar ~
\SpecialChar ~
a,_i 
\newline 
rl\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
a 
\newline 
mov\SpecialChar ~
\SpecialChar ~
_i,a
\layout Standard

SDCC uses pattern matching on the parse tree to determine this operation.Variatio
ns of this case will also be recognized as bit-rotation, i.e.: 
\layout Verse


\family typewriter 
i = ((i >> 7) | (i << 1)); /* left-bit rotation */
\layout Subsection

Nibble and Byte Swapping
\layout Standard

Other special cases of the bit-shift operations are nibble or byte swapping
\begin_inset LatexCommand \index{swapping nibbles/bytes}

\end_inset 

, SDCC recognizes the following expressions:
\layout Verse


\family typewriter 
\series bold 
unsigned
\series default 
\SpecialChar ~
\SpecialChar ~
char i; 
\newline 

\series bold 
unsigned
\series default 
\SpecialChar ~
\SpecialChar ~
int j; 
\newline 
...
 
\newline 
i = ((i << 4) | (i >> 4)); 
\family default 

\newline 

\family typewriter 
j = ((j << 8) | (j >> 8)); 
\layout Standard

and generates a swap instruction for the nibble swapping
\begin_inset LatexCommand \index{Nibble swapping}

\end_inset 

 or move instructions for the byte swapping
\begin_inset LatexCommand \index{Byte swapping}

\end_inset 

.
 The 
\begin_inset Quotes sld
\end_inset 

j
\begin_inset Quotes srd
\end_inset 

 example can be used to convert from little to big-endian or vice versa.
 If you want to change the endianness of a 
\emph on 
signed
\emph default 
 integer you have to cast to 
\family typewriter 
(unsigned int)
\family default 
 first.
\layout Standard

Note that SDCC stores numbers in little-endian
\begin_inset Foot
collapsed false

\layout Standard

Usually 8-bit processors don't care much about endianness.
 This is not the case for the standard 8051 which only has an instruction
 to increment its 
\emph on 
dptr
\emph default 

\begin_inset LatexCommand \index{DPTR}

\end_inset 

-datapointer
\emph on 
 
\emph default 
so little-endian is the more efficient byte order.
\end_inset 


\begin_inset LatexCommand \index{little-endian}

\end_inset 


\begin_inset LatexCommand \index{Endianness}

\end_inset 

 format (i.e.
 lowest order first).
\layout Subsection

Highest Order Bit
\begin_inset LatexCommand \index{Highest Order Bit}

\end_inset 


\layout Standard

It is frequently required to obtain the highest order bit of an integral
 type (long, int, short or char types).
 SDCC recognizes the following expression to yield the highest order bit
 and generates optimized code for it, e.g.:
\layout Verse


\family typewriter 
unsigned int gint; 
\newline 

\newline 
foo () { 
\newline 
\SpecialChar ~
\SpecialChar ~
unsigned char hob; 
\newline 
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
hob = (gint >> 15) & 1; 
\newline 
\SpecialChar ~
\SpecialChar ~
..
 
\newline 
}
\layout Standard

will generate the following code:
\layout Verse


\family typewriter 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 61 ;\SpecialChar ~
 hob.c 7 
\newline 
000A E5*01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 62\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 mov\SpecialChar ~
\SpecialChar ~
 a,(_gint + 1) 
\newline 
000C 23\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 63\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 rl\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 a 
\newline 
000D 54 01\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 64\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 anl\SpecialChar ~
\SpecialChar ~
 a,#0x01 
\newline 
000F F5*02\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 65\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 mov\SpecialChar ~
\SpecialChar ~
 _foo_hob_1_1,a
\layout Standard

Variations of this case however will 
\emph on 
not
\emph default 
 be recognized.
 It is a standard C expression, so I heartily recommend this be the only
 way to get the highest order bit, (it is portable).
 Of course it will be recognized even if it is embedded in other expressions,
 e.g.:
\layout Verse


\family typewriter 
xyz = gint + ((gint >> 15) & 1);
\layout Standard

will still be recognized.
\layout Subsection

Peephole Optimizer
\begin_inset LatexCommand \label{sub:Peephole-Optimizer}

\end_inset 


\begin_inset LatexCommand \index{Peephole optimizer}

\end_inset 


\layout Standard

The compiler uses a rule based, pattern matching and re-writing mechanism
 for peep-hole optimization.
 It is inspired by 
\emph on 
copt
\emph default 
 a peep-hole optimizer by Christopher W.
 Fraser (cwfraser@microsoft.com).
 A default set of rules are compiled into the compiler, additional rules
 may be added with the 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-peep-file
\begin_inset LatexCommand \index{-\/-peep-file}

\end_inset 

 <filename>
\emph default 
 option.
 The rule language is best illustrated with examples.
\layout Verse


\family typewriter 
replace { 
\newline 
\SpecialChar ~
\SpecialChar ~
mov %1,a 
\newline 
\SpecialChar ~
\SpecialChar ~
mov a,%1
\newline 
} by {
\newline 
\SpecialChar ~
\SpecialChar ~
mov %1,a
\newline 
}
\layout Standard

The above rule will change the following assembly
\begin_inset LatexCommand \index{Assembler routines}

\end_inset 

 sequence:
\layout Verse


\family typewriter 
mov r1,a 
\newline 
mov a,r1
\layout Standard

to
\layout Verse


\family typewriter 
mov r1,a
\layout Standard

Note: All occurrences of a 
\emph on 
%n
\emph default 
 (pattern variable) must denote the same string.
 With the above rule, the assembly sequence:
\layout Verse


\family typewriter 
mov r1,a 
\newline 
mov a,r2
\layout Standard

will remain unmodified.
\newline 

\newline 
Other special case optimizations may be added by the user (via 
\emph on 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-peep-file option
\emph default 
).
 E.g.
 some variants of the 8051 MCU allow only 
\family typewriter 
ajmp
\family default 
 and 
\family typewriter 
acall
\family default 
.
 The following two rules will change all 
\family typewriter 
ljmp
\family default 
 and 
\family typewriter 
lcall
\family default 
 to 
\family typewriter 
ajmp
\family default 
 and 
\family typewriter 
acall
\layout Verse


\family typewriter 
replace { lcall %1 } by { acall %1 } 
\newline 
replace { ljmp %1 } by { ajmp %1 }
\layout Standard

The 
\emph on 
inline-assembler code
\emph default 
 is also passed through the peep hole optimizer, thus the peephole optimizer
 can also be used as an assembly level macro expander.
 The rules themselves are MCU dependent whereas the rule language infra-structur
e is MCU independent.
 Peephole optimization rules for other MCU can be easily programmed using
 the rule language.
\newline 

\newline 
The syntax for a rule is as follows:
\layout Verse


\family typewriter 
rule := replace [ restart ] '{' <assembly sequence> '
\backslash 
n' 
\newline 
\SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 '}' by '{' '
\backslash 
n' 
\newline 
\SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 <assembly sequence> '
\backslash 
n' 
\newline 
\SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
 '}' [if <functionName> ] '
\backslash 
n' 
\layout Standard

<assembly sequence> := assembly instruction (each instruction including
 labels must be on a separate line).
\newline 

\newline 
The optimizer will apply to the rules one by one from the top in the sequence
 of their appearance, it will terminate when all rules are exhausted.
 If the 'restart' option is specified, then the optimizer will start matching
 the rules again from the top, this option for a rule is expensive (performance)
, it is intended to be used in situations where a transformation will trigger
 the same rule again.
 An example of this (not a good one, it has side effects) is the following
 rule:
\layout Verse


\family typewriter 
replace restart { 
\newline 
\SpecialChar ~
\SpecialChar ~
pop %1 
\newline 
\SpecialChar ~
\SpecialChar ~
push %1 } by { 
\newline 
\SpecialChar ~
\SpecialChar ~
; nop 
\newline 
}
\layout Standard

Note that the replace pattern cannot be a blank, but can be a comment line.
 Without the 'restart' option only the inner most 'pop' 'push' pair would
 be eliminated, i.e.:
\layout Verse


\family typewriter 
pop ar1 
\newline 
pop ar2 
\newline 
push ar2 
\newline 
push ar1
\layout Standard

would result in:
\layout Verse


\family typewriter 
pop ar1 
\newline 
; nop 
\newline 
push ar1
\layout Standard


\emph on 
with
\emph default 
 the restart option the rule will be applied again to the resulting code
 and then all the pop-push pairs will be eliminated to yield:
\layout Verse


\family typewriter 
; nop 
\newline 
; nop
\layout Standard

A conditional function can be attached to a rule.
 Attaching rules are somewhat more involved, let me illustrate this with
 an example.
\layout Verse


\family typewriter 
replace { 
\newline 
\SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
ljmp %5 
\newline 
%2:
\newline 
} by { 
\newline 
\SpecialChar ~
 \SpecialChar ~
 \SpecialChar ~
sjmp %5 
\newline 
%2:
\newline 
} if labelInRange
\layout Standard

The optimizer does a look-up of a function name table defined in function
 
\emph on 
callFuncByName
\emph default 
 in the source file SDCCpeeph.c, with the name 
\emph on 
labelInRange
\emph default 
.
 If it finds a corresponding entry the function is called.
 Note there can be no parameters specified for these functions, in this
 case the use of 
\emph on 
%5
\emph default 
 is crucial, since the function 
\emph on 
labelInRange
\emph default 
 expects to find the label in that particular variable (the hash table containin
g the variable bindings is passed as a parameter).
 If you want to code more such functions, take a close look at the function
 labelInRange and the calling mechanism in source file SDCCpeeph.c.
 Currently implemented are 
\emph on 
labelInRange, labelRefCount, labelIsReturnOnly, operandsNotSame, xramMovcOption,
 24bitMode, portIsDS390, 24bitModeAndPortDS390 
\emph default 
and
\emph on 
 notVolatile
\emph default 
.
\layout Standard

I know this whole thing is a little kludgey, but maybe some day we will
 have some better means.
 If you are looking at this file, you will see the default rules that are
 compiled into the compiler, you can add your own rules in the default set
 there if you get tired of specifying the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-peep-file option.
\layout Section

Library Routines
\emph on 
 
\layout Standard


\emph on 
<pending: this is messy and incomplete>
\emph default 
 
\layout Enumerate

Compiler support routines (_gptrget, _mulint etc)
\layout Enumerate

Stdclib functions (puts, printf, strcat etc)
\layout Enumerate

Math functions (sin, pow, sqrt etc)
\layout Standard

Libraries
\begin_inset LatexCommand \index{Libraries}

\end_inset 

 included in SDCC should have a license at least as liberal as the GNU Lesser
 General Public License
\begin_inset LatexCommand \index{GNU Lesser General Public License, LGPL}

\end_inset 

 
\emph on 
LGPL
\emph default 
.
\layout Comment

license statements for the libraries are missing.
 sdcc/device/lib/ser_ir.c
\layout Comment

or _decdptr f.e.
 come with a GPL (as opposed to LGPL) License - this will not be liberal
 enough for many embedded programmers.
\layout Standard

If you have ported some library or want to share experience about some code
 which f.e.
 falls into any of these categories Busses (I
\begin_inset Formula $^{\textrm{2}}$
\end_inset 

C, CAN, Ethernet, Profibus, Modbus, USB, SPI, JTAG ...), Media (IDE, Memory
 cards, eeprom, flash...), En-/Decryption, Remote debugging, Realtime kernel,
 Keyboard, LCD, RTC, FPGA, PID then the sdcc-user mailing list 
\begin_inset LatexCommand \url{http://sourceforge.net/mail/?group_id=599}

\end_inset 

\SpecialChar ~
would certainly like to hear about it.
 Programmers coding for embedded systems are not especially famous for being
 enthusiastic, so don't expect a big hurray but as the mailing list is searchabl
e these references are very valuable.
\layout Section

External Stack
\begin_inset LatexCommand \label{sub:External-Stack}

\end_inset 


\begin_inset LatexCommand \index{stack}

\end_inset 


\begin_inset LatexCommand \index{External stack}

\end_inset 


\layout Standard

The external stack (-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack option
\begin_inset LatexCommand \index{-\/-xstack}

\end_inset 

) is located at the start of the external ram segment, and is 256 bytes
 in size.
 When -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-xstack option is used to compile the program, the parameters and local
 variables of all reentrant functions are allocated in this area.
 This option is provided for programs with large stack space requirements.
 When used with the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-stack-auto
\begin_inset LatexCommand \index{-\/-stack-auto}

\end_inset 

 option, all parameters and local variables are allocated on the external
 stack (note support libraries will need to be recompiled with the same
 options).
\layout Standard

The compiler outputs the higher order address byte of the external ram segment
 into PORT P2, therefore when using the External Stack option, this port
 MAY NOT be used by the application program.
\layout Section

ANSI-Compliance
\begin_inset LatexCommand \index{ANSI-compliance}

\end_inset 


\begin_inset LatexCommand \label{sub:ANSI-Compliance}

\end_inset 


\layout Standard

Deviations from the compliance:
\layout Itemize

functions are not always reentrant
\begin_inset LatexCommand \index{reentrant}

\end_inset 

.
\layout Itemize

structures cannot be assigned values directly, cannot be passed as function
 parameters or assigned to each other and cannot be a return value from
 a function, e.g.:
\begin_deeper 
\layout Verse


\family typewriter 
struct s { ...
 }; 
\newline 
struct s s1, s2; 
\newline 
foo() 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
s1 = s2 ; /* is invalid in SDCC although allowed in ANSI */ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\newline 
struct s foo1 (struct s parms) /* invalid in SDCC although allowed in ANSI
 */
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
struct s rets; 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return rets;/* is invalid in SDCC although allowed in ANSI */ 
\newline 
}
\end_deeper 
\layout Itemize

'long long
\begin_inset LatexCommand \index{long long (not supported)}

\end_inset 

' (64 bit integers
\begin_inset LatexCommand \index{int (64 bit) (not supported)}

\end_inset 

) not supported.
\layout Itemize

'double
\begin_inset LatexCommand \index{double (not supported)}

\end_inset 

' precision floating point 
\begin_inset LatexCommand \index{Floating point support}

\end_inset 

not supported.
\layout Itemize

No support for setjmp
\begin_inset LatexCommand \index{setjmp (not supported)}

\end_inset 

 and longjmp
\begin_inset LatexCommand \index{longjmp (not supported)}

\end_inset 

 (for now).
\layout Itemize

Old K&R style
\begin_inset LatexCommand \index{K\&R style}

\end_inset 

 function declarations are NOT allowed.
\begin_deeper 
\layout Verse


\family typewriter 
foo(i,j) /* this old style of function declarations */ 
\newline 
int i,j; /* are valid in ANSI but not valid in SDCC */ 
\newline 
{ 
\newline 
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...
 
\newline 
}
\end_deeper 
\layout Itemize

functions declared as pointers
\begin_inset LatexCommand \index{Pointers}

\end_inset 


\begin_inset LatexCommand \index{function pointers}

\end_inset 

 must be dereferenced during the call.
\begin_deeper 
\layout Verse


\family typewriter 
int (*foo)();
\newline 
...
 
\newline 
/* has to be called like this */ 
\newline 
(*foo)(); /* ANSI standard allows calls to be made like 'foo()' */
\end_deeper 
\layout Section

Cyclomatic Complexity
\begin_inset LatexCommand \index{Cyclomatic complexity}

\end_inset 


\layout Standard

Cyclomatic complexity of a function is defined as the number of independent
 paths the program can take during execution of the function.
 This is an important number since it defines the number test cases you
 have to generate to validate the function.
 The accepted industry standard for complexity number is 10, if the cyclomatic
 complexity reported by SDCC exceeds 10 you should think about simplification
 of the function logic.
 Note that the complexity level is not related to the number of lines of
 code in a function.
 Large functions can have low complexity, and small functions can have large
 complexity levels.
 
\newline 

\newline 
SDCC uses the following formula to compute the complexity:
\newline 

\layout Standard

complexity = (number of edges in control flow graph) - (number of nodes
 in control flow graph) + 2;
\newline 

\newline 
Having said that the industry standard is 10, you should be aware that in
 some cases it be may unavoidable to have a complexity level of less than
 10.
 For example if you have switch statement with more than 10 case labels,
 each case label adds one to the complexity level.
 The complexity level is by no means an absolute measure of the algorithmic
 complexity of the function, it does however provide a good starting point
 for which functions you might look at for further optimization.
\layout Section

Other Processors
\layout Subsection

MCS51 variants
\begin_inset LatexCommand \label{sub:MCS51-variants}

\end_inset 


\begin_inset LatexCommand \index{MCS51 variants}

\end_inset 


\layout Standard

MCS51 processors are available from many vendors and come in many different
 flavours.
 While they might differ considerably in respect to Special Function Registers
 the core MCS51 is usually not modified or is kept compatible.
 
\layout Subsubsection*

pdata access by SFR
\begin_inset LatexCommand \index{sfr}

\end_inset 

 
\layout Standard

With the upcome of devices with internal xdata and flash memory devices
 using port P2 as dedicated I/O port is becoming more popular.
 Switching the high byte for pdata
\begin_inset LatexCommand \index{pdata}

\end_inset 

 access which was formerly done by port P2 is then achieved by a Special
 Function Register.
 In well-established MCS51 tradition the address of this 
\emph on 
sfr
\emph default 
 is where the chip designers decided to put it.
 As pdata addressing is used in the startup code for the initialization
 of xdata variables a separate startup code should be used as described
 in section 
\begin_inset LatexCommand \ref{sub:Startup-Code}

\end_inset 

.
\layout Subsubsection*

Other Features available by SFR
\layout Standard

Some MCS51 variants offer features like Double DPTR
\begin_inset LatexCommand \index{DPTR}

\end_inset 

, multiple DPTR, decrementing DPTR, 16x16 Multiply.
 These are currently not used for the MCS51 port.
 If you absolutely need them you can fall back to inline assembly or submit
 a patch to SDCC.
\layout Subsection

The Z80 and gbz80 port
\layout Standard

SDCC can target both the Zilog 
\begin_inset LatexCommand \index{Z80}

\end_inset 

 and the Nintendo Gameboy's Z80-like gbz80
\begin_inset LatexCommand \index{gbz80 (GameBoy Z80)}

\end_inset 

.
 The Z80 port is passed through the same 
\emph on 
regressions tests
\begin_inset LatexCommand \index{Regression test}

\end_inset 


\emph default 
 as MCS51 and DS390 ports, so floating point support, support for long variables
 and bitfield support is fine.
 See mailing lists and forums about interrupt routines and access to I/O
 memory.
\layout Standard

As always, the code is the authoritative reference - see z80/ralloc.c and
 z80/gen.c.
 The stack
\begin_inset LatexCommand \index{stack}

\end_inset 

 frame is similar to that generated by the IAR Z80 compiler.
 IX is used as the base pointer, HL is used as a temporary register, and
 BC and DE are available for holding variables.
 IY is currently unused.
 Return values
\begin_inset LatexCommand \index{return value}

\end_inset 

 are stored in HL.
 One bad side effect of using IX as the base pointer is that a functions
 stack frame is limited to 127 bytes - this will be fixed in a later version.
\layout Subsection

The HC08 port
\layout Standard

The port to the Motorola HC08
\begin_inset LatexCommand \index{HC08}

\end_inset 

 family has been added in October 2003, thank you Erik!
\layout Section

Retargetting for other MCUs.
\layout Standard

The issues for retargetting the compiler are far too numerous to be covered
 by this document.
 What follows is a brief description of each of the seven phases of the
 compiler and its MCU dependency.
\layout Itemize

Parsing the source and building the annotated parse tree.
 This phase is largely MCU independent (except for the language extensions).
 Syntax & semantic checks are also done in this phase, along with some initial
 optimizations like back patching labels and the pattern matching optimizations
 like bit-rotation etc.
\layout Itemize

The second phase involves generating an intermediate code which can be easy
 manipulated during the later phases.
 This phase is entirely MCU independent.
 The intermediate code generation assumes the target machine has unlimited
 number of registers, and designates them with the name iTemp.
 The compiler can be made to dump a human readable form of the code generated
 by using the -
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-dumpraw option.
\layout Itemize

This phase does the bulk of the standard optimizations and is also MCU independe
nt.
 This phase can be broken down into several sub-phases:
\newline 

\newline 
Break down intermediate code (iCode) into basic blocks.
\newline 
Do control flow & data flow analysis on the basic blocks.
\newline 
Do local common subexpression elimination, then global subexpression elimination
\newline 
Dead code elimination
\newline 
Loop optimizations
\newline 
If loop optimizations caused any changes then do 'global subexpression eliminati
on' and 'dead code elimination' again.
\layout Itemize

This phase determines the live-ranges; by live range I mean those iTemp
 variables defined by the compiler that still survive after all the optimization
s.
 Live range analysis
\begin_inset LatexCommand \index{Live range analysis}

\end_inset 

 is essential for register allocation, since these computation determines
 which of these iTemps will be assigned to registers, and for how long.
\layout Itemize

Phase five is register allocation.
 There are two parts to this process.
\newline 

\newline 
The first part I call 'register packing' (for lack of a better term).
 In this case several MCU specific expression folding is done to reduce
 register pressure.
\newline 

\newline 
The second part is more MCU independent and deals with allocating registers
 to the remaining live ranges.
 A lot of MCU specific code does creep into this phase because of the limited
 number of index registers available in the 8051.
\layout Itemize

The Code generation phase is (unhappily), entirely MCU dependent and very
 little (if any at all) of this code can be reused for other MCU.
 However the scheme for allocating a homogenized assembler operand for each
 iCode operand may be reused.
\layout Itemize

As mentioned in the optimization section the peep-hole optimizer is rule
 based system, which can reprogrammed for other MCUs.
\layout Chapter

Compiler internals
\begin_inset LatexCommand \index{Compiler internals}

\end_inset 


\layout Section

The anatomy of the compiler
\begin_inset LatexCommand \label{sub:The-anatomy-of}

\end_inset 


\layout Standard


\shape italic 
This is an excerpt from an article published in Circuit Cellar Magazine
 in august 2000.
 It's a little outdated (the compiler is much more efficient now and user/develo
per friendly), but pretty well exposes the guts of it all.
\shape default 

\newline 

\newline 
The current version of SDCC can generate code for Intel 8051 and Z80 MCU.
 It is fairly easy to retarget for other 8-bit MCU.
 Here we take a look at some of the internals of the compiler.
 
\layout Paragraph*

Parsing
\begin_inset LatexCommand \index{Parsing}

\end_inset 

 
\layout Standard

Parsing the input source file and creating an AST (Annotated Syntax Tree
\begin_inset LatexCommand \index{Annotated syntax tree}

\end_inset 

).
 This phase also involves propagating types (annotating each node of the
 parse tree with type information) and semantic analysis.
 There are some MCU specific parsing rules.
 For example the storage classes, the extended storage classes are MCU specific
 while there may be a xdata storage class for 8051 there is no such storage
 class for z80 or Atmel AVR.
 SDCC allows MCU specific storage class extensions, i.e.
 xdata will be treated as a storage class specifier when parsing 8051 C
 code but will be treated as a C identifier when parsing z80 or ATMEL AVR
 C code.
\layout Paragraph*

Generating iCode
\begin_inset LatexCommand \index{iCode}

\end_inset 


\layout Standard

Intermediate code generation.
 In this phase the AST is broken down into three-operand form (iCode).
 These three operand forms are represented as doubly linked lists.
 ICode is the term given to the intermediate form generated by the compiler.
 ICode example section shows some examples of iCode generated for some simple
 C source functions.
\layout Paragraph*

Optimizations
\begin_inset LatexCommand \index{Optimizations}

\end_inset 

.
\layout Standard

Bulk of the target independent optimizations is performed in this phase.
 The optimizations include constant propagation, common sub-expression eliminati
on, loop invariant code movement, strength reduction of loop induction variables
 and dead-code elimination.
\layout Paragraph*

Live range analysis
\begin_inset LatexCommand \index{Live range analysis}

\end_inset 


\layout Standard

During intermediate code generation phase, the compiler assumes the target
 machine has infinite number of registers and generates a lot of temporary
 variables.
 The live range computation determines the lifetime of each of these compiler-ge
nerated temporaries.
 A picture speaks a thousand words.
 ICode example sections show the live range annotations for each of the
 operand.
 It is important to note here, each iCode is assigned a number in the order
 of its execution in the function.
 The live ranges are computed in terms of these numbers.
 The from number is the number of the iCode which first defines the operand
 and the to number signifies the iCode which uses this operand last.
\layout Paragraph*

Register Allocation
\begin_inset LatexCommand \index{Register allocation}

\end_inset 


\layout Standard

The register allocation determines the type and number of registers needed
 by each operand.
 In most MCUs only a few registers can be used for indirect addressing.
 In case of 8051 for example the registers R0 & R1 can be used to indirectly
 address the internal ram and DPTR to indirectly address the external ram.
 The compiler will try to allocate the appropriate register to pointer variables
 if it can.
 ICode example section shows the operands annotated with the registers assigned
 to them.
 The compiler will try to keep operands in registers as much as possible;
 there are several schemes the compiler uses to do achieve this.
 When the compiler runs out of registers the compiler will check to see
 if there are any live operands which is not used or defined in the current
 basic block being processed, if there are any found then it will push that
 operand and use the registers in this block, the operand will then be popped
 at the end of the basic block.
 
\layout Standard

There are other MCU specific considerations in this phase.
 Some MCUs have an accumulator; very short-lived operands could be assigned
 to the accumulator instead of general-purpose register.
\layout Paragraph*

Code generation
\layout Standard

Figure II gives a table of iCode operations supported by the compiler.
 The code generation involves translating these operations into corresponding
 assembly code for the processor.
 This sounds overly simple but that is the essence of code generation.
 Some of the iCode operations are generated on a MCU specific manner for
 example, the z80 port does not use registers to pass parameters so the
 SEND and RECV iCode operations will not be generated, and it also does
 not support JUMPTABLES.
 
\newline 

\series bold 
\shape italic 
\color red
<Where is Figure II ?>
\layout Paragraph*

ICode Example
\begin_inset LatexCommand \index{iCode}

\end_inset 


\layout Standard

This section shows some details of iCode.
 The example C code does not do anything useful; it is used as an example
 to illustrate the intermediate code generated by the compiler.
\layout Verse


\family typewriter 
1.\SpecialChar ~
xdata int * p;
\newline 
2.\SpecialChar ~
int gint;
\newline 
3.\SpecialChar ~
/* This function does nothing useful.
 It is used
\newline 
4.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
for the purpose of explaining iCode */
\newline 
5.\SpecialChar ~
short function (data int *x)
\newline 
6.\SpecialChar ~
{
\newline 
7.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
short i=10; /* dead initialization eliminated */
\newline 
8.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
short sum=10; /* dead initialization eliminated */
\newline 
9.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
short mul;
\newline 
10.\SpecialChar ~
\SpecialChar ~
int j ;
\newline 
11.\SpecialChar ~
\SpecialChar ~
while (*x) *x++ = *p++; 
\newline 
12.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
sum = 0 ; 
\newline 
13.\SpecialChar ~
\SpecialChar ~
mul = 0;
\newline 
14.\SpecialChar ~
\SpecialChar ~
/* compiler detects i,j to be induction variables */
\newline 
15.\SpecialChar ~
\SpecialChar ~
for (i = 0, j = 10 ; i < 10 ; i++, j
\family default 
-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
/
\end_inset 

-
\family typewriter 
) {
\newline 
16.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
sum += i;
\newline 
17.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
mul += i * 3; /* this multiplication remains */
\newline 
18.\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
gint += j * 3;/* this multiplication changed to addition */
\newline 
19.\SpecialChar ~
\SpecialChar ~
}
\newline 
20.\SpecialChar ~
\SpecialChar ~
return sum+mul;
\newline 
21.\SpecialChar ~
}
\layout Standard

In addition to the operands each iCode contains information about the filename
 and line it corresponds to in the source file.
 The first field in the listing should be interpreted as follows:
\newline 

\shape italic 
\size footnotesize 
Filename(linenumber: iCode Execution sequence number : ICode hash table
 key : loop depth of the iCode).
\shape default 
\size default 

\newline 
Then follows the human readable form of the ICode operation.
 Each operand of this triplet form can be of three basic types a) compiler
 generated temporary b) user defined variable c) a constant value.
 Note that local variables and parameters are replaced by compiler generated
 temporaries.
 Live ranges
\begin_inset LatexCommand \index{Live range analysis}

\end_inset 

 are computed only for temporaries (i.e.
 live ranges are not computed for global variables).
 Registers
\begin_inset LatexCommand \index{Register allocation}

\end_inset 

 are allocated for temporaries only.
 Operands are formatted in the following manner:
\newline 

\shape italic 
\size footnotesize 
Operand Name [lr live-from : live-to ] { type information } [ registers
 allocated ].
\shape default 
\size default 

\newline 
As mentioned earlier the live ranges are computed in terms of the execution
 sequence number of the iCodes, for example 
\newline 
the iTemp0 is live from (i.e.
 first defined in iCode with execution sequence number 3, and is last used
 in the iCode with sequence number 5).
 For induction variables such as iTemp21 the live range computation extends
 the lifetime from the start to the end of the loop.
\newline 
The register allocator used the live range information to allocate registers,
 the same registers may be used for different temporaries if their live
 ranges do not overlap, for example r0 is allocated to both iTemp6 and to
 iTemp17 since their live ranges do not overlap.
 In addition the allocator also takes into consideration the type and usage
 of a temporary, for example itemp6 is a pointer to near space and is used
 as to fetch data from (i.e.
 used in GET_VALUE_AT_ADDRESS) so it is allocated a pointer registers (r0).
 Some short lived temporaries are allocated to special registers which have
 meaning to the code generator e.g.
 iTemp13 is allocated to a pseudo register CC which tells the back end that
 the temporary is used only for a conditional jump the code generation makes
 use of this information to optimize a compare and jump ICode.
\newline 
There are several loop optimizations
\begin_inset LatexCommand \index{Loop optimization}

\end_inset 

 performed by the compiler.
 It can detect induction variables iTemp21(i) and iTemp23(j).
 Also note the compiler does selective strength reduction
\begin_inset LatexCommand \index{Strength reduction}

\end_inset 

, i.e.
 the multiplication of an induction variable in line 18 (gint = j * 3) is
 changed to addition, a new temporary iTemp17 is allocated and assigned
 a initial value, a constant 3 is then added for each iteration of the loop.
 The compiler does not change the multiplication
\begin_inset LatexCommand \index{Multiplication}

\end_inset 

 in line 17 however since the processor does support an 8 * 8 bit multiplication.
\newline 
Note the dead code elimination
\begin_inset LatexCommand \index{Dead-code elimination}

\end_inset 

 optimization eliminated the dead assignments in line 7 & 8 to I and sum
 respectively.
\newline 

\layout Standard


\size footnotesize 
Sample.c (5:1:0:0) _entry($9) :
\layout Standard


\size footnotesize 
Sample.c(5:2:1:0) proc _function [lr0:0]{function short}
\layout Standard


\size footnotesize 
Sample.c(11:3:2:0) iTemp0 [lr3:5]{_near * int}[r2] = recv 
\layout Standard


\size footnotesize 
Sample.c(11:4:53:0) preHeaderLbl0($11) :
\layout Standard


\size footnotesize 
Sample.c(11:5:55:0) iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near
 * int}[r2]
\layout Standard


\size footnotesize 
Sample.c(11:6:5:1) _whilecontinue_0($1) :
\layout Standard


\size footnotesize 
Sample.c(11:7:7:1) iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near *
 int}[r0]]
\layout Standard


\size footnotesize 
Sample.c(11:8:8:1) if iTemp4 [lr7:8]{int}[r2 r3] == 0 goto _whilebreak_0($3)
\layout Standard


\size footnotesize 
Sample.c(11:9:14:1) iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far
 * int}
\layout Standard


\size footnotesize 
Sample.c(11:10:15:1) _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2
 {short}
\layout Standard


\size footnotesize 
Sample.c(11:13:18:1) iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far
 * int}[DPTR]]
\layout Standard


\size footnotesize 
Sample.c(11:14:19:1) *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int
}[r2 r3]
\layout Standard


\size footnotesize 
Sample.c(11:15:12:1) iTemp6 [lr5:16]{_near * int}[r0] = iTemp6 [lr5:16]{_near
 * int}[r0] + 0x2 {short}
\layout Standard


\size footnotesize 
Sample.c(11:16:20:1) goto _whilecontinue_0($1)
\layout Standard


\size footnotesize 
Sample.c(11:17:21:0)_whilebreak_0($3) :
\layout Standard


\size footnotesize 
Sample.c(12:18:22:0) iTemp2 [lr18:40]{short}[r2] := 0x0 {short}
\layout Standard


\size footnotesize 
Sample.c(13:19:23:0) iTemp11 [lr19:40]{short}[r3] := 0x0 {short}
\layout Standard


\size footnotesize 
Sample.c(15:20:54:0)preHeaderLbl1($13) :
\layout Standard


\size footnotesize 
Sample.c(15:21:56:0) iTemp21 [lr21:38]{short}[r4] := 0x0 {short}
\layout Standard


\size footnotesize 
Sample.c(15:22:57:0) iTemp23 [lr22:38]{int}[r5 r6] := 0xa {int}
\layout Standard


\size footnotesize 
Sample.c(15:23:58:0) iTemp17 [lr23:38]{int}[r7 r0] := 0x1e {int}
\layout Standard


\size footnotesize 
Sample.c(15:24:26:1)_forcond_0($4) :
\layout Standard


\size footnotesize 
Sample.c(15:25:27:1) iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4]
 < 0xa {short}
\layout Standard


\size footnotesize 
Sample.c(15:26:28:1) if iTemp13 [lr25:26]{char}[CC] == 0 goto _forbreak_0($7)
\layout Standard


\size footnotesize 
Sample.c(16:27:31:1) iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2]
 + ITemp21 [lr21:38]{short}[r4]
\layout Standard


\size footnotesize 
Sample.c(17:29:33:1) iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4]
 * 0x3 {short}
\layout Standard


\size footnotesize 
Sample.c(17:30:34:1) iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3]
 + iTemp15 [lr29:30]{short}[r1]
\layout Standard


\size footnotesize 
Sample.c(18:32:36:1:1) iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7
 r0]- 0x3 {short}
\layout Standard


\size footnotesize 
Sample.c(18:33:37:1) _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{
int}[r7 r0]
\layout Standard


\size footnotesize 
Sample.c(15:36:42:1) iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4]
 + 0x1 {short}
\layout Standard


\size footnotesize 
Sample.c(15:37:45:1) iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5
 r6]- 0x1 {short}
\layout Standard


\size footnotesize 
Sample.c(19:38:47:1) goto _forcond_0($4)
\layout Standard


\size footnotesize 
Sample.c(19:39:48:0)_forbreak_0($7) :
\layout Standard


\size footnotesize 
Sample.c(20:40:49:0) iTemp24 [lr40:41]{short}[DPTR] = iTemp2 [lr18:40]{short}[r2]
 + ITemp11 [lr19:40]{short}[r3]
\layout Standard


\size footnotesize 
Sample.c(20:41:50:0) ret iTemp24 [lr40:41]{short}
\layout Standard


\size footnotesize 
Sample.c(20:42:51:0)_return($8) :
\layout Standard


\size footnotesize 
Sample.c(20:43:52:0) eproc _function [lr0:0]{ ia0 re0 rm0}{function short}
\size default 

\newline 

\newline 
Finally the code generated for this function:
\newline 

\layout Standard


\size footnotesize 
.area DSEG (DATA)
\layout Standard


\size footnotesize 
_p::
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
.ds 2
\layout Standard


\size footnotesize 
_gint::
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
.ds 2
\layout Standard


\size footnotesize 
; sample.c 5
\layout Standard


\size footnotesize 
; ----------------------------------------------
\layout Standard


\size footnotesize 
; function function
\layout Standard


\size footnotesize 
; ----------------------------------------------
\layout Standard


\size footnotesize 
_function:
\layout Standard


\size footnotesize 
; iTemp0 [lr3:5]{_near * int}[r2] = recv 
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r2,dpl
\layout Standard


\size footnotesize 
; iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near * int}[r2]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov ar0,r2
\layout Standard


\size footnotesize 
;_whilecontinue_0($1) :
\layout Standard


\size footnotesize 
00101$:
\layout Standard


\size footnotesize 
; iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near * int}[r0]]
\layout Standard


\size footnotesize 
; if iTemp4 [lr7:8]{int}[r2 r3] == 0 goto _whilebreak_0($3)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov ar2,@r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
inc r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov ar3,@r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
dec r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r2
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
orl a,r3
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
jz 00103$
\layout Standard


\size footnotesize 
00114$:
\layout Standard


\size footnotesize 
; iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far * int}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov dpl,_p
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov dph,(_p + 1)
\layout Standard


\size footnotesize 
; _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,#0x02
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,_p
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov _p,a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
clr a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
addc a,(_p + 1)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov (_p + 1),a
\layout Standard


\size footnotesize 
; iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far * int}[DPTR]]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
movx a,@dptr
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r2,a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
inc dptr
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
movx a,@dptr
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r3,a
\layout Standard


\size footnotesize 
; *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int}[r2 r3]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov @r0,ar2
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
inc r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov @r0,ar3
\layout Standard


\size footnotesize 
; iTemp6 [lr5:16]{_near * int}[r0] = 
\layout Standard


\size footnotesize 
; iTemp6 [lr5:16]{_near * int}[r0] + 
\layout Standard


\size footnotesize 
; 0x2 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
inc r0
\layout Standard


\size footnotesize 
; goto _whilecontinue_0($1)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
sjmp 00101$
\layout Standard


\size footnotesize 
; _whilebreak_0($3) :
\layout Standard


\size footnotesize 
00103$:
\layout Standard


\size footnotesize 
; iTemp2 [lr18:40]{short}[r2] := 0x0 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r2,#0x00
\layout Standard


\size footnotesize 
; iTemp11 [lr19:40]{short}[r3] := 0x0 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r3,#0x00
\layout Standard


\size footnotesize 
; iTemp21 [lr21:38]{short}[r4] := 0x0 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r4,#0x00
\layout Standard


\size footnotesize 
; iTemp23 [lr22:38]{int}[r5 r6] := 0xa {int}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r5,#0x0A
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r6,#0x00
\layout Standard


\size footnotesize 
; iTemp17 [lr23:38]{int}[r7 r0] := 0x1e {int}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r7,#0x1E
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r0,#0x00
\layout Standard


\size footnotesize 
; _forcond_0($4) :
\layout Standard


\size footnotesize 
00104$:
\layout Standard


\size footnotesize 
; iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4] < 0xa {short}
\layout Standard


\size footnotesize 
; if iTemp13 [lr25:26]{char}[CC] == 0 goto _forbreak_0($7)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
clr c
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r4
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
xrl a,#0x80
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
subb a,#0x8a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
jnc 00107$
\layout Standard


\size footnotesize 
00115$:
\layout Standard


\size footnotesize 
; iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2] + 
\layout Standard


\size footnotesize 
; iTemp21 [lr21:38]{short}[r4]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r4
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,r2
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r2,a
\layout Standard


\size footnotesize 
; iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4] * 0x3 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov b,#0x03
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r4
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mul ab
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r1,a
\layout Standard


\size footnotesize 
; iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3] + 
\layout Standard


\size footnotesize 
; iTemp15 [lr29:30]{short}[r1]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,r3
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r3,a
\layout Standard


\size footnotesize 
; iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7 r0]- 0x3 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r7
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,#0xfd
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r7,a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
addc a,#0xff
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov r0,a
\layout Standard


\size footnotesize 
; _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{int}[r7 r0]
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r7
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,_gint
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov _gint,a
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r0
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
addc a,(_gint + 1)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov (_gint + 1),a
\layout Standard


\size footnotesize 
; iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4] + 0x1 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
inc r4
\layout Standard


\size footnotesize 
; iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5 r6]- 0x1 {short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
dec r5
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
cjne r5,#0xff,00104$
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
dec r6
\layout Standard


\size footnotesize 
; goto _forcond_0($4)
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
sjmp 00104$
\layout Standard


\size footnotesize 
; _forbreak_0($7) :
\layout Standard


\size footnotesize 
00107$:
\layout Standard


\size footnotesize 
; ret iTemp24 [lr40:41]{short}
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov a,r3
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
add a,r2
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
mov dpl,a
\layout Standard


\size footnotesize 
; _return($8) :
\layout Standard


\size footnotesize 
00108$:
\layout Standard


\size footnotesize 
\SpecialChar ~
\SpecialChar ~
ret
\newline 

\layout Section

A few words about basic block successors, predecessors and dominators
\layout Standard

Successors are basic blocks
\begin_inset LatexCommand \index{Basic blocks}

\end_inset 

 that might execute after this basic block.
\newline 
Predecessors are basic blocks that might execute before reaching this basic
 block.
\newline 
Dominators are basic blocks that WILL execute before reaching this basic
 block.
\newline 

\layout Standard

[basic block 1]
\layout Standard

if (something)
\layout Standard

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
[basic block 2]
\layout Standard

else
\layout Standard

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
[basic block 3]
\layout Standard

[basic block 4]
\newline 

\layout Standard

a) succList of [BB2] = [BB4], of [BB3] = [BB4], of [BB1] = [BB2,BB3]
\layout Standard

b) predList of [BB2] = [BB1], of [BB3] = [BB1], of [BB4] = [BB2,BB3]
\layout Standard

c) domVect of [BB4] = BB1 ...
 here we are not sure if BB2 or BB3 was executed but we are SURE that BB1
 was executed.
\layout Chapter

Acknowledgments
\layout Standard


\begin_inset LatexCommand \url{http://sdcc.sourceforge.net#Who}

\end_inset 


\newline 

\newline 

\emph on 
Thanks to all the other volunteer developers who have helped with coding,
 testing, web-page creation, distribution sets, etc.
 You know who you are :-)
\emph default 

\newline 

\layout Standard

This document was initially written by Sandeep Dutta
\layout Standard

All product names mentioned herein may be trademarks
\begin_inset LatexCommand \index{Trademarks}

\end_inset 

 of their respective companies.
 
\layout Section*

Alphabetical index
\layout Standard

To avoid confusion, the installation and building options for SDCC itself
 (chapter 2) are not part of the index.
\layout Standard


\begin_inset LatexCommand \printindex{}

\end_inset 


\the_end
