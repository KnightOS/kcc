#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\pdfoptionpdfminorversion=3
\usepackage[
  pdftitle={Proposed Test Suite Design},
  pdfauthor={Michael Hope},
  pdfkeywords={c case compiler framework GPL regression SDCC suite test},
  colorlinks=true,
  linkcolor=blue] {hyperref}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Proposed Test Suite Design
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
date{2001-07-13}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Michael Hope (michaelh @ juju.net.nz)
\end_layout

\begin_layout Abstract
This article describes the goals, requirements, and suggested specification
 for a test suite for the output of the Small Device C Compiler (sdcc).
 Also included is a short list of existing works.
 
\end_layout

\begin_layout Section
Goals
\end_layout

\begin_layout Standard
The main goals of a test suite for sdcc are 
\end_layout

\begin_layout Enumerate
To allow developers to run regression tests to check that core changes do
 not break any of the many ports.
 
\end_layout

\begin_layout Enumerate
To verify the core.
 
\end_layout

\begin_layout Enumerate
To allow developers to verify individual ports.
 
\end_layout

\begin_layout Enumerate
To allow developers to test port changes.
 
\end_layout

\begin_layout Standard
This design only covers the generated code.
 It does not cover a test/unit test framework for the sdcc application itself,
 which may be useful.
\end_layout

\begin_layout Standard
One side effect of (1) is that it requires that the individual ports pass
 the tests originally.
 This may be too hard.
 See the section on Exceptions below.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Subsection
Coverage
\end_layout

\begin_layout Standard
The suite is intended to cover language features only.
 Hardware specific libraries are explicitly not covered.
\end_layout

\begin_layout Subsection
Permutations
\end_layout

\begin_layout Standard
The ports often generate different code for handling different types (Byte,
 Word, DWord, and the signed forms).
 Meta information could be used to permute the different test cases across
 the different types.
\end_layout

\begin_layout Subsection
Exceptions
\end_layout

\begin_layout Standard
The different ports are all at different levels of development.
 Test cases must be able to be disabled on a per port basis.
 Permutations also must be able to be disabled on a port level for unsupported
 cases.
 Disabling, as opposed to enabling, on a per port basis seems more maintainable.
\end_layout

\begin_layout Subsection
Running
\end_layout

\begin_layout Standard
The tests must be able to run unaided.
 The test suite must run on all platforms that sdcc runs on.
 A good minimum may be a subset of Unix command set and common tools, provided
 by default on a Unix host and provided through cygwin on a Windows host.
\end_layout

\begin_layout Standard
The tests suits should be able to be sub-divided, so that the failing or
 interesting tests may be run separately.
\end_layout

\begin_layout Subsection
Artifacts
\end_layout

\begin_layout Standard
The test code within the test cases should not generate artifacts.
 An artifact occurs when the test code itself interferes with the test and
 generates an erroneous result.
\end_layout

\begin_layout Subsection
Emulators
\end_layout

\begin_layout Standard
sdcc is a cross compiling compiler.
 As such, an emulator is needed for each port to run the tests.
\end_layout

\begin_layout Section
Existing works
\end_layout

\begin_layout Subsection
DejaGnu
\end_layout

\begin_layout Standard
DejaGnu is a toolkit written in Expect designed to test an interactive program.
 It provides a way of specifying an interface to the program, and given
 that interface a way of stimulating the program and interpreting the results.
 It was originally written by Cygnus Solutions for running against development
 boards.
 I believe the gcc test suite is written against DejaGnu, perhaps partly
 to test the Cygnus ports of gcc on target systems.
\end_layout

\begin_layout Subsection
gcc test suite
\end_layout

\begin_layout Standard
I don't know much about the gcc test suite.
 It was recently removed from the gcc distribution due to issues with copyright
 ownership.
 The code I saw from older distributions seemed more concerned with esoteric
 features of the language.
\end_layout

\begin_layout Subsection
xUnit
\end_layout

\begin_layout Standard
The xUnit family, in particular JUnit, is a library of in test assertions,
 test wrappers, and test suite wrappers designed mainly for unit testing.
 PENDING: More.
\end_layout

\begin_layout Subsection
CoreLinux++ Assertion framework
\end_layout

\begin_layout Standard
While not a test suite system, the assertion framework is an interesting
 model for the types of assertions that could be used.
 They include pre-condition, post-condition, invariants, conditional assertions,
 unconditional assertions, and methods for checking conditions.
\end_layout

\begin_layout Section
Specification
\end_layout

\begin_layout Standard
This specification borrows from the JUnit style of unit testing and the
 CoreLinux++ style of assertions.
 The emphasis is on maintainability and ease of writing the test cases.
\end_layout

\begin_layout Subsection
Terms
\end_layout

\begin_layout Standard
PENDING: Align these terms with the rest of the world.
\end_layout

\begin_layout Itemize
An 
\emph on
assertion
\emph default
 is a statement of how things should be.
 PENDING: Better description, an example.
 
\end_layout

\begin_layout Itemize
A 
\emph on
test point
\emph default
 is the smallest unit of a test suite, and consists of a single assertion
 that passes if the test passes.
 
\end_layout

\begin_layout Itemize
A 
\emph on
test case
\emph default
 is a set of test points that test a certain feature.
 
\end_layout

\begin_layout Itemize
A 
\emph on
test suite
\emph default
 is a set of test cases that test a certain set of features.
 
\end_layout

\begin_layout Subsection
Test cases
\end_layout

\begin_layout Standard
Test cases shall be contained in their own C file, along with the meta data
 on the test.
 Test cases shall be contained within functions whose names start with 'test'
 and which are descriptive of the test case.
 Any function that starts with 'test' will be automatically run in the test
 suite.
\end_layout

\begin_layout Standard
To make the automatic code generation easier, the C code shall have this
 format 
\end_layout

\begin_layout Itemize
Test functions shall start with 'test' to allow automatic detection.
 
\end_layout

\begin_layout Itemize
Test functions shall follow the K&R intention style for ease of detection.
 i.e.
 the function name shall start in the left column on a new line below the
 return specification.
 
\end_layout

\begin_layout Subsection
Assertions
\end_layout

\begin_layout Standard
All assertions shall log the line number, function name, and test case file
 when they fail.
 Most assertions can have a more descriptive message attached to them.
 Assertions will be implemented through macros to get at the line information.
 This may cause trouble with artifacts.
\end_layout

\begin_layout Standard
The following definitions use C++ style default arguments where optional
 messages may be inserted.
 All assertions use double opening and closing brackets in the macros to
 allow them to be compiled out without any side effects.
 While this is not required for a test suite, they are there in case any
 of this code is incorporated into the main product.
\end_layout

\begin_layout Standard
Borrowing from JUnit, the assertions shall include 
\end_layout

\begin_layout Itemize
FAIL((String msg = 
\begin_inset Quotes eld
\end_inset

Failed
\begin_inset Quotes erd
\end_inset

)).
 Used when execution should not get here.
 
\end_layout

\begin_layout Itemize
ASSERT((Boolean cond, String msg = 
\begin_inset Quotes eld
\end_inset

Assertion failed
\begin_inset Quotes erd
\end_inset

).
 Fails if cond is false.
 Parent to REQUIRE and ENSURE.
 
\end_layout

\begin_layout Standard
JUnit also includes may sub-cases of ASSERT, such as assertNotNull, assertEquals
, and assertSame.
\end_layout

\begin_layout Standard
CoreLinux++ includes the extra assertions 
\end_layout

\begin_layout Itemize
REQUIRE((Boolean cond, String msg = 
\begin_inset Quotes eld
\end_inset

Precondition failed
\begin_inset Quotes erd
\end_inset

).
 Checks preconditions.
 
\end_layout

\begin_layout Itemize
ENSURE((Boolean cond, String msg = 
\begin_inset Quotes eld
\end_inset

Postcondition failed
\begin_inset Quotes erd
\end_inset

).
 Checks post conditions.
 
\end_layout

\begin_layout Itemize
CHECK((Boolean cond, String msg = 
\begin_inset Quotes eld
\end_inset

Check failed
\begin_inset Quotes erd
\end_inset

)).
 Used to call a function and to check that the return value is as expected.
 i.e.
 CHECK((fread(in, buf, 10) != -1)).
 Very similar to ASSERT, but the function still gets called in a release
 build.
 
\end_layout

\begin_layout Itemize
FORALL and EXISTS.
 Used to check conditions within part of the code.
 For example, can be used to check that a list is still sorted inside each
 loop of a sort routine.
 
\end_layout

\begin_layout Standard
All of FAIL, ASSERT, REQUIRE, ENSURE, and CHECK shall be available.
\end_layout

\begin_layout Subsection
Meta data
\end_layout

\begin_layout Standard
PENDING: It's not really meta data.
\end_layout

\begin_layout Standard
Meta data includes permutation information, exception information, and permutati
on exceptions.
\end_layout

\begin_layout Standard
Meta data shall be global to the file.
 Meta data names consist of the lower case alphanumerics.
 Test case specific meta data (fields) shall be stored in a comment block
 at the start of the file.
 This is only due to style.
\end_layout

\begin_layout Standard
A field definition shall consist of 
\end_layout

\begin_layout Itemize
The field name 
\end_layout

\begin_layout Itemize
A colon.
 
\end_layout

\begin_layout Itemize
A comma separated list of values.
 
\end_layout

\begin_layout Standard
The values shall be stripped of leading and trailing white space.
\end_layout

\begin_layout Standard
Permutation exceptions are by port only.
 Exceptions to a field are specified by a modified field definition.
 An exception definition consists of
\end_layout

\begin_layout Itemize
The field name.
 
\end_layout

\begin_layout Itemize
An opening square bracket.
 
\end_layout

\begin_layout Itemize
A comma separated list of ports the exception applies for.
 
\end_layout

\begin_layout Itemize
A closing square bracket.
 
\end_layout

\begin_layout Itemize
A colon.
 
\end_layout

\begin_layout Itemize
The values to use for this field for these ports.
 
\end_layout

\begin_layout Standard
An instance of the test case shall be generated for each permutation of
 the test case specific meta data fields.
\end_layout

\begin_layout Standard
The runtime meta fields are 
\end_layout

\begin_layout Itemize
port - The port this test is running on.
 
\end_layout

\begin_layout Itemize
testcase - The name of this test case.
 
\end_layout

\begin_layout Itemize
function - The name of the current function.
 
\end_layout

\begin_layout Standard
Most of the runtime fields are not very usable.
 They are there for completeness.
\end_layout

\begin_layout Standard
Meta fields may be accessed inside the test case by enclosing them in curly
 brackets.
 The curly brackets will be interpreted anywhere inside the test case, including
 inside quoted strings.
 Field names that are not recognised will be passed through including the
 brackets.
 Note that it is therefore impossible to use some strings within the test
 case.
\end_layout

\begin_layout Standard
Test case function names should include the permuted fields in the name
 to reduce name collisions.
\end_layout

\begin_layout Subsection
An example
\end_layout

\begin_layout Standard
I don't know how to do pre-formatted text in LaTeX.
 Sigh.
\end_layout

\begin_layout Standard
The following code generates a simple increment test for all combinations
 of the storage classes and all combinations of the data sizes.
 This is a bad example as the optimiser will often remove most of this code.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Verse

\family typewriter
/** Test for increment.
 
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

type: char, int, long
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Z80 port does not fully support longs (4 byte)
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

type[z80]: char, int
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

class: 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

, register, static */
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

static void
\begin_inset Newline newline
\end_inset

testInc{class}{types}(void)
\begin_inset Newline newline
\end_inset

{ 
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

{class} {type} i = 0; 
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = i + 1;
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ASSERT((i == 1));
\begin_inset Newline newline
\end_inset

}
\end_layout

\end_body
\end_document
